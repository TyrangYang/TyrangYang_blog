<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Html - Tag - TyrangYang_Blog</title><link>https://tyrangyang.github.io/TyrangYang_blog/tags/html/</link><description>Html - Tag - TyrangYang_Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 27 Feb 2021 22:57:47 -0800</lastBuildDate><atom:link href="https://tyrangyang.github.io/TyrangYang_blog/tags/html/" rel="self" type="application/rss+xml"/><item><title>Useful Post Archive</title><link>https://tyrangyang.github.io/TyrangYang_blog/useful-post-archive/</link><pubDate>Sat, 27 Feb 2021 22:57:47 -0800</pubDate><author>xxxx</author><guid>https://tyrangyang.github.io/TyrangYang_blog/useful-post-archive/</guid><description><![CDATA[<h2 id="react">React</h2>
<p><a href="https://tyrangyang.github.io/TyrangYang_blog/react-posts-archive/" rel="">&ndash;&gt;<strong>Look this post</strong>&lt;&ndash;</a></p>
<h2 id="web-basic">WEB basic</h2>
<h3 id="please-stop-using-local-storage">Please Stop Using Local Storage</h3>
<p><a href="https://www.rdegges.com/2018/please-stop-using-local-storage/" target="_blank" rel="noopener noreffer ">https://www.rdegges.com/2018/please-stop-using-local-storage/</a></p>
<h3 id="jwt-authentication-when-and-how-to-use-it">JWT authentication: When and how to use it</h3>
<p><a href="https://blog.logrocket.com/jwt-authentication-best-practices/#:~:text=A%20JWT%20needs%20to%20be,storage%20%28or%20session%20storage%29" target="_blank" rel="noopener noreffer ">https://blog.logrocket.com/jwt-authentication-best-practices/#:~:text=A%20JWT%20needs%20to%20be,storage%20(or%20session%20storage)</a>.</p>
<h2 id="graphql">Graphql</h2>
<h3 id="dispatch-this-using-apollo-client-3-as-a-state-management-solution">Dispatch This: Using Apollo Client 3 as a State Management Solution</h3>
<p><a href="https://www.apollographql.com/blog/dispatch-this-using-apollo-client-3-as-a-state-management-solution/" target="_blank" rel="noopener noreffer ">https://www.apollographql.com/blog/dispatch-this-using-apollo-client-3-as-a-state-management-solution/</a></p>
<h3 id="apollo-client-update-cache-when-delete-an-item-from-list">Apollo Client update cache when delete an item from list</h3>
<p><a href="https://github.com/apollographql/apollo-client/issues/6451#issuecomment-775242381" target="_blank" rel="noopener noreffer ">https://github.com/apollographql/apollo-client/issues/6451#issuecomment-775242381</a></p>
<h3 id="several-things-for-graphql-security">Several things for Graphql Security</h3>
<p><a href="https://ithelp.ithome.com.tw/articles/10208008" target="_blank" rel="noopener noreffer ">https://ithelp.ithome.com.tw/articles/10208008</a></p>
<h3 id="should-i-put-usequery-inside-a-useeffect-and-should-i-store-returned-data-in-state">should I put useQuery inside a useEffect and should I store returned data in state?</h3>
<p><a href="https://github.com/trojanowski/react-apollo-hooks/issues/158" target="_blank" rel="noopener noreffer ">https://github.com/trojanowski/react-apollo-hooks/issues/158</a></p>]]></description></item><item><title>HTML Effect with vanilla html js css</title><link>https://tyrangyang.github.io/TyrangYang_blog/html-effect/</link><pubDate>Mon, 14 Dec 2020 15:52:02 -0800</pubDate><author>xxxx</author><guid>https://tyrangyang.github.io/TyrangYang_blog/html-effect/</guid><description><![CDATA[<h2 id="modal-box">Modal box</h2>
<blockquote>
<p><a href="/html/htmlEffect/modal.html" rel="">Demo</a></p></blockquote>
<h2 id="cursor--hover-effect">Cursor &amp; hover effect</h2>
<blockquote>
<p><a href="/html/htmlEffect/cursorHover.html" rel="">Demo</a></p></blockquote>
<h2 id="pure-css-hamburger-button">Pure Css hamburger button</h2>
<p>This is a hamburger button using pure css to style it.</p>
<blockquote>
<p><a href="/html/htmlEffect/hamburgerBtnManu.html" rel="">Demo</a></p></blockquote>
<h2 id="loading">Loading</h2>
<blockquote>
<p><a href="/html/htmlEffect/loading.html" rel="">Demo</a></p></blockquote>
<h2 id="sidebar">Sidebar</h2>
<blockquote>
<p><a href="/html/htmlEffect/sidebar.html" rel="">Demo</a></p></blockquote>
<h2 id="profile">Profile</h2>
<blockquote>
<p><a href="/html/htmlEffect/profile.html" rel="">Demo</a></p></blockquote>]]></description></item><item><title>HTML5 Overview üèó</title><link>https://tyrangyang.github.io/TyrangYang_blog/html5-overview/</link><pubDate>Thu, 13 Aug 2020 14:02:26 -0700</pubDate><author>xxxx</author><guid>https://tyrangyang.github.io/TyrangYang_blog/html5-overview/</guid><description><![CDATA[<h2 id="table">table</h2>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">table
</span></span><span class="line"><span class="cl">‚îú‚îÄ‚îÄ thead
</span></span><span class="line"><span class="cl">‚îÇ   ‚îî‚îÄ‚îÄ tr
</span></span><span class="line"><span class="cl">‚îÇ       ‚îî‚îÄ‚îÄ th
</span></span><span class="line"><span class="cl">‚îú‚îÄ‚îÄ tbody
</span></span><span class="line"><span class="cl">‚îÇ   ‚îî‚îÄ‚îÄ tr
</span></span><span class="line"><span class="cl">‚îÇ       ‚îî‚îÄ‚îÄ td
</span></span><span class="line"><span class="cl">‚îî‚îÄ‚îÄ tfoot
</span></span><span class="line"><span class="cl">    ‚îî‚îÄ‚îÄ tr
</span></span><span class="line"><span class="cl">        ‚îî‚îÄ‚îÄ td</span></span></code></pre></div></div>
<h2 id="intersection-observer-api">Intersection Observer API</h2>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-js">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">option</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">root</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">rootMargin</span><span class="o">:</span> <span class="s1">&#39;0px&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">threshold</span><span class="o">:</span> <span class="mf">0.7</span><span class="p">,</span> <span class="c1">// or an array [0.1, 0.2, ...]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">callback</span> <span class="o">=</span> <span class="p">(</span><span class="nx">entries</span><span class="p">,</span> <span class="nx">observer</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">entries</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">entry</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Each entry describes an intersection change for one observed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// target element:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//   entry.boundingClientRect
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//   entry.intersectionRatio
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//   entry.intersectionRect
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//   entry.isIntersecting
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//   entry.rootBounds
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//   entry.target
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//   entry.time
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">observer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">IntersectionObserver</span><span class="p">(</span><span class="nx">callBack</span><span class="p">,</span> <span class="nx">option</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">observer</span><span class="p">.</span><span class="nx">observer</span><span class="p">(</span><span class="nx">nodeOne</span><span class="p">);</span> <span class="c1">//observing only nodeOne
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">observer</span><span class="p">.</span><span class="nx">observer</span><span class="p">(</span><span class="nx">nodeTwo</span><span class="p">);</span> <span class="c1">//observing both nodeOne and nodeTwo
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">observer</span><span class="p">.</span><span class="nx">unobserve</span><span class="p">(</span><span class="nx">nodeOne</span><span class="p">);</span> <span class="c1">//observing only nodeTwo
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">observer</span><span class="p">.</span><span class="nx">disconnect</span><span class="p">();</span> <span class="c1">//not observing any node
</span></span></span></code></pre></div></div>
<blockquote>
<p>When node fulfilled observer option, callback function will run directly</p>]]></description></item><item><title>Canvas in html5</title><link>https://tyrangyang.github.io/TyrangYang_blog/canvas/</link><pubDate>Wed, 08 Apr 2020 00:00:00 +0000</pubDate><author>Haolin Yang</author><guid>https://tyrangyang.github.io/TyrangYang_blog/canvas/</guid><description><![CDATA[<p>Canvas is a new feature since <strong>html5</strong> that allows you draw something on your web page</p>
<p>Reference from <a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API" target="_blank" rel="noopener noreffer ">MDN</a></p>
<h2 id="project-by-using-canvas">Project by using Canvas</h2>
<ul>
<li><a href="https://tyrangyang.github.io/chaos-game/" target="_blank" rel="noopener noreffer ">Chaos Game</a>:
Use canvas to draw the chaos game</li>
<li><a href="https://scribble-panel.herokuapp.com" target="_blank" rel="noopener noreffer ">Draw panel with socket.io</a>:
A scribble panel with Websocket. Multi user can draw panel on simultaneously</li>
</ul>
<h2 id="draw-on-canvas">Draw on canvas</h2>
<h3 id="get-start">Get start</h3>
<p>Jquery to get canvas. ctx mean canvas content which used to draw on canvas</p>]]></description></item><item><title>How to have a dynamic class name</title><link>https://tyrangyang.github.io/TyrangYang_blog/how-to-have-dynamic-classname/</link><pubDate>Fri, 15 Nov 2019 00:00:00 +0000</pubDate><author>Haolin Yang</author><guid>https://tyrangyang.github.io/TyrangYang_blog/how-to-have-dynamic-classname/</guid><description><![CDATA[<p>In same case, you may want to have a different style depend on your state or a variable. Now we can have two ways to achieve that.</p>
<h2 id="classnames">classNames</h2>
<p>This is a javascript for conditionally joining classNames.</p>
<p>Here is: <a href="https://github.com/JedWatson/classnames" target="_blank" rel="noopener noreffer ">Github</a></p>
<p>Basically, you can combine any number of classNames.</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-js">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">classNames</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;classNames&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">classNames</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">bar</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">duck</span><span class="o">:</span> <span class="kc">false</span> <span class="p">},</span> <span class="s1">&#39;baz&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">quux</span><span class="o">:</span> <span class="kc">true</span> <span class="p">});</span> <span class="c1">// =&gt; &#39;foo bar baz quux&#39;
</span></span></span></code></pre></div></div>
<h2 id="es6-template-literals">ES6 template literals</h2>
<p>You can just use template literals.</p>]]></description></item><item><title>MarkDown overview</title><link>https://tyrangyang.github.io/TyrangYang_blog/markdowntutorial/</link><pubDate>Sun, 16 Jun 2019 00:00:00 +0000</pubDate><author>Haolin Yang</author><guid>https://tyrangyang.github.io/TyrangYang_blog/markdowntutorial/</guid><description><![CDATA[<p>This is learning note for MarkDown</p>
<h1 id="heading-1">Heading 1</h1>
<p>or</p>
<h1 id="heading-1-1">Heading 1</h1>
<h2 id="heading-2">Heading 2</h2>
<p>or</p>
<h2 id="heading-2-1">Heading 2</h2>
<h2 id="italic-and-bold">Italic and bold</h2>
<p><em>italic</em> or <em>italic</em>
<strong>bold</strong> or <strong>bold</strong>
<strong><em>italic and bold</em></strong> or <strong><em>italic and bold</em></strong></p>
<h2 id="unordered-list">Unordered list</h2>
<ul>
<li>line 1</li>
<li>line 2</li>
<li>line 3
<ul>
<li>sub 1</li>
<li>sub 2</li>
</ul>
</li>
</ul>
<p>or</p>
<ul>
<li>line 1</li>
<li>line 2</li>
<li>line 3
<ul>
<li>sub 1</li>
<li>sub 2</li>
</ul>
</li>
</ul>
<h2 id="ordered-list">Ordered list</h2>
<ol>
<li>line 1</li>
<li>line 2
<ol>
<li>sub 1</li>
<li>sub 2</li>
</ol>
</li>
<li>line 3</li>
</ol>
<h2 id="blockquotes">BlockQuotes</h2>
<p>Use &lsquo;&gt;&rsquo; for a quotes</p>]]></description></item></channel></rss>