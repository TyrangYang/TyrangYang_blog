<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Permutation - Tag - TyrangYang_Blog</title><link>https://tyrangyang.github.io/TyrangYang_blog/tags/permutation/</link><description>Permutation - Tag - TyrangYang_Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 05 Feb 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://tyrangyang.github.io/TyrangYang_blog/tags/permutation/" rel="self" type="application/rss+xml"/><item><title>How to find next permutation</title><link>https://tyrangyang.github.io/TyrangYang_blog/next-permutation/</link><pubDate>Wed, 05 Feb 2020 00:00:00 +0000</pubDate><author>Haolin Yang</author><guid>https://tyrangyang.github.io/TyrangYang_blog/next-permutation/</guid><description><![CDATA[This is introduce how to find the next lexicographically permutation.
Suppose the permutation is 1 2 3. The next one is 1 3 2.
Algorithm in C++ C++ provide an algorithm called next_permutation to support that. Reference
Example:
#include &lt;iostream&gt; // std::cout #include &lt;algorithm&gt; // std::next_permutation, std::sort int main () { int myints[] = {1,2,3}; std::sort (myints,myints+3); std::cout &lt;&lt; &#34;The 3! possible permutations with 3 elements:\n&#34;; do { std::cout &lt;&lt; myints[0] &lt;&lt; &#39; &#39; &lt;&lt; myints[1] &lt;&lt; &#39; &#39; &lt;&lt; myints[2] &lt;&lt; &#39;\n&#39;; } while ( std::next_permutation(myints,myints+3) ); std::cout &lt;&lt; &#34;After loop: &#34; &lt;&lt; myints[0] &lt;&lt; &#39; &#39; &lt;&lt; myints[1] &lt;&lt; &#39; &#39; &lt;&lt; myints[2] &lt;&lt; &#39;\n&#39;; return 0; How it work.]]></description></item></channel></rss>