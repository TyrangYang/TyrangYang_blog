<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Web - Tag - TyrangYang_Blog</title><link>https://tyrangyang.github.io/TyrangYang_blog/tags/web/</link><description>Web - Tag - TyrangYang_Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 12 Mar 2021 04:04:08 -0800</lastBuildDate><atom:link href="https://tyrangyang.github.io/TyrangYang_blog/tags/web/" rel="self" type="application/rss+xml"/><item><title>React Logic Reuse Example</title><link>https://tyrangyang.github.io/TyrangYang_blog/react-logic-reuse/</link><pubDate>Fri, 12 Mar 2021 04:04:08 -0800</pubDate><author>Haolin Yang</author><guid>https://tyrangyang.github.io/TyrangYang_blog/react-logic-reuse/</guid><description><![CDATA[<h2 id="react-logic-extraction">React logic extraction</h2>
<p><a href="https://tyrangyang.github.io/TyrangYang_blog/react/#logic-extraction" rel="">Check this post</a></p>
<h2 id="example-code">Example code</h2>
<p>This example demonstrate one single feature using four different feature to archive code split</p>
<p>Code running there: <a href="../html/HOC_HOOK_RENDER_PROPS/HOC_HOOK_RENDER_PROPS.html" target="_blank">&ndash;&gt;Link&lt;&ndash;</a></p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-jsx">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-jsx" data-lang="jsx"><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">useState</span><span class="p">,</span> <span class="nx">useEffect</span> <span class="p">}</span> <span class="nx">from</span> <span class="nx">React</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">Styles</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">redBorder</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">border</span><span class="o">:</span> <span class="s1">&#39;1px solid #f00&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">MouseDisplay</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span> <span class="p">})</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nx">Mouse</span> <span class="nx">at</span> <span class="nx">x</span><span class="o">:</span> <span class="p">{</span><span class="nx">x</span><span class="p">}</span> <span class="p">;</span> <span class="nx">y</span><span class="o">:</span> <span class="p">{</span><span class="nx">y</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">MouseDisplay2</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span> <span class="p">})</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">style</span><span class="o">=</span><span class="p">{{</span> <span class="nx">color</span><span class="o">:</span> <span class="s1">&#39;teal&#39;</span> <span class="p">}}&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nx">Mouse</span> <span class="nx">at</span> <span class="nx">x</span><span class="o">:</span> <span class="p">{</span><span class="nx">x</span><span class="p">}</span> <span class="p">;</span> <span class="nx">y</span><span class="o">:</span> <span class="p">{</span><span class="nx">y</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Normal
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">export</span> <span class="kr">const</span> <span class="nx">MouseInfoAndDisplay</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="p">[</span><span class="nx">x</span><span class="p">,</span> <span class="nx">setX</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="p">[</span><span class="nx">y</span><span class="p">,</span> <span class="nx">setY</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">handleMove</span> <span class="o">=</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">setX</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">clientX</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nx">setY</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">clientY</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">style</span><span class="o">=</span><span class="p">{</span><span class="nx">Styles</span><span class="p">.</span><span class="nx">redBorder</span><span class="p">}</span> <span class="na">onMouseMove</span><span class="o">=</span><span class="p">{</span><span class="nx">handleMove</span><span class="p">}&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;</span><span class="nt">MouseDisplay</span> <span class="na">x</span><span class="o">=</span><span class="p">{</span><span class="nx">x</span><span class="p">}</span> <span class="na">y</span><span class="o">=</span><span class="p">{</span><span class="nx">y</span><span class="p">}</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// HOC
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">withMouseInfo</span> <span class="o">=</span> <span class="p">(</span><span class="nx">Component</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kr">const</span> <span class="p">[</span><span class="nx">x</span><span class="p">,</span> <span class="nx">setX</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="kr">const</span> <span class="p">[</span><span class="nx">y</span><span class="p">,</span> <span class="nx">setY</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="kr">const</span> <span class="nx">handleMove</span> <span class="o">=</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">setX</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">clientX</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="nx">setY</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">clientY</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">};</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;</span><span class="nt">div</span> <span class="na">style</span><span class="o">=</span><span class="p">{</span><span class="nx">Styles</span><span class="p">.</span><span class="nx">redBorder</span><span class="p">}</span> <span class="na">onMouseMove</span><span class="o">=</span><span class="p">{</span><span class="nx">handleMove</span><span class="p">}&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="p">&lt;</span><span class="nt">Component</span> <span class="p">{</span><span class="na">...props</span><span class="p">}</span> <span class="na">x</span><span class="o">=</span><span class="p">{</span><span class="nx">x</span><span class="p">}</span> <span class="na">y</span><span class="o">=</span><span class="p">{</span><span class="nx">y</span><span class="p">}</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">HOCMouseDisplay</span> <span class="o">=</span> <span class="nx">withMouseInfo</span><span class="p">(</span><span class="nx">MouseDisplay</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">HOCMouseDisplay2</span> <span class="o">=</span> <span class="nx">withMouseInfo</span><span class="p">(</span><span class="nx">MouseDisplay2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Render Props
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">MouseRenderProps</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">render</span> <span class="p">})</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="p">[</span><span class="nx">x</span><span class="p">,</span> <span class="nx">setX</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="p">[</span><span class="nx">y</span><span class="p">,</span> <span class="nx">setY</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">handleMove</span> <span class="o">=</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">setX</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">clientX</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nx">setY</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">clientY</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">style</span><span class="o">=</span><span class="p">{</span><span class="nx">Styles</span><span class="p">.</span><span class="nx">redBorder</span><span class="p">}</span> <span class="na">onMouseMove</span><span class="o">=</span><span class="p">{</span><span class="nx">handleMove</span><span class="p">}&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span><span class="nx">render</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)}</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">Mouse</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;</span><span class="nt">MouseRenderProps</span> <span class="na">render</span><span class="o">=</span><span class="p">{(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">&lt;</span><span class="nt">MouseDisplay</span> <span class="na">x</span><span class="o">=</span><span class="p">{</span><span class="nx">x</span><span class="p">}</span> <span class="na">y</span><span class="o">=</span><span class="p">{</span><span class="nx">y</span><span class="p">}</span> <span class="p">/&gt;}</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;</span><span class="nt">MouseRenderProps</span>
</span></span><span class="line"><span class="cl">                <span class="na">render</span><span class="o">=</span><span class="p">{(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">&lt;</span><span class="nt">MouseDisplay2</span> <span class="na">x</span><span class="o">=</span><span class="p">{</span><span class="nx">x</span><span class="p">}</span> <span class="na">y</span><span class="o">=</span><span class="p">{</span><span class="nx">y</span><span class="p">}</span> <span class="p">/&gt;}</span>
</span></span><span class="line"><span class="cl">            <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Customize HOOK
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">useMouseState</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="p">[</span><span class="nx">x</span><span class="p">,</span> <span class="nx">setX</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="p">[</span><span class="nx">y</span><span class="p">,</span> <span class="nx">setY</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="p">[</span><span class="nx">node</span><span class="p">,</span> <span class="nx">setNode</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">handleMove</span> <span class="o">=</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">setX</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">clientX</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nx">setY</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">clientY</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="nx">useEffect</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="nx">node</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">node</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;mousemove&#39;</span><span class="p">,</span> <span class="nx">handleMove</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span> <span class="p">[</span><span class="nx">node</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">[</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">setNode</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">MouseUsingHook</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="p">[</span><span class="nx">x1</span><span class="p">,</span> <span class="nx">y1</span><span class="p">,</span> <span class="nx">ref1</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useMouseState</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="p">[</span><span class="nx">x2</span><span class="p">,</span> <span class="nx">y2</span><span class="p">,</span> <span class="nx">ref2</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useMouseState</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;</span><span class="nt">div</span> <span class="na">ref</span><span class="o">=</span><span class="p">{</span><span class="nx">ref1</span><span class="p">}</span> <span class="na">style</span><span class="o">=</span><span class="p">{</span><span class="nx">Styles</span><span class="p">.</span><span class="nx">redBorder</span><span class="p">}&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="p">&lt;</span><span class="nt">MouseDisplay</span> <span class="na">x</span><span class="o">=</span><span class="p">{</span><span class="nx">x1</span><span class="p">}</span> <span class="na">y</span><span class="o">=</span><span class="p">{</span><span class="nx">y1</span><span class="p">}</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;</span><span class="nt">div</span> <span class="na">ref</span><span class="o">=</span><span class="p">{</span><span class="nx">ref2</span><span class="p">}</span> <span class="na">style</span><span class="o">=</span><span class="p">{</span><span class="nx">Styles</span><span class="p">.</span><span class="nx">redBorder</span><span class="p">}&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="p">&lt;</span><span class="nt">MouseDisplay2</span> <span class="na">x</span><span class="o">=</span><span class="p">{</span><span class="nx">x2</span><span class="p">}</span> <span class="na">y</span><span class="o">=</span><span class="p">{</span><span class="nx">y2</span><span class="p">}</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">div</span>
</span></span><span class="line"><span class="cl">            <span class="na">style</span><span class="o">=</span><span class="p">{{</span>
</span></span><span class="line"><span class="cl">                <span class="nx">display</span><span class="o">:</span> <span class="s1">&#39;flex&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nx">flexDirection</span><span class="o">:</span> <span class="s1">&#39;column&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nx">height</span><span class="o">:</span> <span class="s1">&#39;100vh&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nx">justifyContent</span><span class="o">:</span> <span class="s1">&#39;space-around&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="p">}}</span>
</span></span><span class="line"><span class="cl">        <span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nx">Normal</span><span class="o">:</span> <span class="p">&lt;</span><span class="nt">MouseInfoAndDisplay</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nx">HOC</span><span class="o">:</span> <span class="p">&lt;</span><span class="nt">HOCMouseDisplay</span> <span class="p">/&gt;</span> <span class="p">&lt;</span><span class="nt">HOCMouseDisplay2</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nx">Render</span> <span class="nx">Props</span><span class="o">:</span> <span class="p">&lt;</span><span class="nt">Mouse</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nx">Hook</span><span class="o">:</span> <span class="p">&lt;</span><span class="nt">MouseUsingHook</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span></span></span></code></pre></div></div>]]></description></item><item><title>HTML5 Overview 🏗</title><link>https://tyrangyang.github.io/TyrangYang_blog/html5-overview/</link><pubDate>Thu, 13 Aug 2020 14:02:26 -0700</pubDate><author>xxxx</author><guid>https://tyrangyang.github.io/TyrangYang_blog/html5-overview/</guid><description><![CDATA[<h2 id="table">table</h2>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">table
</span></span><span class="line"><span class="cl">├── thead
</span></span><span class="line"><span class="cl">│   └── tr
</span></span><span class="line"><span class="cl">│       └── th
</span></span><span class="line"><span class="cl">├── tbody
</span></span><span class="line"><span class="cl">│   └── tr
</span></span><span class="line"><span class="cl">│       └── td
</span></span><span class="line"><span class="cl">└── tfoot
</span></span><span class="line"><span class="cl">    └── tr
</span></span><span class="line"><span class="cl">        └── td</span></span></code></pre></div></div>
<h2 id="intersection-observer-api">Intersection Observer API</h2>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-js">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">option</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">root</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">rootMargin</span><span class="o">:</span> <span class="s1">&#39;0px&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nx">threshold</span><span class="o">:</span> <span class="mf">0.7</span><span class="p">,</span> <span class="c1">// or an array [0.1, 0.2, ...]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">callback</span> <span class="o">=</span> <span class="p">(</span><span class="nx">entries</span><span class="p">,</span> <span class="nx">observer</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">entries</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">entry</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Each entry describes an intersection change for one observed
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// target element:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//   entry.boundingClientRect
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//   entry.intersectionRatio
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//   entry.intersectionRect
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//   entry.isIntersecting
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//   entry.rootBounds
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//   entry.target
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//   entry.time
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">observer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">IntersectionObserver</span><span class="p">(</span><span class="nx">callBack</span><span class="p">,</span> <span class="nx">option</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">observer</span><span class="p">.</span><span class="nx">observer</span><span class="p">(</span><span class="nx">nodeOne</span><span class="p">);</span> <span class="c1">//observing only nodeOne
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">observer</span><span class="p">.</span><span class="nx">observer</span><span class="p">(</span><span class="nx">nodeTwo</span><span class="p">);</span> <span class="c1">//observing both nodeOne and nodeTwo
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">observer</span><span class="p">.</span><span class="nx">unobserve</span><span class="p">(</span><span class="nx">nodeOne</span><span class="p">);</span> <span class="c1">//observing only nodeTwo
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">observer</span><span class="p">.</span><span class="nx">disconnect</span><span class="p">();</span> <span class="c1">//not observing any node
</span></span></span></code></pre></div></div>
<blockquote>
<p>When node fulfilled observer option, callback function will run directly</p>]]></description></item><item><title>Express Overview</title><link>https://tyrangyang.github.io/TyrangYang_blog/express/</link><pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate><author>Haolin Yang</author><guid>https://tyrangyang.github.io/TyrangYang_blog/express/</guid><description><![CDATA[<p>Express.js is a web framework for Node.js</p>
<h2 id="example">Example</h2>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-js">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(...);</span> <span class="c1">// get and post or middle ware
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">({</span><span class="nx">hello</span><span class="o">:</span><span class="s2">&#34;world&#34;</span><span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">PORT</span> <span class="o">=</span> <span class="mi">4000</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">PORT</span><span class="p">,</span> <span class="p">()=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="sb">`Server is ready on http://localhost:</span><span class="si">${</span><span class="nx">PORT</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span></span></span></code></pre></div></div>]]></description></item><item><title>Redis overview</title><link>https://tyrangyang.github.io/TyrangYang_blog/redis/</link><pubDate>Tue, 15 Oct 2019 00:00:00 +0000</pubDate><author>Haolin Yang</author><guid>https://tyrangyang.github.io/TyrangYang_blog/redis/</guid><description><![CDATA[<h2 id="installation">Installation</h2>
<p>For mac</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sudo brew install redis-server</span></span></code></pre></div></div>
<p>open redis server</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">redis-server</span></span></code></pre></div></div>
<p>test is work or not</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">redis-cli ping</span></span></code></pre></div></div>
<h2 id="basic-command">basic command</h2>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">ECHO &#39;hello word
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">QUIT</span></span></code></pre></div></div>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">SET foo 100
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">GET foo // 100
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">SET bar &#39;hello world&#39;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">GET bar // hello world
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">INCR foo // 101
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">DECR foo // 100
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">EXISTS foo // 1
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">EXISTS foo1 // 0
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">DEL bar
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">EXISTS bar // 0
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">GET bar //(nir)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">FLUSHALL // all empty
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">SET server:name someserver
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">GET server:name // &#34;someserver&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">SET server:port 8000
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">GET server:port
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">SET greeting &#34;Hello world&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">GET greeting
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">EXPIRE greeting 50  // set expirations to 50 second
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">TTL greeting
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">SETEX greeting 30 &#34;hello world&#34; // set value and expiration
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">PERSIST greeting // key will not expire
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">TTL greeting // -1
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">MSET key1 &#34;hello&#34; key2 &#34;world&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">APPEND key1 &#34; world&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">RENAME key1 greeting
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">LPUSH people &#34;Brad&#34; // 1
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">LPUSH people &#34;Jen&#34; // 2
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">LPUSH people &#34;Tom&#34; // 3
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">LRANGE people 0 -1 // return all // Tom Jen Brad
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">LRANGE people 1 2 // Jen Brad
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">RPUSH people &#34;Harry&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">LRANGE people 0 -1 // Tom Jen Brad Harry
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">LLEN people // 4
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">RPOP people // Harry
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">LPOP people
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">LINSERT people BEFORE &#34;Brad&#34; &#34;TOM&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">LRANGE people 0 -1 // Jen Tom Brad
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">SADD cars &#34;Ford&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">SADD cars &#34;Honda&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">SADD cars &#34;BMW&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">SISMEMBER cars &#34;Ford&#34; // 1
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">SISMEMBER cars &#34;Chevy&#34; // 0
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">SMEMBER cars // Honda BMW Ford
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">SCARD cars // 3
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">SMOVE cars mycars &#34;Ford&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">SMEMBER cars // Honda BMW
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">SMEMBER mycars // Ford
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">SRAM cars &#34;BMW&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">SMEMBER cars // Honda
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ZADD users 1980 &#34;Brad&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ZADD users 1975 &#34;Jen&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ZADD users 1990 &#34;Mike&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ZADD users 1990 &#34;Kate&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ZRANK users &#34;Mike&#34; // 3
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ZRANK users &#34;Jen&#34; // 0
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ZRANK users &#34;Brad&#34; // 1
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ZRANGE users 0 -1 // Jen Brad Kate Mike
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ZINCRBY users 1 &#34;Jen&#34; // 1976
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">HSET user:brad name &#34;Brad&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">HSET user:brad email &#34;brad@gmail.com&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">HGET user:brad name
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">HGET user:brad email
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">HGETALL user:brad
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">HMSET user:john name &#34;Jen&#34; email &#34;jen@yahoo.com&#34; age &#34;25&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">HGETALL user:john
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">HKEYS user:john
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">HVAL user:john
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">HINCERBY user:john age 1 // 26
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">HDEL user:john age // 1
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">HLEN user:john // 2
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">SAVE</span></span></code></pre></div></div>]]></description></item><item><title>React overview</title><link>https://tyrangyang.github.io/TyrangYang_blog/react/</link><pubDate>Thu, 03 Oct 2019 00:00:00 +0000</pubDate><author>Haolin Yang</author><guid>https://tyrangyang.github.io/TyrangYang_blog/react/</guid><description><![CDATA[<h2 id="init-react">Init react</h2>
<p>Commend</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">npx create-react-app .</span></span></code></pre></div></div>
<p>npx means you use this package but don&rsquo;t download it.</p>
<p>or with redux</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">npx create-react-app my-app --template redux</span></span></code></pre></div></div>
<h2 id="life-cycle">life cycle</h2>
<figure><figcaption>
      <h4>Class component lifecycle</h4>
    </figcaption>
</figure>

<figure><figcaption>
      <h4>Function component method</h4>
    </figcaption>
</figure>

<h3 id="shouldcomponentupdate">shouldComponentUpdate()</h3>
<p>Run before <code>render()</code> to check this component need to render or not.</p>]]></description></item><item><title>Web development review</title><link>https://tyrangyang.github.io/TyrangYang_blog/web-develop-review/</link><pubDate>Thu, 29 Aug 2019 00:00:00 +0000</pubDate><author>Haolin Yang</author><guid>https://tyrangyang.github.io/TyrangYang_blog/web-develop-review/</guid><description><![CDATA[<script type="text/x-mathjax-config">
MathJax.Hub.Config({
  jax: ["input/TeX", "output/HTML-CSS"],
  tex2jax: {
    inlineMath: [ ['$', '$'] ],
    displayMath: [ ['$$', '$$']],
    processEscapes: true,
    skipTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code']
  },
  messageStyle: "none",
  "HTML-CSS": { preferredFont: "TeX", availableFonts: ["STIX","TeX"] }
});
</script>
<script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML" type="text/javascript"></script>
<h2 id="document-constructor">Document constructor</h2>
<p>$$f(x) = sin(x)$$</p>]]></description></item></channel></rss>