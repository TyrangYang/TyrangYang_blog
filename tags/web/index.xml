<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Web - Tag - TyrangYang_Blog</title><link>https://tyrangyang.github.io/TyrangYang_blog/tags/web/</link><description>Web - Tag - TyrangYang_Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 12 Mar 2021 04:04:08 -0800</lastBuildDate><atom:link href="https://tyrangyang.github.io/TyrangYang_blog/tags/web/" rel="self" type="application/rss+xml"/><item><title>React Logic Reuse Example</title><link>https://tyrangyang.github.io/TyrangYang_blog/react-logic-reuse/</link><pubDate>Fri, 12 Mar 2021 04:04:08 -0800</pubDate><author>Haolin Yang</author><guid>https://tyrangyang.github.io/TyrangYang_blog/react-logic-reuse/</guid><description><![CDATA[React logic extraction Check this post
Example code This example demonstrate one single feature using four different feature to archive code split
Code running there: &ndash;&gt;Link&lt;&ndash;
import { useState, useEffect } from React; const Styles = { redBorder: { border: &#39;1px solid #f00&#39;, }, }; const MouseDisplay = ({ x, y }) =&gt; { return ( &lt;div&gt; Mouse at x: {x} ; y: {y} &lt;/div&gt; ); }; const MouseDisplay2 = ({ x, y }) =&gt; { return ( &lt;div style={{ color: &#39;teal&#39; }}&gt; Mouse at x: {x} ; y: {y} &lt;/div&gt; ); }; // Normal export const MouseInfoAndDisplay = () =&gt; { const [x, setX] = useState(0); const [y, setY] = useState(0); const handleMove = (e) =&gt; { setX(e.]]></description></item><item><title>HTML5 Overview üèó</title><link>https://tyrangyang.github.io/TyrangYang_blog/html5-overview/</link><pubDate>Thu, 13 Aug 2020 14:02:26 -0700</pubDate><author>xxxx</author><guid>https://tyrangyang.github.io/TyrangYang_blog/html5-overview/</guid><description><![CDATA[table table ‚îú‚îÄ‚îÄ thead ‚îÇ ‚îî‚îÄ‚îÄ tr ‚îÇ ‚îî‚îÄ‚îÄ th ‚îú‚îÄ‚îÄ tbody ‚îÇ ‚îî‚îÄ‚îÄ tr ‚îÇ ‚îî‚îÄ‚îÄ td ‚îî‚îÄ‚îÄ tfoot ‚îî‚îÄ‚îÄ tr ‚îî‚îÄ‚îÄ td Intersection Observer API const option = { root: null, rootMargin: &#39;0px&#39;, threshold: 0.7, // or an array [0.1, 0.2, ...] }; const callback = (entries, observer) =&gt; { entries.forEach((entry) =&gt; { // Each entry describes an intersection change for one observed // target element: // entry.boundingClientRect // entry.]]></description></item><item><title>Express Overview</title><link>https://tyrangyang.github.io/TyrangYang_blog/express/</link><pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate><author>Haolin Yang</author><guid>https://tyrangyang.github.io/TyrangYang_blog/express/</guid><description><![CDATA[Express.js is a web framework for Node.js
Example const express = require(&#39;express&#39;); const app = express(); app.use(...); // get and post or middle ware app.get(&#39;/&#39;, (req, res) =&gt; { return res.send({hello:&#34;world&#34;}); }) const PORT = 4000; app.listen(PORT, ()=&gt; { console.log(`Server is ready on http://localhost:${PORT}`); }) ]]></description></item><item><title>Redis overview</title><link>https://tyrangyang.github.io/TyrangYang_blog/redis/</link><pubDate>Tue, 15 Oct 2019 00:00:00 +0000</pubDate><author>Haolin Yang</author><guid>https://tyrangyang.github.io/TyrangYang_blog/redis/</guid><description><![CDATA[Installation For mac
sudo brew install redis-server open redis server
redis-server test is work or not
redis-cli ping basic command ECHO &#39;hello word QUIT SET foo 100 GET foo // 100 SET bar &#39;hello world&#39; GET bar // hello world INCR foo // 101 DECR foo // 100 EXISTS foo // 1 EXISTS foo1 // 0 DEL bar EXISTS bar // 0 GET bar //(nir) FLUSHALL // all empty SET server:name someserver GET server:name // &#34;someserver&#34; SET server:port 8000 GET server:port SET greeting &#34;Hello world&#34; GET greeting EXPIRE greeting 50 // set expirations to 50 second TTL greeting SETEX greeting 30 &#34;hello world&#34; // set value and expiration PERSIST greeting // key will not expire TTL greeting // -1 MSET key1 &#34;hello&#34; key2 &#34;world&#34; APPEND key1 &#34; world&#34; RENAME key1 greeting LPUSH people &#34;Brad&#34; // 1 LPUSH people &#34;Jen&#34; // 2 LPUSH people &#34;Tom&#34; // 3 LRANGE people 0 -1 // return all // Tom Jen Brad LRANGE people 1 2 // Jen Brad RPUSH people &#34;Harry&#34; LRANGE people 0 -1 // Tom Jen Brad Harry LLEN people // 4 RPOP people // Harry LPOP people LINSERT people BEFORE &#34;Brad&#34; &#34;TOM&#34; LRANGE people 0 -1 // Jen Tom Brad SADD cars &#34;Ford&#34; SADD cars &#34;Honda&#34; SADD cars &#34;BMW&#34; SISMEMBER cars &#34;Ford&#34; // 1 SISMEMBER cars &#34;Chevy&#34; // 0 SMEMBER cars // Honda BMW Ford SCARD cars // 3 SMOVE cars mycars &#34;Ford&#34; SMEMBER cars // Honda BMW SMEMBER mycars // Ford SRAM cars &#34;BMW&#34; SMEMBER cars // Honda ZADD users 1980 &#34;Brad&#34; ZADD users 1975 &#34;Jen&#34; ZADD users 1990 &#34;Mike&#34; ZADD users 1990 &#34;Kate&#34; ZRANK users &#34;Mike&#34; // 3 ZRANK users &#34;Jen&#34; // 0 ZRANK users &#34;Brad&#34; // 1 ZRANGE users 0 -1 // Jen Brad Kate Mike ZINCRBY users 1 &#34;Jen&#34; // 1976 HSET user:brad name &#34;Brad&#34; HSET user:brad email &#34;brad@gmail.]]></description></item><item><title>React overview</title><link>https://tyrangyang.github.io/TyrangYang_blog/react/</link><pubDate>Thu, 03 Oct 2019 00:00:00 +0000</pubDate><author>Haolin Yang</author><guid>https://tyrangyang.github.io/TyrangYang_blog/react/</guid><description>Init react Commend
npx create-react-app . npx means you use this package but don&amp;rsquo;t download it.
or with redux
npx create-react-app my-app --template redux life cycle Class component lifecycle Function component method shouldComponentUpdate() Run before render() to check this component need to render or not.
shouldComponentUpdate(nextProps, nextStates){ return boolean; } PureComponent can automatically do a shallow comparison to determine need to update or not
export default React.memo(&amp;lt;component name&amp;gt;) only compare props but it works for functional component</description></item><item><title>Web development review</title><link>https://tyrangyang.github.io/TyrangYang_blog/web-develop-review/</link><pubDate>Thu, 29 Aug 2019 00:00:00 +0000</pubDate><author>Haolin Yang</author><guid>https://tyrangyang.github.io/TyrangYang_blog/web-develop-review/</guid><description>Document constructor $$f(x) = sin(x)$$</description></item></channel></rss>