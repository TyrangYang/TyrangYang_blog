<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>web - Tag - TyrangYang_Blog</title>
        <link>https://tyrangyang.github.io/TyrangYang_blog/tags/web/</link>
        <description>web - Tag - TyrangYang_Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 30 Mar 2020 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://tyrangyang.github.io/TyrangYang_blog/tags/web/" rel="self" type="application/rss+xml" /><item>
    <title>Express Overview</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/express/</link>
    <pubDate>Mon, 30 Mar 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/express/</guid>
    <description><![CDATA[Express.js is a web framework for Node.js
Example 1 2 3 4 5 6 7 8 9 10 11 12 13 14  const express = require(&#39;express&#39;); const app = express(); app.use(...); // get and post or middle ware  app.get(&#39;/&#39;, (req, res) =&gt; { return res.send({hello:&#34;world&#34;}); }) const PORT = 4000; app.listen(PORT, ()=&gt; { console.log(`Server is ready on http://localhost:${PORT}`); })   ]]></description>
</item><item>
    <title>Redis overview</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/redis/</link>
    <pubDate>Tue, 15 Oct 2019 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/redis/</guid>
    <description><![CDATA[Installation For mac
1  sudo brew install redis-server   open redis server
1  redis-server   test is work or not
1  redis-cli ping   basic command 1 2 3  ECHO &#39;hello word QUIT   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144  SET foo 100 GET foo // 100 SET bar &#39;hello world&#39; GET bar // hello world INCR foo // 101 DECR foo // 100 EXISTS foo // 1 EXISTS foo1 // 0 DEL bar EXISTS bar // 0 GET bar //(nir) FLUSHALL // all empty SET server:name someserver GET server:name // &#34;someserver&#34; SET server:port 8000 GET server:port SET greeting &#34;Hello world&#34; GET greeting EXPIRE greeting 50 // set expirations to 50 second TTL greeting SETEX greeting 30 &#34;hello world&#34; // set value and expiration PERSIST greeting // key will not expire TTL greeting // -1 MSET key1 &#34;hello&#34; key2 &#34;world&#34; APPEND key1 &#34; world&#34; RENAME key1 greeting LPUSH people &#34;Brad&#34; // 1 LPUSH people &#34;Jen&#34; // 2 LPUSH people &#34;Tom&#34; // 3 LRANGE people 0 -1 // return all // Tom Jen Brad LRANGE people 1 2 // Jen Brad RPUSH people &#34;Harry&#34; LRANGE people 0 -1 // Tom Jen Brad Harry LLEN people // 4 RPOP people // Harry LPOP people LINSERT people BEFORE &#34;Brad&#34; &#34;TOM&#34; LRANGE people 0 -1 // Jen Tom Brad SADD cars &#34;Ford&#34; SADD cars &#34;Honda&#34; SADD cars &#34;BMW&#34; SISMEMBER cars &#34;Ford&#34; // 1 SISMEMBER cars &#34;Chevy&#34; // 0 SMEMBER cars // Honda BMW Ford SCARD cars // 3 SMOVE cars mycars &#34;Ford&#34; SMEMBER cars // Honda BMW SMEMBER mycars // Ford SRAM cars &#34;BMW&#34; SMEMBER cars // Honda ZADD users 1980 &#34;Brad&#34; ZADD users 1975 &#34;Jen&#34; ZADD users 1990 &#34;Mike&#34; ZADD users 1990 &#34;Kate&#34; ZRANK users &#34;Mike&#34; // 3 ZRANK users &#34;Jen&#34; // 0 ZRANK users &#34;Brad&#34; // 1 ZRANGE users 0 -1 // Jen Brad Kate Mike ZINCRBY users 1 &#34;Jen&#34; // 1976 HSET user:brad name &#34;Brad&#34; HSET user:brad email &#34;brad@gmail.]]></description>
</item><item>
    <title>React overview</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/react/</link>
    <pubDate>Thu, 03 Oct 2019 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/react/</guid>
    <description><![CDATA[init react Commend
1  npx create-react-app .   npx means you use this package but don&rsquo;t download it.
Structure package.json react &amp; react-dom is necessary for web app. For mobile app need react-native instead of react-dom.
public/index.html signal page application which is index.html
Everything your do will inside &lt;div id=&quot;root&rdquo;&gt;&lt;/div&gt;
src/index.js Entry point for react
src/App.js All the component.
Inside the class, the render() method is called life cycle method and to render the page.]]></description>
</item><item>
    <title>Web development review</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/web-develop-review/</link>
    <pubDate>Thu, 29 Aug 2019 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/web-develop-review/</guid>
    <description><![CDATA[MathJax.Hub.Config({ jax: ["input/TeX", "output/HTML-CSS"], tex2jax: { inlineMath: [ ['$', '$'] ], displayMath: [ ['$$', '$$']], processEscapes: true, skipTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code'] }, messageStyle: "none", "HTML-CSS": { preferredFont: "TeX", availableFonts: ["STIX","TeX"] } });   Document constructor $$f(x) = sin(x)$$]]></description>
</item></channel>
</rss>
