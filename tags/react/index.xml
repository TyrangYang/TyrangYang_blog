<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>React - Tag - TyrangYang_Blog</title><link>https://tyrangyang.github.io/TyrangYang_blog/tags/react/</link><description>React - Tag - TyrangYang_Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 12 Mar 2021 04:04:08 -0800</lastBuildDate><atom:link href="https://tyrangyang.github.io/TyrangYang_blog/tags/react/" rel="self" type="application/rss+xml"/><item><title>React Logic Reuse Example</title><link>https://tyrangyang.github.io/TyrangYang_blog/react-logic-reuse/</link><pubDate>Fri, 12 Mar 2021 04:04:08 -0800</pubDate><author>Haolin Yang</author><guid>https://tyrangyang.github.io/TyrangYang_blog/react-logic-reuse/</guid><description><![CDATA[<h2 id="react-logic-extraction">React logic extraction</h2>
<p><a href="https://tyrangyang.github.io/TyrangYang_blog/react/#logic-extraction" rel="">Check this post</a></p>
<h2 id="example-code">Example code</h2>
<p>This example demonstrate one single feature using four different feature to archive code split</p>
<p>Code running there: <a href="../html/HOC_HOOK_RENDER_PROPS/HOC_HOOK_RENDER_PROPS.html" target="_blank">&ndash;&gt;Link&lt;&ndash;</a></p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-jsx">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-jsx" data-lang="jsx"><span class="line"><span class="cl"><span class="kr">import</span> <span class="p">{</span> <span class="nx">useState</span><span class="p">,</span> <span class="nx">useEffect</span> <span class="p">}</span> <span class="nx">from</span> <span class="nx">React</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">Styles</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">redBorder</span><span class="o">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">border</span><span class="o">:</span> <span class="s1">&#39;1px solid #f00&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">MouseDisplay</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span> <span class="p">})</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nx">Mouse</span> <span class="nx">at</span> <span class="nx">x</span><span class="o">:</span> <span class="p">{</span><span class="nx">x</span><span class="p">}</span> <span class="p">;</span> <span class="nx">y</span><span class="o">:</span> <span class="p">{</span><span class="nx">y</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">MouseDisplay2</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">x</span><span class="p">,</span> <span class="nx">y</span> <span class="p">})</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">style</span><span class="o">=</span><span class="p">{{</span> <span class="nx">color</span><span class="o">:</span> <span class="s1">&#39;teal&#39;</span> <span class="p">}}&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nx">Mouse</span> <span class="nx">at</span> <span class="nx">x</span><span class="o">:</span> <span class="p">{</span><span class="nx">x</span><span class="p">}</span> <span class="p">;</span> <span class="nx">y</span><span class="o">:</span> <span class="p">{</span><span class="nx">y</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Normal
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">export</span> <span class="kr">const</span> <span class="nx">MouseInfoAndDisplay</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="p">[</span><span class="nx">x</span><span class="p">,</span> <span class="nx">setX</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="p">[</span><span class="nx">y</span><span class="p">,</span> <span class="nx">setY</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">handleMove</span> <span class="o">=</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">setX</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">clientX</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nx">setY</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">clientY</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">style</span><span class="o">=</span><span class="p">{</span><span class="nx">Styles</span><span class="p">.</span><span class="nx">redBorder</span><span class="p">}</span> <span class="na">onMouseMove</span><span class="o">=</span><span class="p">{</span><span class="nx">handleMove</span><span class="p">}&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;</span><span class="nt">MouseDisplay</span> <span class="na">x</span><span class="o">=</span><span class="p">{</span><span class="nx">x</span><span class="p">}</span> <span class="na">y</span><span class="o">=</span><span class="p">{</span><span class="nx">y</span><span class="p">}</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// HOC
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kr">const</span> <span class="nx">withMouseInfo</span> <span class="o">=</span> <span class="p">(</span><span class="nx">Component</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kr">const</span> <span class="p">[</span><span class="nx">x</span><span class="p">,</span> <span class="nx">setX</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="kr">const</span> <span class="p">[</span><span class="nx">y</span><span class="p">,</span> <span class="nx">setY</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="kr">const</span> <span class="nx">handleMove</span> <span class="o">=</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">setX</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">clientX</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="nx">setY</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">clientY</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">};</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;</span><span class="nt">div</span> <span class="na">style</span><span class="o">=</span><span class="p">{</span><span class="nx">Styles</span><span class="p">.</span><span class="nx">redBorder</span><span class="p">}</span> <span class="na">onMouseMove</span><span class="o">=</span><span class="p">{</span><span class="nx">handleMove</span><span class="p">}&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="p">&lt;</span><span class="nt">Component</span> <span class="p">{</span><span class="na">...props</span><span class="p">}</span> <span class="na">x</span><span class="o">=</span><span class="p">{</span><span class="nx">x</span><span class="p">}</span> <span class="na">y</span><span class="o">=</span><span class="p">{</span><span class="nx">y</span><span class="p">}</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">HOCMouseDisplay</span> <span class="o">=</span> <span class="nx">withMouseInfo</span><span class="p">(</span><span class="nx">MouseDisplay</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">HOCMouseDisplay2</span> <span class="o">=</span> <span class="nx">withMouseInfo</span><span class="p">(</span><span class="nx">MouseDisplay2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Render Props
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">MouseRenderProps</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">render</span> <span class="p">})</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="p">[</span><span class="nx">x</span><span class="p">,</span> <span class="nx">setX</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="p">[</span><span class="nx">y</span><span class="p">,</span> <span class="nx">setY</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">handleMove</span> <span class="o">=</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">setX</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">clientX</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nx">setY</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">clientY</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">style</span><span class="o">=</span><span class="p">{</span><span class="nx">Styles</span><span class="p">.</span><span class="nx">redBorder</span><span class="p">}</span> <span class="na">onMouseMove</span><span class="o">=</span><span class="p">{</span><span class="nx">handleMove</span><span class="p">}&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span><span class="nx">render</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)}</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">Mouse</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;</span><span class="nt">MouseRenderProps</span> <span class="na">render</span><span class="o">=</span><span class="p">{(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">&lt;</span><span class="nt">MouseDisplay</span> <span class="na">x</span><span class="o">=</span><span class="p">{</span><span class="nx">x</span><span class="p">}</span> <span class="na">y</span><span class="o">=</span><span class="p">{</span><span class="nx">y</span><span class="p">}</span> <span class="p">/&gt;}</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;</span><span class="nt">MouseRenderProps</span>
</span></span><span class="line"><span class="cl">                <span class="na">render</span><span class="o">=</span><span class="p">{(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">&lt;</span><span class="nt">MouseDisplay2</span> <span class="na">x</span><span class="o">=</span><span class="p">{</span><span class="nx">x</span><span class="p">}</span> <span class="na">y</span><span class="o">=</span><span class="p">{</span><span class="nx">y</span><span class="p">}</span> <span class="p">/&gt;}</span>
</span></span><span class="line"><span class="cl">            <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Customize HOOK
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">useMouseState</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="p">[</span><span class="nx">x</span><span class="p">,</span> <span class="nx">setX</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="p">[</span><span class="nx">y</span><span class="p">,</span> <span class="nx">setY</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="p">[</span><span class="nx">node</span><span class="p">,</span> <span class="nx">setNode</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="nx">handleMove</span> <span class="o">=</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">setX</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">clientX</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="nx">setY</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">clientY</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="nx">useEffect</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="nx">node</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">node</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;mousemove&#39;</span><span class="p">,</span> <span class="nx">handleMove</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span> <span class="p">[</span><span class="nx">node</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">[</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="nx">setNode</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">export</span> <span class="kr">const</span> <span class="nx">MouseUsingHook</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="p">[</span><span class="nx">x1</span><span class="p">,</span> <span class="nx">y1</span><span class="p">,</span> <span class="nx">ref1</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useMouseState</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="kr">const</span> <span class="p">[</span><span class="nx">x2</span><span class="p">,</span> <span class="nx">y2</span><span class="p">,</span> <span class="nx">ref2</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useMouseState</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;</span><span class="nt">div</span> <span class="na">ref</span><span class="o">=</span><span class="p">{</span><span class="nx">ref1</span><span class="p">}</span> <span class="na">style</span><span class="o">=</span><span class="p">{</span><span class="nx">Styles</span><span class="p">.</span><span class="nx">redBorder</span><span class="p">}&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="p">&lt;</span><span class="nt">MouseDisplay</span> <span class="na">x</span><span class="o">=</span><span class="p">{</span><span class="nx">x1</span><span class="p">}</span> <span class="na">y</span><span class="o">=</span><span class="p">{</span><span class="nx">y1</span><span class="p">}</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;</span><span class="nt">div</span> <span class="na">ref</span><span class="o">=</span><span class="p">{</span><span class="nx">ref2</span><span class="p">}</span> <span class="na">style</span><span class="o">=</span><span class="p">{</span><span class="nx">Styles</span><span class="p">.</span><span class="nx">redBorder</span><span class="p">}&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="p">&lt;</span><span class="nt">MouseDisplay2</span> <span class="na">x</span><span class="o">=</span><span class="p">{</span><span class="nx">x2</span><span class="p">}</span> <span class="na">y</span><span class="o">=</span><span class="p">{</span><span class="nx">y2</span><span class="p">}</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">App</span> <span class="o">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;</span><span class="nt">div</span>
</span></span><span class="line"><span class="cl">            <span class="na">style</span><span class="o">=</span><span class="p">{{</span>
</span></span><span class="line"><span class="cl">                <span class="nx">display</span><span class="o">:</span> <span class="s1">&#39;flex&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nx">flexDirection</span><span class="o">:</span> <span class="s1">&#39;column&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nx">height</span><span class="o">:</span> <span class="s1">&#39;100vh&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="nx">justifyContent</span><span class="o">:</span> <span class="s1">&#39;space-around&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="p">}}</span>
</span></span><span class="line"><span class="cl">        <span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nx">Normal</span><span class="o">:</span> <span class="p">&lt;</span><span class="nt">MouseInfoAndDisplay</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nx">HOC</span><span class="o">:</span> <span class="p">&lt;</span><span class="nt">HOCMouseDisplay</span> <span class="p">/&gt;</span> <span class="p">&lt;</span><span class="nt">HOCMouseDisplay2</span><span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nx">Render</span> <span class="nx">Props</span><span class="o">:</span> <span class="p">&lt;</span><span class="nt">Mouse</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">                <span class="nx">Hook</span><span class="o">:</span> <span class="p">&lt;</span><span class="nt">MouseUsingHook</span> <span class="p">/&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span></span></span></code></pre></div></div>]]></description></item><item><title>Redux Overview</title><link>https://tyrangyang.github.io/TyrangYang_blog/redux-overview/</link><pubDate>Mon, 07 Sep 2020 14:30:17 -0700</pubDate><author>xxxx</author><guid>https://tyrangyang.github.io/TyrangYang_blog/redux-overview/</guid><description><![CDATA[<p>Redux Document: <a href="https://redux.js.org/introduction/getting-started" target="_blank" rel="noopener noreffer ">English</a> <a href="https://cn.redux.js.org" target="_blank" rel="noopener noreffer ">中文</a></p>
<h2 id="what-is-redux">What is Redux</h2>
<blockquote>
<p>Redux is a predictable state container for JavaScript apps.</p></blockquote>
<p>Redux also created by Facebook and it is a improvement from Flux. Redux is state management for any view library (mostly react)</p>
<h2 id="when-use-redux">When use Redux</h2>
<p>Redux is design for complex UI, multiple view source or many interaction with server. If a simple UI, Redux is <strong>not necessary</strong></p>
<h2 id="workflow">Workflow</h2>
<figure><figcaption>
      <h4>Redux Workflow</h4>
    </figcaption>
</figure>

<h2 id="example-for-redux-core">Example for Redux core</h2>
<p>In <code>index.html</code></p>]]></description></item><item><title>React Posts Archive</title><link>https://tyrangyang.github.io/TyrangYang_blog/react-posts-archive/</link><pubDate>Thu, 03 Sep 2020 12:25:26 -0700</pubDate><author>xxxx</author><guid>https://tyrangyang.github.io/TyrangYang_blog/react-posts-archive/</guid><description><![CDATA[<h2 id="how-to-connect-your-react-app-to-a-backend-on-the-same-origin">How to connect your React app to a backend on the same origin</h2>
<p><a href="https://flaviocopes.com/how-to-serve-react-from-same-origin/" target="_blank" rel="noopener noreffer ">https://flaviocopes.com/how-to-serve-react-from-same-origin/</a></p>
<h2 id="react-conditional-rendering">React Conditional Rendering</h2>
<p>Original source: <a href="https://www.robinwieruch.de/conditional-rendering-react" target="_blank" rel="noopener noreffer ">https://www.robinwieruch.de/conditional-rendering-react</a></p>
<h2 id="why-we-switched-to-react-hooks">Why We Switched to React Hooks</h2>
<p>Original source: <a href="https://blog.bitsrc.io/why-we-switched-to-react-hooks-48798c42c7f" target="_blank" rel="noopener noreffer ">https://blog.bitsrc.io/why-we-switched-to-react-hooks-48798c42c7f</a></p>
<h2 id="why-cant-i-open-my-react-app-by-clicking-indexhtml">Why Can’t I Open My React App By Clicking Index.html?</h2>
<p><a href="https://tyrangyang.github.io/TyrangYang_blog/open-react-app-by-index/" rel="">From My Own Post</a>
<div class="details admonition warning">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw" aria-hidden="true"></i> Original Resource is NOT Free<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><strong>Medium</strong> Original source: <a href="https://medium.com/@louis.raymond/why-cant-i-open-my-react-app-by-clicking-index-html-d1778f6324cf" target="_blank" rel="noopener noreffer ">https://medium.com/@louis.raymond/why-cant-i-open-my-react-app-by-clicking-index-html-d1778f6324cf</a></div>
        </div>
    </div></p>
<h2 id="how-to-use-an-intersectionobserver-in-a-react-hook">How To Use an IntersectionObserver in a React Hook</h2>
<p>PDF archive: <a href="../pdf/how-to-use-an-intersectionobserver-in-a-react-hook.pdf" target="_blank">&ndash;&gt;Link&lt;&ndash;</a></p>]]></description></item><item><title>How to have a dynamic class name</title><link>https://tyrangyang.github.io/TyrangYang_blog/how-to-have-dynamic-classname/</link><pubDate>Fri, 15 Nov 2019 00:00:00 +0000</pubDate><author>Haolin Yang</author><guid>https://tyrangyang.github.io/TyrangYang_blog/how-to-have-dynamic-classname/</guid><description><![CDATA[<p>In same case, you may want to have a different style depend on your state or a variable. Now we can have two ways to achieve that.</p>
<h2 id="classnames">classNames</h2>
<p>This is a javascript for conditionally joining classNames.</p>
<p>Here is: <a href="https://github.com/JedWatson/classnames" target="_blank" rel="noopener noreffer ">Github</a></p>
<p>Basically, you can combine any number of classNames.</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-js">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-js" data-lang="js"><span class="line"><span class="cl"><span class="kr">const</span> <span class="nx">classNames</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;classNames&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="nx">classNames</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">bar</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">duck</span><span class="o">:</span> <span class="kc">false</span> <span class="p">},</span> <span class="s1">&#39;baz&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">quux</span><span class="o">:</span> <span class="kc">true</span> <span class="p">});</span> <span class="c1">// =&gt; &#39;foo bar baz quux&#39;
</span></span></span></code></pre></div></div>
<h2 id="es6-template-literals">ES6 template literals</h2>
<p>You can just use template literals.</p>]]></description></item><item><title>A simple application apollo server and react</title><link>https://tyrangyang.github.io/TyrangYang_blog/spacex/</link><pubDate>Thu, 14 Nov 2019 00:00:00 +0000</pubDate><author>Haolin Yang</author><guid>https://tyrangyang.github.io/TyrangYang_blog/spacex/</guid><description><![CDATA[<h2 id="graphql">graphql</h2>
<p>Design Graphql is base on what your want</p>
<h2 id="github">github</h2>
<p><a href="https://github.com/TyrangYang/SpaceX_graphql_react" target="_blank" rel="noopener noreffer ">https://github.com/TyrangYang/SpaceX_graphql_react</a></p>]]></description></item><item><title>Why Can’t I Open My React App By Clicking Index.html?</title><link>https://tyrangyang.github.io/TyrangYang_blog/open-react-app-by-index/</link><pubDate>Mon, 28 Oct 2019 00:00:00 +0000</pubDate><author>Haolin Yang</author><guid>https://tyrangyang.github.io/TyrangYang_blog/open-react-app-by-index/</guid><description><![CDATA[<h2 id="the-app-should-run-when-you-open-up-your-indexhtml-file">The app should Run when you open up your index.html file</h2>
<p>The conclusion is add <code>&quot;homepage&quot;:&quot;.&quot;,</code> in package.json.</p>
<p><a href="https://medium.com/@louis.raymond/why-cant-i-open-my-react-app-by-clicking-index-html-d1778f6324cf" target="_blank" rel="noopener noreffer ">medium.com/@louis.raymond</a></p>
<h2 id="still-not-work-when-you-have-client-side-router">Still not work when you have client side router</h2>
<p>If you are routing client side, index.html may still not work. In this case, you may using <code>BrowserRouter</code>. Change it to <code>HashRouter</code>.</p>
<p>Click: <a href="https://stackoverflow.com/questions/51974369/hashrouter-vs-browserrouter" target="_blank" rel="noopener noreffer ">Different between them</a></p>]]></description></item><item><title>React overview</title><link>https://tyrangyang.github.io/TyrangYang_blog/react/</link><pubDate>Thu, 03 Oct 2019 00:00:00 +0000</pubDate><author>Haolin Yang</author><guid>https://tyrangyang.github.io/TyrangYang_blog/react/</guid><description><![CDATA[<h2 id="init-react">Init react</h2>
<p>Commend</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">npx create-react-app .</span></span></code></pre></div></div>
<p>npx means you use this package but don&rsquo;t download it.</p>
<p>or with redux</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">npx create-react-app my-app --template redux</span></span></code></pre></div></div>
<h2 id="life-cycle">life cycle</h2>
<figure><figcaption>
      <h4>Class component lifecycle</h4>
    </figcaption>
</figure>

<figure><figcaption>
      <h4>Function component method</h4>
    </figcaption>
</figure>

<h3 id="shouldcomponentupdate">shouldComponentUpdate()</h3>
<p>Run before <code>render()</code> to check this component need to render or not.</p>]]></description></item></channel></rss>