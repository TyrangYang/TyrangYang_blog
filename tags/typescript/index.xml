<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Typescript - Tag - TyrangYang_Blog</title><link>https://tyrangyang.github.io/TyrangYang_blog/tags/typescript/</link><description>Typescript - Tag - TyrangYang_Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 26 Feb 2024 14:11:05 -0800</lastBuildDate><atom:link href="https://tyrangyang.github.io/TyrangYang_blog/tags/typescript/" rel="self" type="application/rss+xml"/><item><title>Typescript Trick</title><link>https://tyrangyang.github.io/TyrangYang_blog/typescript-trick/</link><pubDate>Mon, 26 Feb 2024 14:11:05 -0800</pubDate><author>xxxx</author><guid>https://tyrangyang.github.io/TyrangYang_blog/typescript-trick/</guid><description><![CDATA[generic types optional To make a generic type optional, you have to assign the void as the default value.
const fetchData = &lt;T = void&gt;(url: string): T =&gt; { const res: T = fetch(url); return res; }; https://garbagevalue.com/blog/optional-generic-typescript#quick-solutions-make-generic-type-optional
string[ ] &amp; [ string, &hellip;string[ ] ] The main difference is that type [string, ...string[]] at least have one element. [] will alert error. string[] could be empty. [] is ok.]]></description></item><item><title>Design Pattern</title><link>https://tyrangyang.github.io/TyrangYang_blog/design-pattern/</link><pubDate>Thu, 22 Jul 2021 16:35:53 -0700</pubDate><author>xxxx</author><guid>https://tyrangyang.github.io/TyrangYang_blog/design-pattern/</guid><description><![CDATA[Design pattern Factory pattern const createDataBaseClass = (dbName: DBOption) =&gt; { switch (dbName) { case &#39;InMemo&#39;: return InMemoryDataBase; case &#39;SQL&#39;: return SQL_DB; // ... // you can add anything else default: break; } }; Singleton pattern export const createDataBase = &lt;T extends BaseRecord&gt;() =&gt; { const db = new InMemoryDataBase&lt;T&gt;(); return db; }; const pokemonDB = createDataBase&lt;Pokemon&gt;(); pokemonDB.set({ id: &#39;Bulbasaur&#39;, attack: 59, defense: 10, }); console.log(pokemonDB.get(&#39;Bulbasaur&#39;)); // A CPP way to do const createDataBase2 = &lt;T extends BaseRecord&gt;() =&gt; { class InMemoryDataBase2 implements DataBase&lt;T&gt; { private db: Record&lt;string, T&gt; = {}; static instance: InMemoryDataBase2 = new InMemoryDataBase2(); private constructor() {} // private constructor is necessary public set(newValue: T): void { this.]]></description></item><item><title>Typescript overview</title><link>https://tyrangyang.github.io/TyrangYang_blog/typescript/</link><pubDate>Thu, 08 Apr 2021 23:37:35 -0700</pubDate><author>xxxx</author><guid>https://tyrangyang.github.io/TyrangYang_blog/typescript/</guid><description><![CDATA[type Union type &amp; Literal type const add = ( a: number | string, b: number | string, type?: &#39;number&#39; | &#39;string&#39; ): number | string =&gt; { if (type === &#39;string&#39;) { return a.toString() + b.toString(); } else return +a + +b; }; console.log(add(1, 2)); Array type Book = { id: string; name: string; }; let books: Book[] = []; unknown let test1: unknown; let test2: string; test1 = &#39;xyz&#39;; // ok // test2 = test1; // error function f1(a: any) { a.]]></description></item></channel></rss>