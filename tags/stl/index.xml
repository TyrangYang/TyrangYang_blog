<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>STL - Tag - TyrangYang_Blog</title><link>https://tyrangyang.github.io/TyrangYang_blog/tags/stl/</link><description>STL - Tag - TyrangYang_Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 20 Sep 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://tyrangyang.github.io/TyrangYang_blog/tags/stl/" rel="self" type="application/rss+xml"/><item><title>All algorithm in C++</title><link>https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/</link><pubDate>Fri, 20 Sep 2019 00:00:00 +0000</pubDate><author>Haolin Yang</author><guid>https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/</guid><description><![CDATA[<h2 id="content">Content</h2>
<ul>
<li><a href="#content" rel="">Content</a></li>
<li><a href="#algorithm-overview" rel="">Algorithm Overview</a></li>
<li><a href="#copy" rel="">Copy</a></li>
<li><a href="#for-each" rel="">For each</a></li>
<li><a href="#generation" rel="">Generation</a></li>
<li><a href="#heap" rel="">Heap</a></li>
<li><a href="#merge" rel="">Merge</a></li>
<li><a href="#move" rel="">Move</a></li>
<li><a href="#number" rel="">Number</a></li>
<li><a href="#partition" rel="">Partition</a></li>
<li><a href="#permutation" rel="">Permutation</a></li>
<li><a href="#remove" rel="">Remove</a></li>
<li><a href="#replace" rel="">Replace</a></li>
<li><a href="#reverse" rel="">Reverse</a></li>
<li><a href="#rotate" rel="">rotate</a></li>
<li><a href="#search" rel="">Search</a></li>
<li><a href="#set" rel="">Set</a></li>
<li><a href="#shuffle" rel="">Shuffle</a></li>
<li><a href="#sort" rel="">Sort</a></li>
<li><a href="#swap" rel="">Swap</a></li>
<li><a href="#test-range" rel="">Test range</a></li>
<li><a href="#unique" rel="">Unique</a></li>
</ul>
<h2 id="algorithm-overview">Algorithm Overview</h2>
<p><strong><code>*</code> &ndash;&gt; new feature from C++11</strong></p>
<table>
  <thead>
      <tr>
          <th style="text-align: center">Algorithm Name</th>
          <th style="text-align: center">Usage</th>
          <th style="text-align: center">Mutating?</th>
          <th style="text-align: center">Head File</th>
          <th style="text-align: center">Complexity</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td style="text-align: center"><a href="#number" rel="">accumulate</a></td>
          <td style="text-align: center">Accumulate values in range</td>
          <td style="text-align: center">N</td>
          <td style="text-align: center">numeric</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#number" rel="">adjacent_difference</a></td>
          <td style="text-align: center">Compute adjacent difference of range and return to another place</td>
          <td style="text-align: center">N</td>
          <td style="text-align: center">numeric</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#search" rel="">adjacent_find</a></td>
          <td style="text-align: center">Find first equal adjacent elements in range</td>
          <td style="text-align: center">N</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#test-range" rel="">all_of*</a></td>
          <td style="text-align: center">Test condition on all elements in range</td>
          <td style="text-align: center">N</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#test-range" rel="">any_of*</a></td>
          <td style="text-align: center">Test if any element in range fulfills condition</td>
          <td style="text-align: center">N</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#search" rel="">binary_search</a></td>
          <td style="text-align: center">Test if value exists in sorted sequence</td>
          <td style="text-align: center">N</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">On average O(logn + 2). On non-random-access iterator is O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#copy" rel="">copy</a></td>
          <td style="text-align: center">Copy range of elements</td>
          <td style="text-align: center">N(copy)</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#copy" rel="">copy_backward</a></td>
          <td style="text-align: center">Copy range of elements backward</td>
          <td style="text-align: center">N(copy)</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#copy" rel="">copy_if*</a></td>
          <td style="text-align: center">Copy certain elements of range</td>
          <td style="text-align: center">N(copy)</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#copy" rel="">copy_n*</a></td>
          <td style="text-align: center">Copies the first n elements from the range beginning</td>
          <td style="text-align: center">N(copy)</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#number" rel="">count</a></td>
          <td style="text-align: center">Count appearances of value in range</td>
          <td style="text-align: center">N</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#number" rel="">count_if</a></td>
          <td style="text-align: center">Return number of elements in range satisfying condition</td>
          <td style="text-align: center">N</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#test-range" rel="">equal</a></td>
          <td style="text-align: center">Test whether the elements in two ranges are equal</td>
          <td style="text-align: center">N</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#search" rel="">equal_range</a></td>
          <td style="text-align: center">Get sub range of equal elements</td>
          <td style="text-align: center">N</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(2logn + 1) for random access iterator, otherwise O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#generation" rel="">fill</a></td>
          <td style="text-align: center">Fill range with value</td>
          <td style="text-align: center">Y</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#generation" rel="">fill_n</a></td>
          <td style="text-align: center">Assigns val to the first n elements of the sequence pointed by first</td>
          <td style="text-align: center">Y</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#search" rel="">find</a></td>
          <td style="text-align: center">Find the first element in range</td>
          <td style="text-align: center">N</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#search" rel="">find_end</a></td>
          <td style="text-align: center">Find last subsequence in range</td>
          <td style="text-align: center">N</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(m*(1+n-m))</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#search" rel="">find_first_of</a></td>
          <td style="text-align: center">Returns an iterator to the first element in the range [first1,last1) that matches any of the elements in [first2,last2)</td>
          <td style="text-align: center">N</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(nm)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#search" rel="">find_if</a></td>
          <td style="text-align: center">Find the first element in range in some condition</td>
          <td style="text-align: center">N</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#search" rel="">find_if_not*</a></td>
          <td style="text-align: center">Find the first element in range in some condition</td>
          <td style="text-align: center">N</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#for-each" rel="">for_each</a></td>
          <td style="text-align: center">Apply function to range</td>
          <td style="text-align: center">N</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#generation" rel="">generate</a></td>
          <td style="text-align: center">Assigns the value returned by successive calls to gen to the elements in the range [first,last)</td>
          <td style="text-align: center">Y</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#generation" rel="">generate_n</a></td>
          <td style="text-align: center">Assigns the value returned by successive calls to gen to the first n elements of the sequence pointed by first</td>
          <td style="text-align: center">Y</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#test-range" rel="">includes</a></td>
          <td style="text-align: center">Test whether sorted range includes another sorted range</td>
          <td style="text-align: center">N</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#number" rel="">inner_product</a></td>
          <td style="text-align: center">Compute cumulative inner product of range</td>
          <td style="text-align: center">N</td>
          <td style="text-align: center">numeric</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#merge" rel="">inplace_merge</a></td>
          <td style="text-align: center">Merge consecutive sorted ranges</td>
          <td style="text-align: center">Y</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n) if extra memory is available, otherwise is O(nlogn)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#number" rel="">iota</a></td>
          <td style="text-align: center">Store increasing sequence</td>
          <td style="text-align: center">Y</td>
          <td style="text-align: center">numeric</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#heap" rel="">is_heap*</a></td>
          <td style="text-align: center">Test if range is heap</td>
          <td style="text-align: center">N</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#heap" rel="">is_heap_until*</a></td>
          <td style="text-align: center">Find first element not in heap order.</td>
          <td style="text-align: center">N</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#partition" rel="">is_partitioned*</a></td>
          <td style="text-align: center">Test whether range is partitioned</td>
          <td style="text-align: center">Y</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#permutation" rel="">is_permutation*</a></td>
          <td style="text-align: center">Compares the elements in the range [first1,last1) with those in the range beginning at first2, and returns true if they just different permutation</td>
          <td style="text-align: center">N</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#sort" rel="">is_sorted*</a></td>
          <td style="text-align: center">Check whether range is sorted</td>
          <td style="text-align: center">N</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#sort" rel="">is_sorted_until*</a></td>
          <td style="text-align: center">Find first unsorted element in range</td>
          <td style="text-align: center">N</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#swap" rel="">iter_swap</a></td>
          <td style="text-align: center">Swaps the elements pointed to by a and b</td>
          <td style="text-align: center">Y</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(1)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#permutation" rel="">lexicographical_compare</a></td>
          <td style="text-align: center">Compare two range lexicographically.</td>
          <td style="text-align: center">N</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#search" rel="">lower_bond</a></td>
          <td style="text-align: center">Return iterator to lower bound</td>
          <td style="text-align: center">N</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(logn + 1) for random access iterator, otherwise O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#heap" rel="">make_heap</a></td>
          <td style="text-align: center">Make heap from range</td>
          <td style="text-align: center">Y</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(3n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#number" rel="">max</a></td>
          <td style="text-align: center">Returns the largest of a and b. If both are equivalent, a is returned.</td>
          <td style="text-align: center">N</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(1)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#number" rel="">max_element</a></td>
          <td style="text-align: center">Return largest element in range</td>
          <td style="text-align: center">N</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#merge" rel="">merge</a></td>
          <td style="text-align: center">Merge sorted ranges</td>
          <td style="text-align: center">Y</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#number" rel="">min</a></td>
          <td style="text-align: center">Returns the smallest of a and b. If both are equivalent, a is returned.</td>
          <td style="text-align: center">N</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(1)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#number" rel="">minmax*</a></td>
          <td style="text-align: center">Return smallest and largest elements from give 2 value or initializer</td>
          <td style="text-align: center">N</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(1)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#number" rel="">minmax_element*</a></td>
          <td style="text-align: center">Return smallest and largest elements in range</td>
          <td style="text-align: center">N</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#number" rel="">min_element</a></td>
          <td style="text-align: center">Return smallest element in range</td>
          <td style="text-align: center">N</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#search" rel="">mismatch</a></td>
          <td style="text-align: center">Return first position where two ranges differ</td>
          <td style="text-align: center">N</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#move" rel="">move*</a></td>
          <td style="text-align: center">Move range of elements</td>
          <td style="text-align: center">Y</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#move" rel="">move_backward*</a></td>
          <td style="text-align: center">Move range of elements backward</td>
          <td style="text-align: center">Y</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#permutation" rel="">next_permutation</a></td>
          <td style="text-align: center">Rearranges the elements in the range [first,last) into the next lexicographically greater permutation</td>
          <td style="text-align: center">Y</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#test-range" rel="">none_of*</a></td>
          <td style="text-align: center">Test if no elements fulfill condition</td>
          <td style="text-align: center">N</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#sort" rel="">nth_element</a></td>
          <td style="text-align: center">Find the nth element and put it the exact palce.(quick select)</td>
          <td style="text-align: center">Y</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O()</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#sort" rel="">partial_sort</a></td>
          <td style="text-align: center">Partially sort elements in range while the remaining elements are left without any order</td>
          <td style="text-align: center">Y</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(mlogn)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#sort" rel="">partial_sort_copy</a></td>
          <td style="text-align: center">Copy and partially sort range</td>
          <td style="text-align: center">Y (if in-place)</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(mlogn)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#number" rel="">partial_sum</a></td>
          <td style="text-align: center">Compute partial sums of range and return to another place</td>
          <td style="text-align: center">N</td>
          <td style="text-align: center">numeric</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#partition" rel="">partition</a></td>
          <td style="text-align: center">Partition range in two and the iterator returned points to the first element of the second group.</td>
          <td style="text-align: center">Y</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#partition" rel="">partition_copy*</a></td>
          <td style="text-align: center">Partition range into two</td>
          <td style="text-align: center">N</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#partition" rel="">partition_point*</a></td>
          <td style="text-align: center">Get partition point and Returns an iterator to the first element in second part</td>
          <td style="text-align: center">N</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(logn + 2)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#heap" rel="">pop_heap</a></td>
          <td style="text-align: center">Pop element from heap range. Range shrink and value is at end.</td>
          <td style="text-align: center">Y</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(logn)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#permutation" rel="">prev_permutation</a></td>
          <td style="text-align: center">Rearranges the elements in the range [first,last) into the previous lexicographically-ordered permutation.</td>
          <td style="text-align: center">Y</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#heap" rel="">push_heap</a></td>
          <td style="text-align: center">Push element into heap range. Range extend</td>
          <td style="text-align: center">Y</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(logn)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#shuffle" rel="">random_shuffle</a></td>
          <td style="text-align: center">Randomly rearrange elements in range</td>
          <td style="text-align: center">Y</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#remove" rel="">remove</a></td>
          <td style="text-align: center">Removed element equal to val and returns an iterator to the new end of that range.</td>
          <td style="text-align: center">Y</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#remove" rel="">remove_copy</a></td>
          <td style="text-align: center">Remove and copy to new place</td>
          <td style="text-align: center">Y</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#remove" rel="">remove_copy_if</a></td>
          <td style="text-align: center">Remove in a given condition and copy</td>
          <td style="text-align: center">Y</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#remove" rel="">remove_if</a></td>
          <td style="text-align: center">Remove in a given condition</td>
          <td style="text-align: center">Y</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#replace" rel="">replace</a></td>
          <td style="text-align: center">Assigns new_value to all the elements that compare equal to old_value</td>
          <td style="text-align: center">Y</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#replace" rel="">replace_copy</a></td>
          <td style="text-align: center">Replace and copy</td>
          <td style="text-align: center">Y</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#replace" rel="">replace_copy_if</a></td>
          <td style="text-align: center">Replace in a given condition and copy</td>
          <td style="text-align: center">Y</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#replace" rel="">replace_if</a></td>
          <td style="text-align: center">Replace in a given condition</td>
          <td style="text-align: center">Y</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#reverse" rel="">reverse</a></td>
          <td style="text-align: center">Reverses the order of the elements in the range [first,last)</td>
          <td style="text-align: center">Y</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#reverse" rel="">reverse_copy</a></td>
          <td style="text-align: center">Copies the elements in [first,last) but in reverse order</td>
          <td style="text-align: center">Y</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#rotate" rel="">rotate</a></td>
          <td style="text-align: center">Rotates the order of the elements and middle becomes the new first element</td>
          <td style="text-align: center">Y</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#rotate" rel="">rotate_copy</a></td>
          <td style="text-align: center">Rotate and copy</td>
          <td style="text-align: center">Y</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#search" rel="">search</a></td>
          <td style="text-align: center">Search range for subsequence</td>
          <td style="text-align: center">N</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n*m)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#search" rel="">search_n</a></td>
          <td style="text-align: center">Search range for n continue elements</td>
          <td style="text-align: center">N</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#set" rel="">set_difference</a></td>
          <td style="text-align: center">Difference of two sorted ranges</td>
          <td style="text-align: center">N(copy)</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(2(n+m)-1)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#set" rel="">set_intersection</a></td>
          <td style="text-align: center">Intersection of two sorted ranges</td>
          <td style="text-align: center">N(copy)</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(2(n+m)-1)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#set" rel="">set_symmetric_difference</a></td>
          <td style="text-align: center">Symmetric difference of two sorted ranges</td>
          <td style="text-align: center">N(copy)</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(2(n+m)-1)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#set" rel="">set_union</a></td>
          <td style="text-align: center">Union of two sorted ranges</td>
          <td style="text-align: center">N(copy)</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(2(n+m)-1)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#shuffle" rel="">shuffle*</a></td>
          <td style="text-align: center">Randomly rearrange elements in range using generator</td>
          <td style="text-align: center">Y</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#sort" rel="">sort</a></td>
          <td style="text-align: center">Sort elements in range</td>
          <td style="text-align: center">Y</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(nlogn)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#heap" rel="">sort_heap</a></td>
          <td style="text-align: center">Sort elements of heap</td>
          <td style="text-align: center">Y</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(nlogn)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#partition" rel="">stable_partition</a></td>
          <td style="text-align: center">Partition range in two - stable ordering</td>
          <td style="text-align: center">Y</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n) with enough space. Otherwise O(nlogn)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#sort" rel="">stable_sort</a></td>
          <td style="text-align: center">Sort elements preserving order of equivalents</td>
          <td style="text-align: center">Y</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(nlogn) with enough space, otherwise O(nlognlogn)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#swap" rel="">swap</a></td>
          <td style="text-align: center">Exchanges the values of a and b</td>
          <td style="text-align: center">Y</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(1)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#swap" rel="">swap_ranges</a></td>
          <td style="text-align: center">Exchanges a range of value</td>
          <td style="text-align: center">Y</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#move" rel="">transform</a></td>
          <td style="text-align: center">Transform range</td>
          <td style="text-align: center">Y</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#unique" rel="">unique</a></td>
          <td style="text-align: center">Remove consecutive duplicates in range</td>
          <td style="text-align: center">Y</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#unique" rel="">unique_copy</a></td>
          <td style="text-align: center">Copy range removing duplicates</td>
          <td style="text-align: center">Y</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(n)</td>
      </tr>
      <tr>
          <td style="text-align: center"><a href="#search" rel="">upper_bond</a></td>
          <td style="text-align: center">Return iterator to upper bound. Since <strong>[first, last)</strong>, the value pointed by the iterator must larger than <em>val</em></td>
          <td style="text-align: center">N</td>
          <td style="text-align: center">algorithm</td>
          <td style="text-align: center">O(logn + 1) for random access iterator, otherwise O(n)</td>
      </tr>
  </tbody>
</table>
<h2 id="copy">Copy</h2>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-cpp">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">iv</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">iv2</span><span class="p">(</span><span class="mi">6</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="n">copy</span><span class="p">(</span><span class="n">iv</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">iv</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">iv2</span><span class="p">.</span><span class="n">begin</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// iv2: 1 2 3 4 5 6
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">iv3</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="n">copy_if</span><span class="p">(</span><span class="n">iv</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">iv</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">iv3</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="p">[](</span><span class="kt">int</span> <span class="n">a</span><span class="p">){</span><span class="k">return</span> <span class="n">a</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;});</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// iv3: 2 4 6
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">iv4</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="n">copy_n</span><span class="p">(</span><span class="n">iv</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="mi">5</span><span class="p">,</span> <span class="n">iv4</span><span class="p">.</span><span class="n">begin</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// iv4: 1 2 3 4 5 6
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">iv5</span><span class="p">(</span><span class="mi">6</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">	<span class="n">copy_backward</span><span class="p">(</span><span class="n">iv</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">iv</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">iv5</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// iv5: 1 2 3 4 5 6
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p><a href="#content" rel="">Back to top</a></p>]]></description></item><item><title>Algorithm feature in c++ STL</title><link>https://tyrangyang.github.io/TyrangYang_blog/algorithm-feature/</link><pubDate>Sun, 25 Aug 2019 00:00:00 +0000</pubDate><author>Haolin Yang</author><guid>https://tyrangyang.github.io/TyrangYang_blog/algorithm-feature/</guid><description><![CDATA[<h1 id="see-all-algorithm"><strong>See all algorithm <a href="https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/" rel="">click here</a></strong></h1>
<h2 id="mutating-and-non-mutating-algorithms">Mutating and Non-mutating algorithms</h2>
<h3 id="mutating-algorithms">Mutating algorithms</h3>
<p>Mutating algorithms means this algorithm will change the content that iterator pointed to. Like copy, swap, replace, fill, remove, permutation, partition, random shuffling and sort.</p>
<p>If your give these algorithms a const iterator, only error will be returned.</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-cpp">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">iv</span> <span class="o">=</span> <span class="p">{</span><span class="mi">22</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">17</span><span class="p">,</span><span class="mi">33</span><span class="p">,</span><span class="mi">40</span><span class="p">,</span><span class="mi">17</span><span class="p">,</span><span class="mi">23</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">20</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;::</span><span class="n">iterator</span> <span class="n">ib</span> <span class="o">=</span> <span class="n">iv</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;::</span><span class="n">iterator</span> <span class="n">ie</span> <span class="o">=</span> <span class="n">iv</span><span class="p">.</span><span class="n">end</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">sort</span><span class="p">(</span><span class="n">ib</span><span class="p">,</span><span class="n">ie</span><span class="p">);</span> <span class="c1">//works
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;::</span><span class="n">iterator</span> <span class="n">i</span> <span class="o">=</span> <span class="n">iv</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">i</span> <span class="o">!=</span> <span class="n">iv</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="sc">&#39; &#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// vector&lt;int&gt;::const_iterator ib = iv.begin();
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// vector&lt;int&gt;::const_iterator ie = iv.end();
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="c1">// sort(ib,ie); // error
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<h3 id="non-mutating-algorithm">Non-mutating algorithm</h3>
<p>Algorithm not change any element that iterator pointed to. Like: find, search, for_each, count, equal_mismatch, max, min.</p>]]></description></item><item><title>Container in c++</title><link>https://tyrangyang.github.io/TyrangYang_blog/containers/</link><pubDate>Wed, 31 Jul 2019 00:00:00 +0000</pubDate><author>Haolin Yang</author><guid>https://tyrangyang.github.io/TyrangYang_blog/containers/</guid><description><![CDATA[<h2 id="classification">Classification</h2>
<ul>
<li>Sequence container
<ul>
<li>array (build in)</li>
<li><a href="#vector" rel="">vector</a></li>
<li><a href="#heap" rel="">heap</a></li>
<li><a href="#priorityqueue" rel="">priority queue</a></li>
<li><a href="#list" rel="">list</a></li>
<li>slist (not standard)</li>
<li><a href="#deque" rel="">deque</a></li>
<li><a href="#stack" rel="">stack</a> (adopter)</li>
<li><a href="#queue" rel="">queue</a> (adopter)</li>
</ul>
</li>
<li>Associative container
<ul>
<li><a href="#rb-tree" rel="">RB-tree</a> (not public)</li>
<li><a href="#set" rel="">set</a></li>
<li><a href="#map" rel="">map</a></li>
<li>multiset</li>
<li>multemap</li>
<li>hashtable (not standard)</li>
<li>hash_set (not standard)</li>
<li>hash_map (not standard)</li>
<li>hash_multimap (not standard)</li>
<li>hash_multiset (not standard)</li>
</ul>
</li>
</ul>
<p>Associative container have a key-value pair. It do not have back and front so they never have push_back, pop_back.</p>
<h2 id="vector">Vector</h2>
<p>This is similar with grow array. Vector use sequential space.</p>]]></description></item><item><title>Iterator in c++</title><link>https://tyrangyang.github.io/TyrangYang_blog/iterators/</link><pubDate>Wed, 24 Jul 2019 00:00:00 +0000</pubDate><author>Haolin Yang</author><guid>https://tyrangyang.github.io/TyrangYang_blog/iterators/</guid><description><![CDATA[<h2 id="iterator-设计思维">Iterator 设计思维</h2>
<p>STL 中 container 和 algorithm 是相对独立的，本身设计也是泛型化的。Iterator 就是用来将这两者联系在一起的。</p>
<h2 id="iterator-是一种-smart-pointer">Iterator 是一种 smart pointer</h2>
<p>可以不用 delete</p>
<h2 id="iterator-属性">Iterator 属性</h2>
<p>iterator_traits 是用来抽取 iterator 中的类型(特指 value type)的。</p>
<p>这是 iterator 中常见的五种属性。</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-cpp">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">I</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">iterator_traits</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">typedef</span> <span class="k">typename</span> <span class="n">I</span><span class="o">::</span><span class="n">iterator_category</span> <span class="n">iterator_category</span><span class="p">;</span> <span class="c1">//category
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">typedef</span> <span class="k">typename</span> <span class="n">I</span><span class="o">::</span><span class="n">value_type</span> <span class="n">value_type</span><span class="p">;</span> <span class="c1">// type
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">typedef</span> <span class="k">typename</span> <span class="n">I</span><span class="o">::</span><span class="n">difference_type</span> <span class="n">difference_type</span><span class="p">;</span> <span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">typedef</span> <span class="k">typename</span> <span class="n">I</span><span class="o">::</span><span class="n">pointer</span> <span class="n">pointer</span><span class="p">;</span> <span class="c1">// T*
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">typedef</span> <span class="k">typename</span> <span class="n">I</span><span class="o">::</span><span class="n">reference</span> <span class="n">reference</span><span class="p">;</span> <span class="c1">// T&amp;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">};</span></span></span></code></pre></div></div>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-cpp">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">     </span><span class="c1">// std::cout
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;iterator&gt;</span><span class="cp">     </span><span class="c1">// std::iterator_traits
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;typeinfo&gt;</span><span class="cp">     </span><span class="c1">// typeid
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">iterator_traits</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">*&gt;</span> <span class="n">traits</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="k">typeid</span><span class="p">(</span><span class="n">traits</span><span class="o">::</span><span class="n">iterator_category</span><span class="p">).</span><span class="n">name</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="k">typeid</span><span class="p">(</span><span class="n">traits</span><span class="o">::</span><span class="n">value_type</span><span class="p">).</span><span class="n">name</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="k">typeid</span><span class="p">(</span><span class="n">traits</span><span class="o">::</span><span class="n">difference_type</span><span class="p">).</span><span class="n">name</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="k">typeid</span><span class="p">(</span><span class="n">traits</span><span class="o">::</span><span class="n">pointer</span><span class="p">).</span><span class="n">name</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="k">typeid</span><span class="p">(</span><span class="n">traits</span><span class="o">::</span><span class="n">reference</span><span class="p">).</span><span class="n">name</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">NSt3__126random_access_iterator_tagE
</span></span><span class="line"><span class="cl">d
</span></span><span class="line"><span class="cl">l
</span></span><span class="line"><span class="cl">Pd
</span></span><span class="line"><span class="cl">d
</span></span><span class="line"><span class="cl">yanghaoli</span></span></code></pre></div></div>
<h2 id="iterator_category">iterator_category</h2>
<ol>
<li><strong>Input iterator</strong>: Read only. Cannot be change.</li>
<li><strong>Output iterator</strong>: Write only.</li>
<li><strong>Forward iterator</strong>: Allow write and only one direction.(only operator++). Some algorithms use one direction enough.(like <em>replace()</em>)</li>
<li><strong>Bidirectional iterator</strong>: For some algorithm will move both direction. Support operator++ and operator&ndash;.</li>
<li><strong>Random access iterator</strong>: Support more operator. p+n, p-n, p[n], p1-p2, p1 &lt; p2.</li>
</ol>
<div class="mermaid" id="id-1"></div>
<h2 id="iterator--const_iterator">iterator &amp; const_iterator</h2>
<p>const_iterator is read only.</p>]]></description></item><item><title>Allocator in c++</title><link>https://tyrangyang.github.io/TyrangYang_blog/allocator/</link><pubDate>Sun, 21 Jul 2019 00:00:00 +0000</pubDate><author>Haolin Yang</author><guid>https://tyrangyang.github.io/TyrangYang_blog/allocator/</guid><description><![CDATA[<h2 id="allocator-is-for-memory">Allocator is for memory</h2>
<p>配置内存空间 -&gt; 构建(constructor) -&gt; 解构(destructor) -&gt; 释放内存空间</p>
<h2 id="construct-and-destroy">construct() and destroy()</h2>
<p>用于建构和解构</p>
<h2 id="memory-allocate-and-release">Memory allocate and release</h2>
<p>双层配置器。第一级是区块大于 128 bytes 的，使用 malloc()和 free()。第二级是区块小于 128 bytes 的，使用 memory pool 和 freelist。</p>
<h3 id="第一級配置器">第一級配置器</h3>
<p>第一級配置器以 malloc(), free(), realloc() 等 C 函式執行實際的記憶體配置、釋放、重配置動作，並實作出類似 C++ new-handler7 機制。是的，它不能直接運用 C++ new-handler 機制，因為它並非使用 ::operator new 來配置記 憶體。</p>
<p>所謂 C++ new handler 機制是，你可以要求系統在記憶體配置需求無法被滿足時， 喚起一個你所指定的函式。換句話說一旦 ::operator new 無法達成任務，在丟出 std::bad_alloc 異常狀態之前，會先呼叫由客端指定的處理常式。此處理常式 通常即被稱為 new-handler。new-handler 解決記憶體不足的作法有特定的模式。</p>
<p>注意，SGI 以 malloc 而非 ::operator new 來配置記憶體(我所能夠想像的一 個原因是歷史因素，另一個原因是 C++ 並未提供相應於 realloc() 的記憶體配 置動作)，因此 SGI 不能直接使用 C++ 的 set_new_handler()，必須模擬一個 類似的 set_malloc_handler()。</p>]]></description></item><item><title>Functor in C++</title><link>https://tyrangyang.github.io/TyrangYang_blog/functor/</link><pubDate>Sat, 20 Jul 2019 00:00:00 +0000</pubDate><author>Haolin Yang</author><guid>https://tyrangyang.github.io/TyrangYang_blog/functor/</guid><description><![CDATA[<p>Basically, Functor have same functionality with interface in java.</p>
<p>Think about this code. You want count all string whose length is less than 5.</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-cpp">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;algorithm&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">bool</span> <span class="nf">lenLessThanFive</span><span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="n">str</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">str</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">string</span> <span class="n">ia</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#34;a&#34;</span><span class="p">,</span> <span class="s">&#34;aa&#34;</span><span class="p">,</span> <span class="s">&#34;aaa&#34;</span><span class="p">,</span> <span class="s">&#34;aaaa&#34;</span><span class="p">,</span> <span class="s">&#34;aaaaa&#34;</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">iv</span><span class="p">(</span><span class="n">ia</span><span class="p">,</span> <span class="n">ia</span><span class="o">+</span><span class="mi">5</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="n">count_if</span><span class="p">(</span><span class="n">iv</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">iv</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">lenLessThanFive</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;res= &#34;</span> <span class="o">&lt;&lt;</span> <span class="n">res</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></div></div>
<p><code>lenLessThanFive</code> is a function pointer here. It is work right, but it lack scalability. We cannot change the threshold in the function every time. Meanwhile, Function need to be unary(only one parameter). Therefore, we can consider the Functor.</p>]]></description></item></channel></rss>