<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>nodejs - Tag - TyrangYang_Blog</title>
        <link>https://tyrangyang.github.io/TyrangYang_blog/tags/nodejs/</link>
        <description>nodejs - Tag - TyrangYang_Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 18 Apr 2020 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://tyrangyang.github.io/TyrangYang_blog/tags/nodejs/" rel="self" type="application/rss+xml" /><item>
    <title>SocketIo Overview</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/socketio/</link>
    <pubDate>Sat, 18 Apr 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/socketio/</guid>
    <description><![CDATA[socket.io enable realtime, bidirectional communication for Nodejs
Backend We use Express as backend framework.
1 2 3 4 5 6 7 8 9 10 11 12  const express = require(&#39;express&#39;); const path = require(&#39;path&#39;); const http = require(&#39;http&#39;); const socket_io = require(&#39;socket.io&#39;); const app = express(); const server = http.createServer(app); const io = socket_io(server); io.on(&#39;connection&#39;, (server_socket) =&gt; { // ... }   Frontend  bring client side socket.io in your html file  1  &lt;script src=&#34;https://tyrangyang.github.io/TyrangYang_blog/socket.]]></description>
</item><item>
    <title>All array method in Javascript</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/</link>
    <pubDate>Mon, 06 Apr 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/</guid>
    <description><![CDATA[Show all function: Try Array.prototype &amp; Array.prototype.constructor in browser console.
 foreach 1 2 3 4 5 6 7 8 9 10  let numbers = [1, 2, 3, 4, 5]; // each element in a func numbers.forEach((element, index, arr) =&gt; { console.log(`a[${index}] = ${element}`); }); // a[0] = 1 // a[1] = 2 // a[2] = 3 // a[3] = 4 // a[4] = 5   map 1 2 3 4 5 6 7  let numbers = [1, 2, 3, 4, 5]; // [] =&gt; [] (some size) let numbers2 = numbers.]]></description>
</item><item>
    <title>Callback, Promise and Async/await in js</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/callback-promise-async/</link>
    <pubDate>Sun, 17 Nov 2019 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/callback-promise-async/</guid>
    <description><![CDATA[Js event loop | Call stack | task queue This website shows how js running with single thread to handle concurrency
Synchronous &amp; asynchronous Function run synchronously means code is running as same as your writing.
But in real situation, some code may need time to running but you don&rsquo;t want all code is block. Therefore, you may need some technique to let this part running asynchronously which means this part of code is block and the rest of code is not.]]></description>
</item><item>
    <title>What is &#34;this&#34; in javascript</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/what-is-this-in-js/</link>
    <pubDate>Sun, 17 Nov 2019 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/what-is-this-in-js/</guid>
    <description><![CDATA[Author: Dmitri Pavlutin
Reference: https://dmitripavlutin.com/gentle-explanation-of-this-in-javascript/
Concept  Invocation of a function is executing the code that makes the body of a function, or simply calling the function. For example parseInt function invocation is parseInt('15'). Context of an invocation is the value of this within function body. For example the invocation of map.set('key', 'value') has the context map. Scope of a function is the set of variables, objects, functions accessible within a function body.]]></description>
</item><item>
    <title>Web development review</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/web-develop-review/</link>
    <pubDate>Thu, 29 Aug 2019 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/web-develop-review/</guid>
    <description><![CDATA[MathJax.Hub.Config({ jax: ["input/TeX", "output/HTML-CSS"], tex2jax: { inlineMath: [ ['$', '$'] ], displayMath: [ ['$$', '$$']], processEscapes: true, skipTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code'] }, messageStyle: "none", "HTML-CSS": { preferredFont: "TeX", availableFonts: ["STIX","TeX"] } });   Document constructor $$f(x) = sin(x)$$]]></description>
</item></channel>
</rss>
