<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Lambda - Tag - TyrangYang_Blog</title><link>https://tyrangyang.github.io/TyrangYang_blog/tags/lambda/</link><description>Lambda - Tag - TyrangYang_Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 26 Jan 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://tyrangyang.github.io/TyrangYang_blog/tags/lambda/" rel="self" type="application/rss+xml"/><item><title>Lambda in C++</title><link>https://tyrangyang.github.io/TyrangYang_blog/lambda-cpp/</link><pubDate>Sun, 26 Jan 2020 00:00:00 +0000</pubDate><author>Haolin Yang</author><guid>https://tyrangyang.github.io/TyrangYang_blog/lambda-cpp/</guid><description><![CDATA[<p>Introduction of Lambda expression in C++ and how to use it.</p>
<h2 id="what-is-lambda-in-c">What is Lambda in C++</h2>
<p>Lambda expression is a new feature since <strong>c++11</strong>. It is used to create anonymous function object to simplify programming process.</p>
<h2 id="how-lambda-expressions-are-composed">How Lambda expressions are composed</h2>
<p>[<em>capture</em>](<em>parameters</em>) <em>mutable</em> -&gt; <em>return type</em> {<em>statement</em>}</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-cpp">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="Copy to clipboard"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;functional&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nl">std</span><span class="p">:</span><span class="n">function</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">add</span> <span class="o">=</span> <span class="p">[](</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">int</span> <span class="p">{</span><span class="k">return</span> <span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">;};</span></span></span></code></pre></div></div>
<h3 id="capture">capture</h3>
<p>Capture variables from context.</p>]]></description></item></channel></rss>