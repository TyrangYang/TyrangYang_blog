<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>lambda - Tag - TyrangYang_Blog</title>
        <link>https://tyrangyang.github.io/TyrangYang_blog/tags/lambda/</link>
        <description>lambda - Tag - TyrangYang_Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 26 Jan 2020 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://tyrangyang.github.io/TyrangYang_blog/tags/lambda/" rel="self" type="application/rss+xml" /><item>
    <title>Lambda in C&#43;&#43;</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/lambda-cpp/</link>
    <pubDate>Sun, 26 Jan 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/lambda-cpp/</guid>
    <description><![CDATA[Introduction of Lambda expression in C++ and how to use it.
What is Lambda in C++ Lambda expression is a new feature since c++11. It is used to create anonymous function object to simplify programming process.
How Lambda expressions are composed [capture](parameters) mutable -&gt; return type {statement}
1 2 3 4 // ... #include &lt;functional&gt; // ... std:function&lt;int(int, int)&gt; add = [](int a, int b) -&gt; int {return a+b;}; capture Capture variables from context.]]></description>
</item></channel>
</rss>
