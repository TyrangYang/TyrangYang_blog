<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>lambda | Tag | TyrangYang_Blog</title>
        <link>https://tyrangyang.github.io/TyrangYang_blog/tags/lambda/</link>
        <description>lambda | Tag | TyrangYang_Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 26 Jan 2020 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://tyrangyang.github.io/TyrangYang_blog/tags/lambda/" rel="self" type="application/rss+xml" /><item>
                <title>Lambda in C&#43;&#43;</title>
                <link>https://tyrangyang.github.io/TyrangYang_blog/lambda-cpp/</link>
                <pubDate>Sun, 26 Jan 2020 00:00:00 &#43;0000</pubDate>
                <author>Haolin Yang</author>
                <guid>https://tyrangyang.github.io/TyrangYang_blog/lambda-cpp/</guid>
                <description>Introduction of Lambda expression in C&#43;&#43; and how to use it.
What is Lambda in C&#43;&#43; Lambda expression is a new feature since c&#43;&#43;11. It is used to create anonymous function object to simplify programming process.
How Lambda expressions are composed [capture](parameters) mutable -&amp;gt; return type {statement}
1 2 3 4  // ... #include &amp;lt;functional&amp;gt;// ... std:function&amp;lt;int(int, int)&amp;gt; add = [](int a, int b) -&amp;gt; int {return a&#43;b;};   capture Capture variables from context.</description>
            </item></channel>
</rss>
