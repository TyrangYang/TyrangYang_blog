<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>javascript - Tag - TyrangYang_Blog</title>
        <link>https://tyrangyang.github.io/TyrangYang_blog/tags/javascript/</link>
        <description>javascript - Tag - TyrangYang_Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 14 Sep 2020 18:36:51 -0700</lastBuildDate><atom:link href="https://tyrangyang.github.io/TyrangYang_blog/tags/javascript/" rel="self" type="application/rss+xml" /><item>
    <title>Jest Overview</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/jest-overview/</link>
    <pubDate>Mon, 14 Sep 2020 18:36:51 -0700</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/jest-overview/</guid>
    <description><![CDATA[Jest is a JavaScript Testing Framework
 Document: https://jestjs.io/docs/en/getting-started
How to use Jest function.js
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  const axios = require(&#39;axios&#39;); const functions = { add: (num1, num2) =&gt; num1 + num2, isNull: () =&gt; null, checkValue: (x) =&gt; x, createUser: () =&gt; { const user = { firstName: &#39;Brad&#39; }; user[&#39;lastName&#39;] = &#39;Traversy&#39;; return user; }, fetchUser: () =&gt; axios .]]></description>
</item><item>
    <title>Prototype Inheritance in Javascript</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/prototype-inheritence-in-javascript/</link>
    <pubDate>Fri, 21 Aug 2020 16:37:45 -0700</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/prototype-inheritence-in-javascript/</guid>
    <description><![CDATA[Prototype   prototype   1 2  Foo.prototype.constructor === Foo; // true f1.__proto__ === Foo.prototype; // true   1  f1.constructor === Foo; // true   f1 don&rsquo;t have constructor, however depends on prototype chain engine will search f1.__proto__. This is line is equivalent to Foo.prototype.constructor === Foo
f1 instantiate a Foo:
 f1.__proto__link Foo.prototype f1 have a constructor which is Foo since Foo.prototype have a constructor  Object.]]></description>
</item><item>
    <title>Vuex Overview</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/vuex-overview/</link>
    <pubDate>Fri, 29 May 2020 16:54:43 -0400</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/vuex-overview/</guid>
    <description><![CDATA[Vuex Document: English 中文
Concept  State - App-level state/data Getters - Get pieces of state or computed values from state Actions - Called from components to commit mutation (async) Mutations - Mutate the state (sync) Modules - Each module can have its own state, getters, actions and mutations  Work flow   Vuex Workflow    Vuex work flow is similar with Redux =&gt; More Detail about Redux]]></description>
</item><item>
    <title>Vue Overview</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/vue-overview/</link>
    <pubDate>Sun, 17 May 2020 16:51:23 -0400</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/vue-overview/</guid>
    <description><![CDATA[Vue Document: English 中文
life cycle Basic structure 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  &lt;template&gt; &lt;div&gt;&lt;/div&gt; &lt;/template&gt; &lt;script&gt; export default { name: &#39;&#39;, props: [...], data() { return {}; }, computed:{ ... } methods: { ... } }; &lt;/script&gt; &lt;style lang=&#34;css&#34;&gt;&lt;/style&gt;   Basic vue function v-bind 1 2 3 4 5 6 7  &lt;option v-for=&#34;(user, idx) in Users&#34; :key=&#34;idx&#34; :value=&#34;user.]]></description>
</item><item>
    <title>Js Trick</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/js-trick/</link>
    <pubDate>Sun, 03 May 2020 23:12:40 -0400</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/js-trick/</guid>
    <description><![CDATA[Many of JavaScript cool feature or syntactic sugar included since ES6(ES2015).
  You can read this Article to know What new feature brings in since ES6
 Conversion Any =&gt; Boolean 1 2 3 4 5 6 7 8  !!false; // false !!undefined; // false !!null; // false !!NaN; // false !!0; // false !!&#39;&#39;; // false  !!variable == Boolean(variable);   String =&gt; Integer 1 2 3 4  Number(&#39;100&#39;); //100 +&#39;100&#39;; // 100  +&#39;abc&#39;; // NAN   Object &lt;=&gt; Array Array =&gt; Object 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  let arr = [1, 2, 3, 4, 5]; let objFromArr1 = Object.]]></description>
</item><item>
    <title>Canvas in html5</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/canvas/</link>
    <pubDate>Wed, 08 Apr 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/canvas/</guid>
    <description><![CDATA[Canvas is a new feature since html5 that allows you draw something on your web page
Reference from MDN
Project by using Canvas  Chaos Game: Use canvas to draw the chaos game Draw panel with socket.io: A scribble panel with Websocket. Multi user can draw panel on simultaneously  Draw on canvas Get start Jquery to get canvas. ctx mean canvas content which used to draw on canvas
1 2  const canvas = document.]]></description>
</item><item>
    <title>All array method in Javascript</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/</link>
    <pubDate>Mon, 06 Apr 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/</guid>
    <description><![CDATA[Show all function: Try Array.prototype &amp; Array.prototype.constructor in browser console.
 foreach 1 2 3 4 5 6 7 8 9 10  let numbers = [1, 2, 3, 4, 5]; // each element in a func numbers.forEach((element, index, arr) =&gt; { console.log(`a[${index}] = ${element}`); }); // a[0] = 1 // a[1] = 2 // a[2] = 3 // a[3] = 4 // a[4] = 5   map 1 2 3 4 5 6 7  let numbers = [1, 2, 3, 4, 5]; // [] =&gt; [] (some size) let numbers2 = numbers.]]></description>
</item><item>
    <title>How to check the Chinese ID is correct</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/check-digit-id/</link>
    <pubDate>Sun, 15 Mar 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/check-digit-id/</guid>
    <description><![CDATA[This check method will help you find out whether one digit is wrong or 2 adjacent digit are in reverse order.
Sample code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62  checkChineseId = (id) =&gt; { const ID_LENGTH = 18; // check type  if (typeof id !]]></description>
</item><item>
    <title>Callback, Promise and Async/await in js</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/callback-promise-async/</link>
    <pubDate>Sun, 17 Nov 2019 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/callback-promise-async/</guid>
    <description><![CDATA[Js event loop | Call stack | task queue This website shows how js running with single thread to handle concurrency
Synchronous &amp; asynchronous Function run synchronously means code is running as same as your writing.
But in real situation, some code may need time to running but you don&rsquo;t want all code is block. Therefore, you may need some technique to let this part running asynchronously which means this part of code is block and the rest of code is not.]]></description>
</item><item>
    <title>What is &#34;this&#34; in javascript</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/what-is-this-in-js/</link>
    <pubDate>Sun, 17 Nov 2019 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/what-is-this-in-js/</guid>
    <description><![CDATA[Author: Dmitri Pavlutin
Reference: https://dmitripavlutin.com/gentle-explanation-of-this-in-javascript/
Concept  Invocation of a function is executing the code that makes the body of a function, or simply calling the function. For example parseInt function invocation is parseInt('15'). Context of an invocation is the value of this within function body. For example the invocation of map.set('key', 'value') has the context map. Scope of a function is the set of variables, objects, functions accessible within a function body.]]></description>
</item></channel>
</rss>
