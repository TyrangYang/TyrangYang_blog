<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Operator - Tag - TyrangYang_Blog</title><link>https://tyrangyang.github.io/TyrangYang_blog/tags/operator/</link><description>Operator - Tag - TyrangYang_Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 13 Aug 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://tyrangyang.github.io/TyrangYang_blog/tags/operator/" rel="self" type="application/rss+xml"/><item><title>Operator overwrite in c++</title><link>https://tyrangyang.github.io/TyrangYang_blog/operator-overwrite/</link><pubDate>Tue, 13 Aug 2019 00:00:00 +0000</pubDate><author>Haolin Yang</author><guid>https://tyrangyang.github.io/TyrangYang_blog/operator-overwrite/</guid><description><![CDATA[Example increment and decrement operator
#include &lt;iostream&gt; using namespace std; class INT { private: int m_i; public: INT(int i):m_i(i){}; friend bool operator==(INT&amp; test1, INT&amp; test2){ return test1.m_i == test2.m_i; } friend bool operator!=(INT&amp; test1, INT&amp; test2){ return test1.m_i != test2.m_i; } friend INT operator+(INT&amp; test1, INT&amp; test2){ int temp = test1.m_i + test2.m_i; INT res(temp); return res; } INT&amp; operator=(INT&amp; test){ this-&gt;m_i = test.m_i; return *this; } int&amp; operator*() const{ return (int&amp;)this-&gt;m_i; } // int a() const {}; This means a() cannot change any member in class.]]></description></item></channel></rss>