[{"categories":["Overview"],"content":"Design pattern ","date":"2021-07-22","objectID":"https://tyrangyang.github.io/TyrangYang_blog/design-pattern/:2:0","tags":["javascript","typescript"],"title":"Design Pattern","uri":"https://tyrangyang.github.io/TyrangYang_blog/design-pattern/"},{"categories":["Overview"],"content":"Factory pattern const createDataBaseClass = (dbName: DBOption) =\u003e { switch (dbName) { case 'InMemo': return InMemoryDataBase; case 'SQL': return SQL_DB; // ... // you can add anything else default: break; } }; ","date":"2021-07-22","objectID":"https://tyrangyang.github.io/TyrangYang_blog/design-pattern/:2:1","tags":["javascript","typescript"],"title":"Design Pattern","uri":"https://tyrangyang.github.io/TyrangYang_blog/design-pattern/"},{"categories":["Overview"],"content":"Singleton pattern export const createDataBase = \u003cT extends BaseRecord\u003e() =\u003e { const db = new InMemoryDataBase\u003cT\u003e(); return db; }; const pokemonDB = createDataBase\u003cPokemon\u003e(); pokemonDB.set({ id: 'Bulbasaur', attack: 59, defense: 10, }); console.log(pokemonDB.get('Bulbasaur')); // A CPP way to do const createDataBase2 = \u003cT extends BaseRecord\u003e() =\u003e { class InMemoryDataBase2 implements DataBase\u003cT\u003e { private db: Record\u003cstring, T\u003e = {}; static instance: InMemoryDataBase2 = new InMemoryDataBase2(); private constructor() {} // private constructor is necessary public set(newValue: T): void { this.db[newValue.id] = newValue; } public get(id: string): T | undefined { return this.db[id]; } } return InMemoryDataBase2; }; const PokemonDB2 = createDataBase2\u003cPokemon\u003e(); PokemonDB2.instance.set({ id: 'Bulbasaur', attack: 59, defense: 10, }); ","date":"2021-07-22","objectID":"https://tyrangyang.github.io/TyrangYang_blog/design-pattern/:2:2","tags":["javascript","typescript"],"title":"Design Pattern","uri":"https://tyrangyang.github.io/TyrangYang_blog/design-pattern/"},{"categories":["Overview"],"content":"Observer (pub/sub) pattern // ++++++++++ Observer ++++++++++ const createObserver = \u003cEventType\u003e(): { subscribe: (listener: listenerType\u003cEventType\u003e) =\u003e () =\u003e void; // take listener and return an unsubscribe function publish: (event: EventType) =\u003e void; } =\u003e { let listeners: listenerType\u003cEventType\u003e[] = []; return { subscribe: (listener: listenerType\u003cEventType\u003e): (() =\u003e void) =\u003e { listeners.push(listener); return () =\u003e { listeners = listeners.filter((l) =\u003e l !== listener); }; }, publish: (event: EventType) =\u003e { listeners.forEach((l) =\u003e l(event)); }, }; }; // +++++++++++++++++++++++++++++ interface BeforeAddValueEvent\u003cT\u003e { newValue: T; value: T; } interface AfterAddValueEvent\u003cT\u003e { value: T; } class InMemoryDBWithObserver\u003cT extends BaseRecord\u003e extends InMemoryDataBase\u003cT\u003e { public set(newValue: T): void { this.BeforeAddValueObserver.publish({ newValue, value: this.db[newValue.id], }); this.db[newValue.id] = newValue; this.AfterAddValueObserver.publish({ value: newValue, }); } public get(id: string): T | undefined { return this.db[id]; } // observer private BeforeAddValueObserver = createObserver\u003cBeforeAddValueEvent\u003cT\u003e\u003e(); private AfterAddValueObserver = createObserver\u003cAfterAddValueEvent\u003cT\u003e\u003e(); onBeforeAddValue( listener: listenerType\u003cBeforeAddValueEvent\u003cT\u003e\u003e ): () =\u003e void { return this.BeforeAddValueObserver.subscribe(listener); } onAfterAddValue(listener: listenerType\u003cAfterAddValueEvent\u003cT\u003e\u003e): () =\u003e void { return this.AfterAddValueObserver.subscribe(listener); } // visiter pattern visit(visitor: (item: T) =\u003e void): void { Object.values(this.db).forEach(visitor); } // strategy pattern getBest(strategy: (item: T) =\u003e number): T { let findRes: { max: number; res: T | null } = { max: -Infinity, res: null, }; return Object.values(this.db).reduce((prev, cur) =\u003e { let score = strategy(cur); if (prev.max \u003c score) return { max: score, res: cur }; return prev; }, findRes).res; } } const pokemonDB = new InMemoryDBWithObserver\u003cPokemon\u003e(); pokemonDB.onBeforeAddValue((event) =\u003e { console.log('Before add value'); console.log(event); }); const unsubscribe = pokemonDB.onAfterAddValue((event) =\u003e { console.log('After ADD A Value'); console.log(event); }); pokemonDB.onAfterAddValue((event) =\u003e { console.log('-----------'); }); pokemonDB.set({ id: 'Bulbasaur', attack: 59, defense: 10, }); pokemonDB.set({ id: 'Bulbasaur', attack: 20, defense: 30, }); unsubscribe(); pokemonDB.set({ id: 'Spinpsaur', attack: 159, defense: 110, }); console.log('Visit pattern:'); pokemonDB.visit((item) =\u003e console.log(item)); console.log('strategy pattern:'); console.log(pokemonDB.getBest((item) =\u003e item.defense)); ","date":"2021-07-22","objectID":"https://tyrangyang.github.io/TyrangYang_blog/design-pattern/:2:3","tags":["javascript","typescript"],"title":"Design Pattern","uri":"https://tyrangyang.github.io/TyrangYang_blog/design-pattern/"},{"categories":["Overview"],"content":"Adaptor pattern ","date":"2021-07-22","objectID":"https://tyrangyang.github.io/TyrangYang_blog/design-pattern/:2:4","tags":["javascript","typescript"],"title":"Design Pattern","uri":"https://tyrangyang.github.io/TyrangYang_blog/design-pattern/"},{"categories":["Overview"],"content":"type ","date":"2021-04-08","objectID":"https://tyrangyang.github.io/TyrangYang_blog/typescript/:1:0","tags":["overview","typescript","javascript"],"title":"Typescript overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/typescript/"},{"categories":["Overview"],"content":"Union type \u0026 Literal type const add = ( a: number | string, b: number | string, type?: 'number' | 'string' ): number | string =\u003e { if (type === 'string') { return a.toString() + b.toString(); } else return +a + +b; }; console.log(add(1, 2)); ","date":"2021-04-08","objectID":"https://tyrangyang.github.io/TyrangYang_blog/typescript/:1:1","tags":["overview","typescript","javascript"],"title":"Typescript overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/typescript/"},{"categories":["Overview"],"content":"Array type Book = { id: string; name: string; }; let books: Book[] = []; ","date":"2021-04-08","objectID":"https://tyrangyang.github.io/TyrangYang_blog/typescript/:1:2","tags":["overview","typescript","javascript"],"title":"Typescript overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/typescript/"},{"categories":["Overview"],"content":"unknown let test1: unknown; let test2: string; test1 = 'xyz'; // ok // test2 = test1; // error function f1(a: any) { a.b(); // OK } function f2(a: unknown) { a.b(); //error // Object is of type 'unknown'. } ","date":"2021-04-08","objectID":"https://tyrangyang.github.io/TyrangYang_blog/typescript/:1:3","tags":["overview","typescript","javascript"],"title":"Typescript overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/typescript/"},{"categories":["Overview"],"content":"Type a Function type listenerType\u003cEventType\u003e = (event: EventType) =\u003e void; ","date":"2021-04-08","objectID":"https://tyrangyang.github.io/TyrangYang_blog/typescript/:2:0","tags":["overview","typescript","javascript"],"title":"Typescript overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/typescript/"},{"categories":["Overview"],"content":"Assign a plain Object type Primitive = bigint | boolean | null | number | string | symbol | undefined; type PlainObject = Record\u003cstring, Primitive\u003e; const obj1: PlainObject = { a: 1 }; //✅ const obj2: PlainObject = { a: 1 }; //❌ const obj3: PlainObject = new myClass(); //❌ ","date":"2021-04-08","objectID":"https://tyrangyang.github.io/TyrangYang_blog/typescript/:3:0","tags":["overview","typescript","javascript"],"title":"Typescript overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/typescript/"},{"categories":["Overview"],"content":"Assign a nested plain Object type Primitive = bigint | boolean | null | number | string | symbol | undefined; type JSONValue = Primitive | JSONObject | JSONArray; interface JSONObject { [key: string]: JSONValue; } interface JSONArray extends Array\u003cJSONValue\u003e {} const obj1: PlainObject = { a: 1 }; //✅ const obj2: PlainObject = { a: { b: { c: 3 } } }; //✅ const obj3: PlainObject = new myClass(); //❌ ","date":"2021-04-08","objectID":"https://tyrangyang.github.io/TyrangYang_blog/typescript/:4:0","tags":["overview","typescript","javascript"],"title":"Typescript overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/typescript/"},{"categories":["Overview"],"content":"Type Template arrow function example export const useFetchAPI = \u003cT extends unknown\u003e( url: string, method: 'POST' | 'GET', body?: string | JSONObject ): [string, T | null] =\u003e { const [fetchStatus, setFetchStatus] = useState('error'); const [fetchResult, setFetchResult] = useState\u003cT | null\u003e(null); useEffect(() =\u003e { const apiMockFetch: () =\u003e Promise\u003c{ status: string; requestId: string; result: T | null; }\u003e = () =\u003e { return new Promise((resolve) =\u003e { setTimeout(() =\u003e { resolve(someData); }, 1000); }); }; const fetchData = async () =\u003e { const { status, result } = await apiMockFetch(); setFetchStatus(status); if (result !== undefined) { setFetchResult(result); } }; if (fetchStatus !== 'success') fetchData(); }, [url, method, body, fetchStatus]); return [fetchStatus, fetchResult]; }; ","date":"2021-04-08","objectID":"https://tyrangyang.github.io/TyrangYang_blog/typescript/:5:0","tags":["overview","typescript","javascript"],"title":"Typescript overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/typescript/"},{"categories":["Overview"],"content":"Type \u0026 interface type Book = { id: string; name: string; }; interface Book { id: string; name: string; } ","date":"2021-04-08","objectID":"https://tyrangyang.github.io/TyrangYang_blog/typescript/:6:0","tags":["overview","typescript","javascript"],"title":"Typescript overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/typescript/"},{"categories":["Overview"],"content":"React logic extraction Check this post ","date":"2021-03-12","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react-logic-reuse/:1:0","tags":["web","react"],"title":"React Logic Reuse Example","uri":"https://tyrangyang.github.io/TyrangYang_blog/react-logic-reuse/"},{"categories":["Overview"],"content":"Example code This example demonstrate one single feature using four different feature to archive code split Code running there: –\u003eLink\u003c– import { useState, useEffect } from React; const Styles = { redBorder: { border: '1px solid #f00', }, }; const MouseDisplay = ({ x, y }) =\u003e { return ( \u003cdiv\u003e Mouse at x: {x} ; y: {y} \u003c/div\u003e ); }; const MouseDisplay2 = ({ x, y }) =\u003e { return ( \u003cdiv style={{ color: 'teal' }}\u003e Mouse at x: {x} ; y: {y} \u003c/div\u003e ); }; // Normal export const MouseInfoAndDisplay = () =\u003e { const [x, setX] = useState(0); const [y, setY] = useState(0); const handleMove = (e) =\u003e { setX(e.clientX); setY(e.clientY); }; return ( \u003cdiv style={Styles.redBorder} onMouseMove={handleMove}\u003e \u003cMouseDisplay x={x} y={y} /\u003e \u003c/div\u003e ); }; // HOC const withMouseInfo = (Component) =\u003e { return (props) =\u003e { const [x, setX] = useState(0); const [y, setY] = useState(0); const handleMove = (e) =\u003e { setX(e.clientX); setY(e.clientY); }; return ( \u003cdiv style={Styles.redBorder} onMouseMove={handleMove}\u003e \u003cComponent {...props} x={x} y={y} /\u003e \u003c/div\u003e ); }; }; export const HOCMouseDisplay = withMouseInfo(MouseDisplay); export const HOCMouseDisplay2 = withMouseInfo(MouseDisplay2); // Render Props const MouseRenderProps = ({ render }) =\u003e { const [x, setX] = useState(0); const [y, setY] = useState(0); const handleMove = (e) =\u003e { setX(e.clientX); setY(e.clientY); }; return ( \u003cdiv style={Styles.redBorder} onMouseMove={handleMove}\u003e {render(x, y)} \u003c/div\u003e ); }; export const Mouse = () =\u003e { return ( \u003cdiv\u003e \u003cMouseRenderProps render={(x, y) =\u003e \u003cMouseDisplay x={x} y={y} /\u003e} /\u003e \u003cMouseRenderProps render={(x, y) =\u003e \u003cMouseDisplay2 x={x} y={y} /\u003e} /\u003e \u003c/div\u003e ); }; // Customize HOOK const useMouseState = () =\u003e { const [x, setX] = useState(0); const [y, setY] = useState(0); const [node, setNode] = useState(null); const handleMove = (e) =\u003e { setX(e.clientX); setY(e.clientY); }; useEffect(() =\u003e { if (node !== null) { node.addEventListener('mousemove', handleMove); } }, [node]); return [x, y, setNode]; }; export const MouseUsingHook = () =\u003e { const [x1, y1, ref1] = useMouseState(); const [x2, y2, ref2] = useMouseState(); return ( \u003cdiv\u003e \u003cdiv ref={ref1} style={Styles.redBorder}\u003e \u003cMouseDisplay x={x1} y={y1} /\u003e \u003c/div\u003e \u003cdiv ref={ref2} style={Styles.redBorder}\u003e \u003cMouseDisplay2 x={x2} y={y2} /\u003e \u003c/div\u003e \u003c/div\u003e ); }; const App = () =\u003e { return ( \u003cdiv style={{ display: 'flex', flexDirection: 'column', height: '100vh', justifyContent: 'space-around', }} \u003e \u003cdiv\u003e Normal: \u003cMouseInfoAndDisplay /\u003e \u003c/div\u003e \u003cdiv\u003e HOC: \u003cHOCMouseDisplay /\u003e \u003cHOCMouseDisplay2/\u003e \u003c/div\u003e \u003cdiv\u003e Render Props: \u003cMouse /\u003e \u003c/div\u003e \u003cdiv\u003e Hook: \u003cMouseUsingHook /\u003e \u003c/div\u003e \u003c/div\u003e ); }; ","date":"2021-03-12","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react-logic-reuse/:2:0","tags":["web","react"],"title":"React Logic Reuse Example","uri":"https://tyrangyang.github.io/TyrangYang_blog/react-logic-reuse/"},{"categories":["Archive"],"content":"React –\u003eLook this post\u003c– ","date":"2021-02-27","objectID":"https://tyrangyang.github.io/TyrangYang_blog/useful-post-archive/:1:0","tags":["html"],"title":"Useful Post Archive","uri":"https://tyrangyang.github.io/TyrangYang_blog/useful-post-archive/"},{"categories":["Archive"],"content":"WEB basic ","date":"2021-02-27","objectID":"https://tyrangyang.github.io/TyrangYang_blog/useful-post-archive/:2:0","tags":["html"],"title":"Useful Post Archive","uri":"https://tyrangyang.github.io/TyrangYang_blog/useful-post-archive/"},{"categories":["Archive"],"content":"Please Stop Using Local Storage https://www.rdegges.com/2018/please-stop-using-local-storage/ ","date":"2021-02-27","objectID":"https://tyrangyang.github.io/TyrangYang_blog/useful-post-archive/:2:1","tags":["html"],"title":"Useful Post Archive","uri":"https://tyrangyang.github.io/TyrangYang_blog/useful-post-archive/"},{"categories":["Archive"],"content":"JWT authentication: When and how to use it https://blog.logrocket.com/jwt-authentication-best-practices/#:~:text=A%20JWT%20needs%20to%20be,storage%20(or%20session%20storage). ","date":"2021-02-27","objectID":"https://tyrangyang.github.io/TyrangYang_blog/useful-post-archive/:2:2","tags":["html"],"title":"Useful Post Archive","uri":"https://tyrangyang.github.io/TyrangYang_blog/useful-post-archive/"},{"categories":["Archive"],"content":"Graphql ","date":"2021-02-27","objectID":"https://tyrangyang.github.io/TyrangYang_blog/useful-post-archive/:3:0","tags":["html"],"title":"Useful Post Archive","uri":"https://tyrangyang.github.io/TyrangYang_blog/useful-post-archive/"},{"categories":["Archive"],"content":"Dispatch This: Using Apollo Client 3 as a State Management Solution https://www.apollographql.com/blog/dispatch-this-using-apollo-client-3-as-a-state-management-solution/ ","date":"2021-02-27","objectID":"https://tyrangyang.github.io/TyrangYang_blog/useful-post-archive/:3:1","tags":["html"],"title":"Useful Post Archive","uri":"https://tyrangyang.github.io/TyrangYang_blog/useful-post-archive/"},{"categories":["Archive"],"content":"Apollo Client update cache when delete an item from list https://github.com/apollographql/apollo-client/issues/6451#issuecomment-775242381 ","date":"2021-02-27","objectID":"https://tyrangyang.github.io/TyrangYang_blog/useful-post-archive/:3:2","tags":["html"],"title":"Useful Post Archive","uri":"https://tyrangyang.github.io/TyrangYang_blog/useful-post-archive/"},{"categories":["Archive"],"content":"Several things for Graphql Security https://ithelp.ithome.com.tw/articles/10208008 ","date":"2021-02-27","objectID":"https://tyrangyang.github.io/TyrangYang_blog/useful-post-archive/:3:3","tags":["html"],"title":"Useful Post Archive","uri":"https://tyrangyang.github.io/TyrangYang_blog/useful-post-archive/"},{"categories":["Archive"],"content":"should I put useQuery inside a useEffect and should I store returned data in state? https://github.com/trojanowski/react-apollo-hooks/issues/158 ","date":"2021-02-27","objectID":"https://tyrangyang.github.io/TyrangYang_blog/useful-post-archive/:3:4","tags":["html"],"title":"Useful Post Archive","uri":"https://tyrangyang.github.io/TyrangYang_blog/useful-post-archive/"},{"categories":["Archive"],"content":"How to Use GraphQL DataLoader https://rahmanfadhil.com/graphql-dataloader/ ","date":"2021-02-27","objectID":"https://tyrangyang.github.io/TyrangYang_blog/useful-post-archive/:3:5","tags":["html"],"title":"Useful Post Archive","uri":"https://tyrangyang.github.io/TyrangYang_blog/useful-post-archive/"},{"categories":["Archive"],"content":"A Deep Dive on Apollo Data Sources https://www.apollographql.com/blog/a-deep-dive-on-apollo-data-sources/ ","date":"2021-02-27","objectID":"https://tyrangyang.github.io/TyrangYang_blog/useful-post-archive/:3:6","tags":["html"],"title":"Useful Post Archive","uri":"https://tyrangyang.github.io/TyrangYang_blog/useful-post-archive/"},{"categories":["Archive"],"content":"Setting Up Authentication and Authorization with Apollo Federation https://www.apollographql.com/blog/setting-up-authentication-and-authorization-with-apollo-federation/ ","date":"2021-02-27","objectID":"https://tyrangyang.github.io/TyrangYang_blog/useful-post-archive/:3:7","tags":["html"],"title":"Useful Post Archive","uri":"https://tyrangyang.github.io/TyrangYang_blog/useful-post-archive/"},{"categories":["Archive"],"content":"Library ","date":"2021-02-27","objectID":"https://tyrangyang.github.io/TyrangYang_blog/useful-post-archive/:4:0","tags":["html"],"title":"Useful Post Archive","uri":"https://tyrangyang.github.io/TyrangYang_blog/useful-post-archive/"},{"categories":["Archive"],"content":"npkill List any node_modules directories in your system and erase them https://github.com/voidcosmos/npkill ","date":"2021-02-27","objectID":"https://tyrangyang.github.io/TyrangYang_blog/useful-post-archive/:4:1","tags":["html"],"title":"Useful Post Archive","uri":"https://tyrangyang.github.io/TyrangYang_blog/useful-post-archive/"},{"categories":["Note"],"content":"Modal box Demo ","date":"2020-12-14","objectID":"https://tyrangyang.github.io/TyrangYang_blog/html-effect/:1:0","tags":["html","css","javascript"],"title":"HTML Effect with vanilla html js css","uri":"https://tyrangyang.github.io/TyrangYang_blog/html-effect/"},{"categories":["Note"],"content":"Cursor \u0026 hover effect Demo ","date":"2020-12-14","objectID":"https://tyrangyang.github.io/TyrangYang_blog/html-effect/:2:0","tags":["html","css","javascript"],"title":"HTML Effect with vanilla html js css","uri":"https://tyrangyang.github.io/TyrangYang_blog/html-effect/"},{"categories":["Note"],"content":"Pure Css hamburger button This is a hamburger button using pure css to style it. Demo ","date":"2020-12-14","objectID":"https://tyrangyang.github.io/TyrangYang_blog/html-effect/:3:0","tags":["html","css","javascript"],"title":"HTML Effect with vanilla html js css","uri":"https://tyrangyang.github.io/TyrangYang_blog/html-effect/"},{"categories":["Note"],"content":"Loading Demo ","date":"2020-12-14","objectID":"https://tyrangyang.github.io/TyrangYang_blog/html-effect/:4:0","tags":["html","css","javascript"],"title":"HTML Effect with vanilla html js css","uri":"https://tyrangyang.github.io/TyrangYang_blog/html-effect/"},{"categories":["Note"],"content":"Sidebar Demo ","date":"2020-12-14","objectID":"https://tyrangyang.github.io/TyrangYang_blog/html-effect/:5:0","tags":["html","css","javascript"],"title":"HTML Effect with vanilla html js css","uri":"https://tyrangyang.github.io/TyrangYang_blog/html-effect/"},{"categories":["Note"],"content":"Profile Demo ","date":"2020-12-14","objectID":"https://tyrangyang.github.io/TyrangYang_blog/html-effect/:6:0","tags":["html","css","javascript"],"title":"HTML Effect with vanilla html js css","uri":"https://tyrangyang.github.io/TyrangYang_blog/html-effect/"},{"categories":["Overview"],"content":"webpack is a static module bundler for modern JavaScript applications. Document: https://webpack.js.org/concepts/ ","date":"2020-12-09","objectID":"https://tyrangyang.github.io/TyrangYang_blog/webpack-overview/:0:0","tags":["webpack"],"title":"Webpack Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/webpack-overview/"},{"categories":["Overview"],"content":"Installation npm i -D webpack webpack-cli ","date":"2020-12-09","objectID":"https://tyrangyang.github.io/TyrangYang_blog/webpack-overview/:1:0","tags":["webpack"],"title":"Webpack Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/webpack-overview/"},{"categories":["Overview"],"content":"webpack core concept ","date":"2020-12-09","objectID":"https://tyrangyang.github.io/TyrangYang_blog/webpack-overview/:2:0","tags":["webpack"],"title":"Webpack Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/webpack-overview/"},{"categories":["Overview"],"content":"Entry An entry point indicates which module webpack should use to begin building out its internal dependency graph. webpack will figure out which other modules and libraries that entry point depends on (directly and indirectly). ","date":"2020-12-09","objectID":"https://tyrangyang.github.io/TyrangYang_blog/webpack-overview/:2:1","tags":["webpack"],"title":"Webpack Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/webpack-overview/"},{"categories":["Overview"],"content":"Output The output property tells webpack where to emit the bundles it creates and how to name these files. It defaults to ./dist/main.js for the main output file and to the ./dist folder for any other generated file. ","date":"2020-12-09","objectID":"https://tyrangyang.github.io/TyrangYang_blog/webpack-overview/:2:2","tags":["webpack"],"title":"Webpack Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/webpack-overview/"},{"categories":["Overview"],"content":"Loaders Out of the box, webpack only understands JavaScript and JSON files. Loaders allow webpack to process other types of files and convert them into valid modules that can be consumed by your application and added to the dependency graph. ","date":"2020-12-09","objectID":"https://tyrangyang.github.io/TyrangYang_blog/webpack-overview/:2:3","tags":["webpack"],"title":"Webpack Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/webpack-overview/"},{"categories":["Overview"],"content":"Plugin While loaders are used to transform certain types of modules, plugins can be leveraged to perform a wider range of tasks like bundle optimization, asset management and injection of environment variables. ","date":"2020-12-09","objectID":"https://tyrangyang.github.io/TyrangYang_blog/webpack-overview/:2:4","tags":["webpack"],"title":"Webpack Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/webpack-overview/"},{"categories":["Overview"],"content":"Mode By setting the mode parameter to either development, production or none, you can enable webpack’s built-in optimizations that correspond to each environment ","date":"2020-12-09","objectID":"https://tyrangyang.github.io/TyrangYang_blog/webpack-overview/:2:5","tags":["webpack"],"title":"Webpack Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/webpack-overview/"},{"categories":["Overview"],"content":"Example In webpack.config.js const debug = process.env.NODE_ENV !== 'production'; const webpack = require('webpack'); const path = require('path'); module.exports = { mode: 'development', context: path.join(__dirname, 'src'), devtool: debug ? 'inline-sourcemap' : false, entry: './js/client.js', module: { rules: [ { test: /\\.jsx?$/, exclude: /(node_modules|bower_components)/, loader: 'babel-loader', query: { presets: ['react', 'es2015', 'stage-0'], plugins: [ 'react-html-attrs', 'transform-decorators-legacy', 'transform-class-properties', ], }, }, ], }, output: { path: __dirname + '/src/', filename: 'client.min.js', }, plugins: debug ? [] : [ new webpack.optimize.DedupePlugin(), new webpack.optimize.OccurrenceOrderPlugin(), new webpack.optimize.UglifyJsPlugin({ mangle: false, sourcemap: false, }), ], }; ","date":"2020-12-09","objectID":"https://tyrangyang.github.io/TyrangYang_blog/webpack-overview/:3:0","tags":["webpack"],"title":"Webpack Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/webpack-overview/"},{"categories":["Overview"],"content":" Jest is a JavaScript Testing Framework Document: https://jestjs.io/docs/en/getting-started ","date":"2020-09-14","objectID":"https://tyrangyang.github.io/TyrangYang_blog/jest-overview/:0:0","tags":["jest","javascript","test"],"title":"Jest Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/jest-overview/"},{"categories":["Overview"],"content":"How to use Jest function.js const axios = require('axios'); const functions = { add: (num1, num2) =\u003e num1 + num2, isNull: () =\u003e null, checkValue: (x) =\u003e x, createUser: () =\u003e { const user = { firstName: 'Brad' }; user['lastName'] = 'Traversy'; return user; }, fetchUser: () =\u003e axios .get('https://jsonplaceholder.typicode.com/users/1') .then((res) =\u003e res.data) .catch((err) =\u003e 'error'), }; module.exports = functions; function.test.js const functions = require('./functions'); // beforeEach(() =\u003e initDatabase()); // afterEach(() =\u003e closeDatabase()); // beforeAll(() =\u003e initDatabase()); // afterAll(() =\u003e closeDatabase()); // const initDatabase = () =\u003e console.log('Database Initialized...'); // const closeDatabase = () =\u003e console.log('Database Closed...'); const nameCheck = () =\u003e console.log('Checking Name....'); describe('Checking Names', () =\u003e { beforeEach(() =\u003e nameCheck()); test('User is Jeff', () =\u003e { const user = 'Jeff'; expect(user).toBe('Jeff'); }); test('User is Karen', () =\u003e { const user = 'Karen'; expect(user).toBe('Karen'); }); }); // toBe test('Adds 2 + 2 to equal 4', () =\u003e { expect(functions.add(2, 2)).toBe(4); }); // not test('Adds 2 + 2 to NOT equal 5', () =\u003e { expect(functions.add(2, 2)).not.toBe(5); }); // CHECK FOR TRUTHY \u0026 FALSY VALUES // toBeNull matches only null // toBeUndefined matches only undefined // toBeDefined is the opposite of toBeUndefined // toBeTruthy matches anything that an if statement treats as true // toBeFalsy matches anything that an if statement treats as false // toBeNull test('Should be null', () =\u003e { expect(functions.isNull()).toBeNull(); }); // toBeFalsy test('Should be falsy', () =\u003e { expect(functions.checkValue(undefined)).toBeFalsy(); }); // toEqual test('User should be Brad Traversy object', () =\u003e { expect(functions.createUser()).toEqual({ firstName: 'Brad', lastName: 'Traversy', }); }); // Less than and greater than test('Should be under 1600', () =\u003e { const load1 = 800; const load2 = 800; expect(load1 + load2).toBeLessThanOrEqual(1600); }); // Regex test('There is no I in team', () =\u003e { expect('team').not.toMatch(/I/i); }); // Arrays test('Admin should be in usernames', () =\u003e { usernames = ['john', 'karen', 'admin']; expect(usernames).toContain('admin'); }); // Working with async data // Promise // test('User fetched name should be Leanne Graham', () =\u003e { // expect.assertions(1); // return functions.fetchUser().then(data =\u003e { // expect(data.name).toEqual('Leanne Graham'); // }); // }); // Async Await test('User fetched name should be Leanne Graham', async () =\u003e { expect.assertions(1); const data = await functions.fetchUser(); expect(data.name).toEqual('Leanne Graham'); }); ","date":"2020-09-14","objectID":"https://tyrangyang.github.io/TyrangYang_blog/jest-overview/:1:0","tags":["jest","javascript","test"],"title":"Jest Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/jest-overview/"},{"categories":["Overview"],"content":"Matchers Doc: https://jestjs.io/docs/en/using-matchers and https://jestjs.io/docs/en/expect ","date":"2020-09-14","objectID":"https://tyrangyang.github.io/TyrangYang_blog/jest-overview/:1:1","tags":["jest","javascript","test"],"title":"Jest Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/jest-overview/"},{"categories":["Overview"],"content":"Jest with react Doc: https://reactjs.org/docs/testing.html ","date":"2020-09-14","objectID":"https://tyrangyang.github.io/TyrangYang_blog/jest-overview/:2:0","tags":["jest","javascript","test"],"title":"Jest Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/jest-overview/"},{"categories":["Overview"],"content":"@testing-library/react This library provide better test workflow for react. It is imported by Create-react-app in default Doc: https://testing-library.com/docs/react-testing-library/intro Tutorial Post: https://www.robinwieruch.de/react-testing-library Search element getByText getByRole getByLabelText: getByLabelText: \u003clabel for=\"search\" /\u003e getByPlaceholderText: getByPlaceholderText: \u003cinput placeholder=\"Search\" /\u003e getByAltText: getByAltText: \u003cimg alt=\"profile\" /\u003e getByDisplayValue: getByDisplayValue: \u003cinput value=\"JavaScript\" /\u003e getBy vs. queryBy vs. findBy getBy returns an element or an error. queryBy returns an element or null. The findBy search variant is used for asynchronous elements which will be there eventually. ","date":"2020-09-14","objectID":"https://tyrangyang.github.io/TyrangYang_blog/jest-overview/:2:1","tags":["jest","javascript","test"],"title":"Jest Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/jest-overview/"},{"categories":["Overview"],"content":"@testing-library/react with Material UI Query a Multi-select Reference: https://stackoverflow.com/a/61491607/12104603 import React from \"react\"; import { render, within, screen } from \"react-testing-library\"; import userEvent from '@testing-library/user-event'; import Select from \"@material-ui/core/Select\"; import MenuItem from \"@material-ui/core/MenuItem\"; it('selects the correct option', () =\u003e { render( \u003c\u003e \u003cSelect fullWidth value={selectedTab} onChange={onTabChange}\u003e \u003cMenuItem value=\"privacy\"\u003ePrivacy\u003c/MenuItem\u003e \u003cMenuItem value=\"my-account\"\u003eMy Account\u003c/MenuItem\u003e \u003c/Select\u003e \u003cTypography variant=\"h1\"\u003e{/* value set in state */}\u003c/Typography\u003e \u003c/\u003e ); userEvent.click(screen.getByRole('button')); const listbox = within(screen.getByRole('listbox')); userEvent.click(listbox.getByText(/my account/i)); expect(screen.getByRole('heading').toHaveTextContent(/my account/i); }); Common mistakes with React Testing Library https://kentcdodds.com/blog/common-mistakes-with-react-testing-library ","date":"2020-09-14","objectID":"https://tyrangyang.github.io/TyrangYang_blog/jest-overview/:2:2","tags":["jest","javascript","test"],"title":"Jest Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/jest-overview/"},{"categories":["Overview"],"content":"Redux Document: English 中文 ","date":"2020-09-07","objectID":"https://tyrangyang.github.io/TyrangYang_blog/redux-overview/:0:0","tags":["redux","react"],"title":"Redux Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/redux-overview/"},{"categories":["Overview"],"content":"What is Redux Redux is a predictable state container for JavaScript apps. Redux also created by Facebook and it is a improvement from Flux. Redux is state management for any view library (mostly react) ","date":"2020-09-07","objectID":"https://tyrangyang.github.io/TyrangYang_blog/redux-overview/:1:0","tags":["redux","react"],"title":"Redux Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/redux-overview/"},{"categories":["Overview"],"content":"When use Redux Redux is design for complex UI, multiple view source or many interaction with server. If a simple UI, Redux is not necessary ","date":"2020-09-07","objectID":"https://tyrangyang.github.io/TyrangYang_blog/redux-overview/:2:0","tags":["redux","react"],"title":"Redux Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/redux-overview/"},{"categories":["Overview"],"content":"Workflow Redux Workflow ","date":"2020-09-07","objectID":"https://tyrangyang.github.io/TyrangYang_blog/redux-overview/:3:0","tags":["redux","react"],"title":"Redux Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/redux-overview/"},{"categories":["Overview"],"content":"Example for Redux core In index.html \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\" /\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /\u003e \u003ctitle\u003eRedux Core\u003c/title\u003e \u003c!-- Use redux as UMD --\u003e \u003cscript src=\"https://unpkg.com/redux@latest/dist/redux.min.js\"\u003e\u003c/script\u003e \u003c!-- redux will be imported as Window.Redux --\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv class=\"app\"\u003e\u003c/div\u003e \u003cscript src=\"./main.js\"\u003e\u003c/script\u003e \u003c/body\u003e \u003c/html\u003e // UMD import const { default: thunk } = ReduxThunk; const { applyMiddleware, createStore, combineReducers } = Redux; // init state let initUserState = { name: '', age: 0, }; let initPostState = { content: '', }; // reducer const userReducer = (prevState = initUserState, action) =\u003e { switch (action.type) { case 'CHANGE_NAME': return { ...prevState, name: action.payload }; case 'CHANGE_AGE': return { ...prevState, age: action.payload }; case 'ERR': throw new Error('Err: ' + action.error); default: break; } return prevState; }; const postReducer = (prevState = initPostState, action) =\u003e { switch (action.type) { case 'ADD_POST': return { ...prevState, content: action.content }; default: break; } return prevState; }; const reducers = combineReducers({ user: userReducer, post: postReducer, }); // store will looks like {user: ... , post: ...} const logger = ({ getState }) =\u003e (next) =\u003e (action) =\u003e { console.log({ ...action }); console.log(getState()); next(action); }; // create store const store = createStore(reducers, applyMiddleware(thunk, logger)); // init store.subscribe(() =\u003e { console.log('State: ', store.getState()); }); store.dispatch({ type: 'CHANGE_NAME', payload: 'DVA89' }); store.dispatch({ type: 'CHANGE_AGE', payload: 30 }); store.dispatch({ type: 'CHANGE_AGE', payload: 25 }); store.dispatch({ type: 'ADD_POST', content: 'a test post' }); ","date":"2020-09-07","objectID":"https://tyrangyang.github.io/TyrangYang_blog/redux-overview/:4:0","tags":["redux","react"],"title":"Redux Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/redux-overview/"},{"categories":["Overview"],"content":"Async Action add redux-thunk first // UMD import const { default: thunk } = ReduxThunk; const { applyMiddleware, createStore } = Redux; // init state let initState = { users: [], fetching: false, fetched: false, error: null, }; // reducer const userReducer = (prevState = initState, action) =\u003e { switch (action.type) { case 'USER_PENDING': return { ...prevState, fetching: true }; case 'USER_FULFILLED': return { ...prevState, fetching: false, fetched: true, users: action.payload, }; case 'USER_REJECTED': return { ...prevState, fetching: false, fetched: false, error: action.payload, }; case 'test': console.log('test type'); return { ...prevState, }; default: // statements_def break; } return prevState; }; const logger = ({ getState }) =\u003e (next) =\u003e (action) =\u003e { console.log(getState()); console.log(action); next(action); }; // create store const store = createStore(userReducer, applyMiddleware(thunk, logger)); store.subscribe(() =\u003e { console.log('State: ', store.getState()); }); // async store.dispatch((dispatch) =\u003e { dispatch({ type: 'USER_PENDING' }); fetch('https://jsonplaceholder.typicode.com/users?_limit=5') .then((res) =\u003e { return res.json(); }) .then((response) =\u003e { dispatch({ type: 'USER_FULFILLED', payload: response }); }) .catch((err) =\u003e { dispatch({ type: 'USER_REJECTED', payload: err }); }); }); // sync store.dispatch({ type: 'test' }); If add redux-promise-middleware in middleware, dispatch can change to this: store.dispatch({ type: 'USER', payload: axios('https://jsonplaceholder.typicode.com/users?_limit=5'), }); suffix _PENDING _FULFILLED _REJECTED will be add automatically. ","date":"2020-09-07","objectID":"https://tyrangyang.github.io/TyrangYang_blog/redux-overview/:5:0","tags":["redux","react"],"title":"Redux Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/redux-overview/"},{"categories":["Overview"],"content":"Use with react (react-redux) Document: https://react-redux.js.org/introduction/quick-start warp provider in index.js separate reducer separate action Skeleton: import React, { Component } from 'react'; import { connect } from 'react-redux'; import addUserAction from '../action/addUserAction'; export class ClassComponent extends Component { render() { return \u003cdiv\u003e\u003c/div\u003e; } } const mapStateToProps = (state) =\u003e ({ user: state.user, }); const mapDispatchToProps = { addUserAction }; export default connect(mapStateToProps, mapDispatchToProps)(ClassComponent); ","date":"2020-09-07","objectID":"https://tyrangyang.github.io/TyrangYang_blog/redux-overview/:6:0","tags":["redux","react"],"title":"Redux Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/redux-overview/"},{"categories":["Overview"],"content":"useSelector \u0026 useDispatch useSelector is a hook provided by react-redux that approximately equivalent to mapStateToProps useDispatch dispatch a action to store which is to replace mapDispatchToProps ","date":"2020-09-07","objectID":"https://tyrangyang.github.io/TyrangYang_blog/redux-overview/:6:1","tags":["redux","react"],"title":"Redux Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/redux-overview/"},{"categories":["Overview"],"content":"Use @reduxjs/toolkit with react Document: https://redux-toolkit.js.org/introduction/quick-start Tip slicer = reducer + action import { createSlice } from '@reduxjs/toolkit'; export const UserSlice = createSlice({ name: 'userData', initialState: { user: [], fetching: false, fetched: false, error: null, }, reducers: { userPending: (state) =\u003e { return { ...state, fetching: true, fetched: false }; }, userFulfilled: (state, action) =\u003e { return { ...state, fetching: false, fetched: true, user: action.payload, }; }, userRejected: (state, action) =\u003e { return { ...state, fetching: false, fetched: true, user: [], error: action.payload, }; }, }, }); export const { userPending, userFulfilled, userRejected } = UserSlice.actions; export const getUser = () =\u003e (dispatch) =\u003e { dispatch(userPending()); fetch('https://jsonplaceholder.typicode.com/users?_limit=5') .then((res) =\u003e res.json()) .then((data) =\u003e dispatch(userFulfilled(data))) .catch((err) =\u003e dispatch(userRejected(err))); }; export default UserSlice.reducer; In component: import React, { useEffect } from 'react'; import { useSelector, useDispatch } from 'react-redux'; import { getUser } from './userSlice'; export default function User() { const userData = useSelector((state) =\u003e state.userData); const dispatch = useDispatch(); useEffect(() =\u003e { dispatch(getUser()); }, []); console.log(userData); return \u003cdiv\u003ehi\u003c/div\u003e; } In store.js: import { configureStore } from '@reduxjs/toolkit'; import userReducer from '../features/user/userSlice'; export default configureStore({ reducer: { userData: userReducer, }, }); ","date":"2020-09-07","objectID":"https://tyrangyang.github.io/TyrangYang_blog/redux-overview/:7:0","tags":["redux","react"],"title":"Redux Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/redux-overview/"},{"categories":["Archive"],"content":"How to connect your React app to a backend on the same origin https://flaviocopes.com/how-to-serve-react-from-same-origin/ ","date":"2020-09-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react-posts-archive/:1:0","tags":["react"],"title":"React Posts Archive","uri":"https://tyrangyang.github.io/TyrangYang_blog/react-posts-archive/"},{"categories":["Archive"],"content":"React Conditional Rendering Original source: https://www.robinwieruch.de/conditional-rendering-react ","date":"2020-09-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react-posts-archive/:2:0","tags":["react"],"title":"React Posts Archive","uri":"https://tyrangyang.github.io/TyrangYang_blog/react-posts-archive/"},{"categories":["Archive"],"content":"Why We Switched to React Hooks Original source: https://blog.bitsrc.io/why-we-switched-to-react-hooks-48798c42c7f ","date":"2020-09-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react-posts-archive/:3:0","tags":["react"],"title":"React Posts Archive","uri":"https://tyrangyang.github.io/TyrangYang_blog/react-posts-archive/"},{"categories":["Archive"],"content":"Why Can’t I Open My React App By Clicking Index.html? From My Own Post Original Resource is NOT Free Medium Original source: https://medium.com/@louis.raymond/why-cant-i-open-my-react-app-by-clicking-index-html-d1778f6324cf ","date":"2020-09-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react-posts-archive/:4:0","tags":["react"],"title":"React Posts Archive","uri":"https://tyrangyang.github.io/TyrangYang_blog/react-posts-archive/"},{"categories":["Archive"],"content":"How To Use an IntersectionObserver in a React Hook PDF archive: –\u003eLink\u003c– Original Resource is NOT Free Medium Original source: https://medium.com/the-non-traditional-developer/how-to-use-an-intersectionobserver-in-a-react-hook-9fb061ac6cb5 ","date":"2020-09-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react-posts-archive/:5:0","tags":["react"],"title":"React Posts Archive","uri":"https://tyrangyang.github.io/TyrangYang_blog/react-posts-archive/"},{"categories":["Archive"],"content":"React for Vue developers Original source: https://sebastiandedeyne.com/react-for-vue-developers/ ","date":"2020-09-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react-posts-archive/:6:0","tags":["react"],"title":"React Posts Archive","uri":"https://tyrangyang.github.io/TyrangYang_blog/react-posts-archive/"},{"categories":["Archive"],"content":"How is getSnapshotBeforeUpdate implemented with Hooks? Original source: https://blog.logrocket.com/how-is-getsnapshotbeforeupdate-implemented-with-hooks/ ","date":"2020-09-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react-posts-archive/:7:0","tags":["react"],"title":"React Posts Archive","uri":"https://tyrangyang.github.io/TyrangYang_blog/react-posts-archive/"},{"categories":["Archive"],"content":"The one thing that no one properly explains about React — Why Virtual DOM Original source: https://hashnode.com/post/the-one-thing-that-no-one-properly-explains-about-react-why-virtual-dom-cisczhfj41bmssp53mvfwmgrq ","date":"2020-09-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react-posts-archive/:8:0","tags":["react"],"title":"React Posts Archive","uri":"https://tyrangyang.github.io/TyrangYang_blog/react-posts-archive/"},{"categories":["Archive"],"content":"React + D3.js Original source: https://wattenberger.com/blog/react-and-d3 ","date":"2020-09-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react-posts-archive/:9:0","tags":["react"],"title":"React Posts Archive","uri":"https://tyrangyang.github.io/TyrangYang_blog/react-posts-archive/"},{"categories":["Archive"],"content":"React Hook Form + Material UI Example https://codesandbox.io/s/react-hook-form-v6-controller-qsd8r?file=/src/Mui.js ","date":"2020-09-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react-posts-archive/:10:0","tags":["react"],"title":"React Posts Archive","uri":"https://tyrangyang.github.io/TyrangYang_blog/react-posts-archive/"},{"categories":["Archive"],"content":"Recoil.js — High-Performance State Management for React Simplified PDF archive: –\u003eLink\u003c– Video in Post: Original Resource is NOT Free Medium Original source: https://medium.com/weekly-webtips/recoil-js-high-performance-state-management-for-react-simplified-cb520464a667 ","date":"2020-09-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react-posts-archive/:11:0","tags":["react"],"title":"React Posts Archive","uri":"https://tyrangyang.github.io/TyrangYang_blog/react-posts-archive/"},{"categories":["Archive"],"content":"Example of advantage of concurrent mode in react https://codesandbox.io/s/koyz664q35?file=/src/index.js:861-862 ","date":"2020-09-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react-posts-archive/:12:0","tags":["react"],"title":"React Posts Archive","uri":"https://tyrangyang.github.io/TyrangYang_blog/react-posts-archive/"},{"categories":["Archive"],"content":"Understanding React Portals and Its Use-Cases https://blog.bitsrc.io/understanding-react-portals-ab79827732c7 ","date":"2020-09-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react-posts-archive/:13:0","tags":["react"],"title":"React Posts Archive","uri":"https://tyrangyang.github.io/TyrangYang_blog/react-posts-archive/"},{"categories":["Archive"],"content":"React Hooks vs. Redux: Do Hooks and Context replace Redux? https://blog.logrocket.com/use-hooks-and-context-not-react-and-redux/ ","date":"2020-09-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react-posts-archive/:14:0","tags":["react"],"title":"React Posts Archive","uri":"https://tyrangyang.github.io/TyrangYang_blog/react-posts-archive/"},{"categories":["Archive"],"content":"The 100% correct way to split your chunks with Webpack PDF archive: –\u003eLink\u003c– Chinese Translate: https://segmentfault.com/a/1190000018368885 Original Resource is NOT Free Medium Original source: https://medium.com/hackernoon/the-100-correct-way-to-split-your-chunks-with-webpack-f8a9df5b7758 ","date":"2020-09-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react-posts-archive/:15:0","tags":["react"],"title":"React Posts Archive","uri":"https://tyrangyang.github.io/TyrangYang_blog/react-posts-archive/"},{"categories":["Posts"],"content":"Prototype prototype Foo.prototype.constructor === Foo; // true f1.__proto__ === Foo.prototype; // true f1.constructor === Foo; // true f1 don’t have constructor, however depends on prototype chain engine will search f1.__proto__. This is line is equivalent to Foo.prototype.constructor === Foo f1 instantiate a Foo: f1.__proto__link Foo.prototype f1 have a constructor which is Foo since Foo.prototype have a constructor ","date":"2020-08-21","objectID":"https://tyrangyang.github.io/TyrangYang_blog/prototype-inheritence-in-javascript/:1:0","tags":["javascript"],"title":"Prototype Inheritance in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/prototype-inheritence-in-javascript/"},{"categories":["Posts"],"content":"Object.create() Syntax is Object.create(proto[, propertiesObject]) var newObj = Object.create(obj); newObj.__proto__ == obj; // true ","date":"2020-08-21","objectID":"https://tyrangyang.github.io/TyrangYang_blog/prototype-inheritence-in-javascript/:2:0","tags":["javascript"],"title":"Prototype Inheritance in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/prototype-inheritence-in-javascript/"},{"categories":["Posts"],"content":"new When js running this line: let person1 = new Person(...); new actually doing: Creates a blank, plain JavaScript object person1 = {}; Links (sets the constructor of) this object to another object; person1.constructor is Person Passes the newly created object from Step 1 as the this context; this -\u003e person1 Returns this if the function doesn’t return an object. ","date":"2020-08-21","objectID":"https://tyrangyang.github.io/TyrangYang_blog/prototype-inheritence-in-javascript/:3:0","tags":["javascript"],"title":"Prototype Inheritance in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/prototype-inheritence-in-javascript/"},{"categories":["Posts"],"content":"Prototype Chain var obj = { func: function () { return this.x; }, }; var newObj = Object.create(obj); newObj.__proto__ == obj; // true newObj; // {} newObj.func; // f(){return this.x} newObj.x = 10; newObj.y = 20; newObj; // {x: 10, y: 20} newObj.func(); // 10 obj.func(); // undefined ","date":"2020-08-21","objectID":"https://tyrangyang.github.io/TyrangYang_blog/prototype-inheritence-in-javascript/:4:0","tags":["javascript"],"title":"Prototype Inheritance in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/prototype-inheritence-in-javascript/"},{"categories":["Posts"],"content":"ES5 inheritance function SuperType(name) { this.name = name; this.colors = ['red', 'blue', 'green']; } SuperType.prototype.sayName = function () { alert(this.name); }; function SubType(name, age) { SuperType.call(this, name); this.age = age; } SubType.prototype = Object.create(SuperType.prototype, { constructor: { value: SubType, enumerable: false, writable: true, configurable: true, }, }); SubType.prototype.sayAge = function () { alert(this.age); }; let instance = new SubType('gim', '17'); instance.sayName(); // 'gim' instance.sayAge(); // '17' es5 ","date":"2020-08-21","objectID":"https://tyrangyang.github.io/TyrangYang_blog/prototype-inheritence-in-javascript/:5:0","tags":["javascript"],"title":"Prototype Inheritance in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/prototype-inheritence-in-javascript/"},{"categories":["Posts"],"content":"ES6 inheritance class SuperType { constructor(name) { this.name = name; this.colors = ['red', 'blue', 'green']; } sayName() { alert(this.name); } } class SubType extends SuperType { constructor(name, age) { super(name); this.age = age; } sayAge() { alert(this.age); } } let instance = new SubType('gim', '17'); instance.sayName(); // 'gim' instance.sayAge(); // '17' es6 ","date":"2020-08-21","objectID":"https://tyrangyang.github.io/TyrangYang_blog/prototype-inheritence-in-javascript/:6:0","tags":["javascript"],"title":"Prototype Inheritance in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/prototype-inheritence-in-javascript/"},{"categories":["Posts"],"content":"Flex Cheat Sheet provide by CSS-tricks.com A Flexbox code Example ","date":"2020-08-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/:1:0","tags":["css","grid","flex"],"title":"Flex and Grid in CSS","uri":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/"},{"categories":["Posts"],"content":"display .container { display: flex; } ","date":"2020-08-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/:1:1","tags":["css","grid","flex"],"title":"Flex and Grid in CSS","uri":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/"},{"categories":["Posts"],"content":"flex-direction .container { flex-direction: row | row-reverse | column | column-reverse; } flex-direction ","date":"2020-08-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/:1:2","tags":["css","grid","flex"],"title":"Flex and Grid in CSS","uri":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/"},{"categories":["Posts"],"content":"flex-warp .container { flex-wrap: nowrap | wrap | wrap-reverse; } flex-wrap ","date":"2020-08-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/:1:3","tags":["css","grid","flex"],"title":"Flex and Grid in CSS","uri":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/"},{"categories":["Posts"],"content":"flex-flow This is a shorthand for the flex-direction and flex-wrap properties. .container { flex-flow: column wrap; } ","date":"2020-08-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/:1:4","tags":["css","grid","flex"],"title":"Flex and Grid in CSS","uri":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/"},{"categories":["Posts"],"content":"order .item { order: 5; /* default is 0 */ } order ","date":"2020-08-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/:1:5","tags":["css","grid","flex"],"title":"Flex and Grid in CSS","uri":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/"},{"categories":["Posts"],"content":"flex-grow This defines the ability for a flex item to grow if necessary. Ex: number 2 means this item will take twice space compare to other item. 0 means fix .item { flex-grow: 2; /* default 0 */ /* Negative numbers are invalid */ } flex-grow ","date":"2020-08-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/:1:6","tags":["css","grid","flex"],"title":"Flex and Grid in CSS","uri":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/"},{"categories":["Posts"],"content":"flex-shrink This defines the ability for a flex item to grow if necessary. 0 means fix ","date":"2020-08-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/:1:7","tags":["css","grid","flex"],"title":"Flex and Grid in CSS","uri":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/"},{"categories":["Posts"],"content":"flex-basis This defines the default size of an element before the remaining space is distributed. .item { flex-basis: 0; } If set to 0, the extra space around content isn’t factored in. If set to auto, the extra space is distributed based on its flex-grow value. All space distributed vs Extra space distributed ","date":"2020-08-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/:1:8","tags":["css","grid","flex"],"title":"Flex and Grid in CSS","uri":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/"},{"categories":["Posts"],"content":"flex This is the shorthand for flex-grow, flex-shrink and flex-basis combined. Default is 0 1 auto .item { flex: none | [ \u003c 'flex-grow' \u003e \u003c 'flex-shrink' \u003e? || \u003c 'flex-basis' \u003e ]; } ","date":"2020-08-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/:1:9","tags":["css","grid","flex"],"title":"Flex and Grid in CSS","uri":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/"},{"categories":["Posts"],"content":"justify-content This defines the alignment along the main axis. .container { justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly | start | end | left | right ... + safe | unsafe; } justify-content ","date":"2020-08-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/:1:10","tags":["css","grid","flex"],"title":"Flex and Grid in CSS","uri":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/"},{"categories":["Posts"],"content":"align-content This aligns a flex container’s lines within when there is extra space in the cross-axis, similar to how justify-content aligns individual items within the main-axis. align-content ","date":"2020-08-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/:1:11","tags":["css","grid","flex"],"title":"Flex and Grid in CSS","uri":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/"},{"categories":["Posts"],"content":"align-items .container { align-items: stretch | flex-start | flex-end | center | baseline | first baseline | last baseline | start | end | self-start | self-end + ... safe | unsafe; } align-items ","date":"2020-08-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/:1:12","tags":["css","grid","flex"],"title":"Flex and Grid in CSS","uri":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/"},{"categories":["Posts"],"content":"align-self This allows the alignment to be overridden for individual flex items. .item { align-self: auto | flex-start | flex-end | center | baseline | stretch; } align-self ","date":"2020-08-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/:1:13","tags":["css","grid","flex"],"title":"Flex and Grid in CSS","uri":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/"},{"categories":["Posts"],"content":"grid Cheat Sheet provide by CSS-tricks.com A Grid code Example ","date":"2020-08-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/:2:0","tags":["css","grid","flex"],"title":"Flex and Grid in CSS","uri":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/"},{"categories":["Posts"],"content":"display .container { display: grid | inline-grid; } ","date":"2020-08-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/:2:1","tags":["css","grid","flex"],"title":"Flex and Grid in CSS","uri":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/"},{"categories":["Posts"],"content":"grid-template-columns \u0026 grid-template-rows values: \u003ctrack-size\u003e – can be a length, a percentage, or a fraction of the free space in the grid (using the fr unit) \u003cline-name\u003e – an arbitrary name of your choosing .container { grid-template-columns: ... | ...; grid-template-rows: ... | ...; } Example: .container { grid-template-columns: 40px 50px auto 50px 40px; grid-template-rows: 25% 100px auto; } grid example If assign name to each line: .container { grid-template-columns: [first] 40px [line2] 50px [line3] auto [col4-start] 50px [five] 40px [end]; grid-template-rows: [row1-start] 25% [row1-end] 100px [third-line] auto [last-line]; } grid example ","date":"2020-08-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/:2:2","tags":["css","grid","flex"],"title":"Flex and Grid in CSS","uri":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/"},{"categories":["Posts"],"content":"grid-column \u0026 grid-row Determines a grid item’s location within the grid by referring to specific grid lines. .item { grid-column: \u003cstart-line\u003e / \u003cend-line\u003e | \u003cstart-line\u003e / span \u003cvalue\u003e; grid-row: \u003cstart-line\u003e / \u003cend-line\u003e | \u003cstart-line\u003e / span \u003cvalue\u003e; } Example: .item { grid-column: 3 / span 2; /* or 3/5 or line3/line5 */ grid-row: third-line / 4; /* or 3/4 or 3/span 2 */ } grid-column-row ","date":"2020-08-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/:2:3","tags":["css","grid","flex"],"title":"Flex and Grid in CSS","uri":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/"},{"categories":["Posts"],"content":"grid-template-areas \u0026 grid-area .container { display: grid; grid-template-columns: 50px 50px 50px 50px; grid-template-rows: auto; grid-template-areas: 'header header header header' 'main main . sidebar' 'footer footer footer footer'; } .item-a { grid-area: header; } .item-b { grid-area: main; } .item-c { grid-area: sidebar; } .item-d { grid-area: footer; } grid-template-area ","date":"2020-08-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/:2:4","tags":["css","grid","flex"],"title":"Flex and Grid in CSS","uri":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/"},{"categories":["Posts"],"content":"grid-template A shorthand for setting grid-template-rows, grid-template-columns, and grid-template-areas in a single declaration. .container { grid-template: 'header header header header' 1fr 'main main . sidebar' 1fr 'footer footer footer footer' 1fr / 1fr 1fr 1fr 1fr; } ","date":"2020-08-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/:2:5","tags":["css","grid","flex"],"title":"Flex and Grid in CSS","uri":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/"},{"categories":["Posts"],"content":"gap (grid-gap) .container { gap: 15px 10px; /*equal to*/ row-gap: 15px; column-gap: 10px; } grid-gap ","date":"2020-08-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/:2:6","tags":["css","grid","flex"],"title":"Flex and Grid in CSS","uri":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/"},{"categories":["Posts"],"content":"justify-items .container { justify-items: start | end | center | stretch; } justify-items-center justify-items-start justify-items-end justify-items-stretch ","date":"2020-08-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/:2:7","tags":["css","grid","flex"],"title":"Flex and Grid in CSS","uri":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/"},{"categories":["Posts"],"content":"align-items .container { align-items: start | end | center | stretch; } align-items-center align-items-start align-items-end align-items-stretch ","date":"2020-08-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/:2:8","tags":["css","grid","flex"],"title":"Flex and Grid in CSS","uri":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/"},{"categories":["Posts"],"content":"place-items place-items sets both the align-items and justify-items properties in a single declaration. ","date":"2020-08-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/:2:9","tags":["css","grid","flex"],"title":"Flex and Grid in CSS","uri":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/"},{"categories":["Posts"],"content":"justify-content .container { justify-content: start | end | center | stretch | space-around | space-between | space-evenly; } justify-content-center justify-content-start justify-content-end justify-content-stretch justify-content-space-around justify-content-space-between justify-content-space-evenly ","date":"2020-08-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/:2:10","tags":["css","grid","flex"],"title":"Flex and Grid in CSS","uri":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/"},{"categories":["Posts"],"content":"align-content .container { align-content: start | end | center | stretch | space-around | space-between | space-evenly; } align-content-center align-content-start align-content-end align-content-stretch align-content-space-around align-content-space-between align-content-space-evenly ","date":"2020-08-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/:2:11","tags":["css","grid","flex"],"title":"Flex and Grid in CSS","uri":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/"},{"categories":["Posts"],"content":"place-content place-content sets both the align-content and justify-content properties in a single declaration. ","date":"2020-08-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/:2:12","tags":["css","grid","flex"],"title":"Flex and Grid in CSS","uri":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/"},{"categories":["Posts"],"content":"justify-self .item-a { justify-self: start | end | center | stretch; } justify-self-center justify-self-start justify-self-end justify-self-stretch ","date":"2020-08-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/:2:13","tags":["css","grid","flex"],"title":"Flex and Grid in CSS","uri":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/"},{"categories":["Posts"],"content":"grid-auto-columns \u0026 grid-auto-rows Specifies the size of any auto-generated grid tracks (aka implicit grid tracks). Example: .container { grid-template-columns: 60px 60px; grid-template-rows: 90px 90px; } .item-a { grid-column: 1 / 2; grid-row: 2 / 3; } .item-b { grid-column: 5 / 6; grid-row: 2 / 3; } explicit grid If use grid-auto-columns: .container { grid-auto-columns: 60px; } implicit grid ","date":"2020-08-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/:2:14","tags":["css","grid","flex"],"title":"Flex and Grid in CSS","uri":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/"},{"categories":["Posts"],"content":"grid-auto-flow If you have grid items that you don’t explicitly place on the grid, the auto-placement algorithm kicks in to automatically place the items. .container { grid-auto-flow: row | column | row dense | column dense; } Example: .container { display: grid; grid-template-columns: 60px 60px 60px 60px 60px; grid-template-rows: 30px 30px; grid-auto-flow: column; } .container div { border: 1px #ccc solid; } .item-a { grid-column: 1; grid-row: 1 / 3; } .item-e { grid-column: 5; grid-row: 1 / 3; } implicit grid .container { grid-auto-flow: column; } implicit grid ","date":"2020-08-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/:2:15","tags":["css","grid","flex"],"title":"Flex and Grid in CSS","uri":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/"},{"categories":["Posts"],"content":"grid A shorthand for setting all of the following properties in a single declaration: grid-template-rows, grid-template-columns, grid-template-areas, grid-auto-rows, grid-auto-columns, and grid-auto-flow ","date":"2020-08-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/:2:16","tags":["css","grid","flex"],"title":"Flex and Grid in CSS","uri":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/"},{"categories":["Posts"],"content":"The Most Powerful Lines in Grid .container { grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); } ","date":"2020-08-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/:2:17","tags":["css","grid","flex"],"title":"Flex and Grid in CSS","uri":"https://tyrangyang.github.io/TyrangYang_blog/flex-grid/"},{"categories":["CheatSheet"],"content":"Create new post hugo new posts/new.md ","date":"2020-08-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/hugo-blog-cheatsheet/:1:0","tags":["hugo","cheatsheet"],"title":"Hugo Blog CheatSheet","uri":"https://tyrangyang.github.io/TyrangYang_blog/hugo-blog-cheatsheet/"},{"categories":["CheatSheet"],"content":"Add a picture Basic markdown ![\u003calt name](\u003c The route start from static folder\u003e) hugo build-in shortcut –\u003e figure ","date":"2020-08-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/hugo-blog-cheatsheet/:2:0","tags":["hugo","cheatsheet"],"title":"Hugo Blog CheatSheet","uri":"https://tyrangyang.github.io/TyrangYang_blog/hugo-blog-cheatsheet/"},{"categories":["CheatSheet"],"content":"Add a reference link Documentation of ref and relref \\[Neat](\\{\\{\u003c ref \"blog/neat.md\" \u003e}}) \\[Who](\\{\\{\u003c relref \"about.md#who\" \u003e}}) ","date":"2020-08-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/hugo-blog-cheatsheet/:3:0","tags":["hugo","cheatsheet"],"title":"Hugo Blog CheatSheet","uri":"https://tyrangyang.github.io/TyrangYang_blog/hugo-blog-cheatsheet/"},{"categories":["Overview"],"content":"Reference: https://www.restapitutorial.com/httpstatuscodes.html ⭐︎ -\u003e “Top 10” HTTP Status Code. More REST service-specific information is contained in the entry. ","date":"2020-08-13","objectID":"https://tyrangyang.github.io/TyrangYang_blog/http-status-code/:0:0","tags":["http"],"title":"Http Status Code Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/http-status-code/"},{"categories":["Overview"],"content":"1XX Information 100 continue – Client should continue 101 switching protocols 102 processing (webDAV) ","date":"2020-08-13","objectID":"https://tyrangyang.github.io/TyrangYang_blog/http-status-code/:1:0","tags":["http"],"title":"Http Status Code Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/http-status-code/"},{"categories":["Overview"],"content":"2XX Success ⭐︎200 OK – The request has succeeded. General status code. Most common code used to indicate success. ⭐︎201 Created – A new resource has been created and should return a URI. Successful creation occurred (via either POST or PUT). Set the Location header to contain a link to the newly-created resource (on POST). Response body content may or may not be present. 202 Accepted 203 Non-Authoritative Information ⭐︎204 No Content – The server successfully processed the request, but is not returning any content. Status when wrapped responses (e.g. JSEND) are not used and nothing is in the body (e.g. DELETE). 205 Reset Content 206 Partial Content 207 Multi-Status(webDAV) 208 Already Reported (WebDAV) 226 IM Used ","date":"2020-08-13","objectID":"https://tyrangyang.github.io/TyrangYang_blog/http-status-code/:2:0","tags":["http"],"title":"Http Status Code Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/http-status-code/"},{"categories":["Overview"],"content":"3XX Redirection 300 Multiple Choices 301 Moved Permanently 302 Found – 303 + 307 303 See Other – The response to the request can be found under another URI using a GET method. ⭐︎304 Not Modified – The resource has not been modified since last requested. Typically, the HTTP client provides a header like the If-Modified-Since header to provide a time against which to compare and you can use previous resource. Used for conditional GET calls to reduce band-width usage. If used, must set the Date, Content-Location, ETag headers to what they would have been on a regular GET call. There must be no body on the response. 305 Use Proxy 306 (Unused) – Used in old version 307 Temporary Redirect – the request should be repeated with another URI; however, future requests can still use the original URI. 308 Permanent Redirect (experimental) ","date":"2020-08-13","objectID":"https://tyrangyang.github.io/TyrangYang_blog/http-status-code/:3:0","tags":["http"],"title":"Http Status Code Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/http-status-code/"},{"categories":["Overview"],"content":"4XX Client Error ⭐︎400 Bad Request – The request cannot be fulfilled due to bad syntax. General error when fulfilling the request would cause an invalid state. Domain validation errors, missing data, etc. are some examples. ⭐︎401 Unauthorize – Similar to 403 Forbidden, but specifically for use when authentication is possible but has failed or not yet been provided. Error code response for missing or invalid authentication token. 402 Payment Required ⭐︎403 Forbidden – The server understood the request, but is refusing to fulfill it. It SHOULD describe the reason for the refusal in the entity. Error code for user not authorized to perform the operation or the resource is unavailable for some reason (e.g. time constraints, etc.). ⭐︎404 Not Found – The requested resource could not be found or just don’t want to tell you the reason for the refusal. Used when the requested resource is not found, whether it doesn’t exist or if there was a 401 or 403 that, for security reasons, the service wants to mask. 405 Method Not Allowed 406 Not Acceptable 407 Proxy Authentication Required 408 Request Timeout ⭐︎409 Conflict – Indicates that the request could not be processed because of conflict in the request, such as an edit conflict.(version control) Whenever a resource conflict would be caused by fulfilling the request. Duplicate entries and deleting root objects when cascade-delete is not supported are a couple of examples. 410 Gone – The resource requested is no longer available and will not be available again. 411 Length Required 412 Precondition Failed 413 Request Entity Too Large 414 Request-URI Too Long 415 Unsupported Media Type 416 Requested Range Not Satisfiable – The client has asked for a portion of the file, but the server cannot supply that portion. 417 Expectation Failed 418 420 422 423 424 425 426 428 431 444 449 450 451 499 ","date":"2020-08-13","objectID":"https://tyrangyang.github.io/TyrangYang_blog/http-status-code/:4:0","tags":["http"],"title":"Http Status Code Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/http-status-code/"},{"categories":["Overview"],"content":"5XX Server Error ⭐︎500 Internal Server Error – A generic error message, given when no more specific message is suitable. The general catch-all error when the server-side throws an exception. 501 Not Implemented – The server does not support the functionality 502 Bad Gateway – The server was acting as a gateway or proxy and received an invalid response from the upstream server. 503 Service Unavailable 504 Gateway Timeout 505 HTTP Version Not Supported 506 Variant Also Negotiates (Experimental) 507 Insufficient Storage (WebDAV) 508 Loop Detected (WebDAV) 509 Bandwidth Limit Exceeded (Apache) 510 Not Extended 511 Network Authentication Required – The client needs to authenticate to gain network access. Intended for use by intercepting proxies used to control access to the network 598 Network read timeout error 599 Network connect timeout error ","date":"2020-08-13","objectID":"https://tyrangyang.github.io/TyrangYang_blog/http-status-code/:5:0","tags":["http"],"title":"Http Status Code Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/http-status-code/"},{"categories":["Overview"],"content":"table table ├── thead │ └── tr │ └── th ├── tbody │ └── tr │ └── td └── tfoot └── tr └── td ","date":"2020-08-13","objectID":"https://tyrangyang.github.io/TyrangYang_blog/html5-overview/:1:0","tags":["html","front-end","web"],"title":"Html5 Overview 🏗","uri":"https://tyrangyang.github.io/TyrangYang_blog/html5-overview/"},{"categories":["Overview"],"content":"Intersection Observer API const option = { root: null, rootMargin: '0px', threshold: 0.7, // or an array [0.1, 0.2, ...] }; const callback = (entries, observer) =\u003e { entries.forEach((entry) =\u003e { // Each entry describes an intersection change for one observed // target element: // entry.boundingClientRect // entry.intersectionRatio // entry.intersectionRect // entry.isIntersecting // entry.rootBounds // entry.target // entry.time }); }; const observer = new IntersectionObserver(callBack, option); observer.observer(nodeOne); //observing only nodeOne observer.observer(nodeTwo); //observing both nodeOne and nodeTwo observer.unobserve(nodeOne); //observing only nodeTwo observer.disconnect(); //not observing any node When node fulfilled observer option, callback function will run directly ","date":"2020-08-13","objectID":"https://tyrangyang.github.io/TyrangYang_blog/html5-overview/:2:0","tags":["html","front-end","web"],"title":"Html5 Overview 🏗","uri":"https://tyrangyang.github.io/TyrangYang_blog/html5-overview/"},{"categories":["Alg\u0026DataStr"],"content":"Longest common subsequence This is a typical recursive problem. The pseudocode is: If S1[i] == S2[j], lcs(S1[i:],S2[j:]) = 1 + lcs(S1[i+1:],S2[j+1:]) else lcs(S1[i:],S2[j:]) = max(lcs(S1[i:],S2[j+1:]), lcs(S1[i+1s:],S2[j:])) ","date":"2020-07-10","objectID":"https://tyrangyang.github.io/TyrangYang_blog/dp-example/:1:0","tags":["dp","c++"],"title":"Dynamic Programming Example","uri":"https://tyrangyang.github.io/TyrangYang_blog/dp-example/"},{"categories":["Alg\u0026DataStr"],"content":"Recursive solution: int longestCommonSubsequence(string text1, string text2) { if(text1.size() == 0 || text2.size() == 0 ){ return 0; } if(text1[0] == text2[0]){ return 1 + longestCommonSubsequence(text1.substr(1, text1.size()-1), text2.substr(1, text1.size()-1)); } return max(longestCommonSubsequence(text1, text2.substr(1, text1.size()-1)), longestCommonSubsequence(text1.substr(1, text1.size()-1), text2)); } Time complexity: O(2^n) Using dp could store the state that already calculate before. ","date":"2020-07-10","objectID":"https://tyrangyang.github.io/TyrangYang_blog/dp-example/:1:1","tags":["dp","c++"],"title":"Dynamic Programming Example","uri":"https://tyrangyang.github.io/TyrangYang_blog/dp-example/"},{"categories":["Alg\u0026DataStr"],"content":"Top to Button DP solution: int lcs (string\u0026 s1, string\u0026 s2, int i, int j, vector\u003cvector\u003cint\u003e\u003e\u0026 dp){ if(i == s1.size() || j == s2.size() ) return 0; if(dp[i][j] != -1) return dp[i][j]; if(s1[i] == s2[j]) dp[i][j] = 1 + lcs(s1, s2, i+ 1, j + 1, dp); else dp[i][j] = max(lcs(s1,s2,i+1,j,dp), lcs(s1,s2,i,j+1,dp)); return dp[i][j]; } int longestCommonSubsequence(string text1, string text2) { // dp[i][j] ==\u003e solution of s1[i:] \u0026 s2[j:] vector\u003cvector\u003cint\u003e\u003e dp(text1.size() , vector\u003cint\u003e(text2.size(), -1)); return lcs(text1, text2, 0, 0, dp); } This solution has same strategy with recursive solution but use dp table to store the state ","date":"2020-07-10","objectID":"https://tyrangyang.github.io/TyrangYang_blog/dp-example/:1:2","tags":["dp","c++"],"title":"Dynamic Programming Example","uri":"https://tyrangyang.github.io/TyrangYang_blog/dp-example/"},{"categories":["Alg\u0026DataStr"],"content":"Button to Top DP solution: ","date":"2020-07-10","objectID":"https://tyrangyang.github.io/TyrangYang_blog/dp-example/:1:3","tags":["dp","c++"],"title":"Dynamic Programming Example","uri":"https://tyrangyang.github.io/TyrangYang_blog/dp-example/"},{"categories":["Alg\u0026DataStr"],"content":"Similar question Longest Palindromic Subsequence ","date":"2020-07-10","objectID":"https://tyrangyang.github.io/TyrangYang_blog/dp-example/:1:4","tags":["dp","c++"],"title":"Dynamic Programming Example","uri":"https://tyrangyang.github.io/TyrangYang_blog/dp-example/"},{"categories":["Alg\u0026DataStr"],"content":"0/1 backpack ","date":"2020-07-10","objectID":"https://tyrangyang.github.io/TyrangYang_blog/dp-example/:2:0","tags":["dp","c++"],"title":"Dynamic Programming Example","uri":"https://tyrangyang.github.io/TyrangYang_blog/dp-example/"},{"categories":["Alg\u0026DataStr"],"content":"Best Time to Buy and Sell Stock ","date":"2020-07-10","objectID":"https://tyrangyang.github.io/TyrangYang_blog/dp-example/:3:0","tags":["dp","c++"],"title":"Dynamic Programming Example","uri":"https://tyrangyang.github.io/TyrangYang_blog/dp-example/"},{"categories":["Alg\u0026DataStr"],"content":"What is dp problem DP problem is a programming strategy which use extra space to save time. These problems need to store some state instead of calculate again. For most situation, DP is a strategy to reduce the time consuming for recursive problem. Memorization Tabulation ","date":"2020-07-10","objectID":"https://tyrangyang.github.io/TyrangYang_blog/dp/:1:0","tags":["dp","c++"],"title":"Dynamic Programming 🏗","uri":"https://tyrangyang.github.io/TyrangYang_blog/dp/"},{"categories":["Alg\u0026DataStr"],"content":"fibonacci example The classic recursive problem: const fib = (n) =\u003e { if (n \u003c= 2) return 1; return fib(n - 1) + fib(n - 2); }; How to memorize : const fibMemo = (n, memo) =\u003e { const key = n; if (memo[key]) return memo[key]; if (n \u003c= 2) return 1; memo[key] = fib(n - 1) + fib(n - 2); return memo[key]; }; How to tabulation: const fibTable = (n) =\u003e { const table = Array(n + 1).fill(0); table[1] = 1; for (let i = 0; i \u003c= n; ++i) { table[i + 1] += table[i]; table[i + 2] += table[i]; } return table[n]; }; ","date":"2020-07-10","objectID":"https://tyrangyang.github.io/TyrangYang_blog/dp/:1:1","tags":["dp","c++"],"title":"Dynamic Programming 🏗","uri":"https://tyrangyang.github.io/TyrangYang_blog/dp/"},{"categories":["Alg\u0026DataStr"],"content":"Memorization Recipe Make it work visualize the problem as a tree implement the tree using recursion test it Make it efficient add memo object add a base case to return memo value store return values into the memo ","date":"2020-07-10","objectID":"https://tyrangyang.github.io/TyrangYang_blog/dp/:1:2","tags":["dp","c++"],"title":"Dynamic Programming 🏗","uri":"https://tyrangyang.github.io/TyrangYang_blog/dp/"},{"categories":["Alg\u0026DataStr"],"content":"Tabulation Recipe visualize the problem as table size the table base on inputs initialize the table with default values seed the trivial answer into the table iterate through the table fill further position based on the current position ","date":"2020-07-10","objectID":"https://tyrangyang.github.io/TyrangYang_blog/dp/:1:3","tags":["dp","c++"],"title":"Dynamic Programming 🏗","uri":"https://tyrangyang.github.io/TyrangYang_blog/dp/"},{"categories":["Alg\u0026DataStr"],"content":"What kind of question is dp Can the result be exist →→ True or False How the result be come →→ One result What is the best result →→ One of a best result What is all results (may not be dp problem) →→ all results ","date":"2020-07-10","objectID":"https://tyrangyang.github.io/TyrangYang_blog/dp/:2:0","tags":["dp","c++"],"title":"Dynamic Programming 🏗","uri":"https://tyrangyang.github.io/TyrangYang_blog/dp/"},{"categories":["Alg\u0026DataStr"],"content":"Example const canSum = (target, numbers, memo) =\u003e { const key = target; if (key in memo) return memo[key]; if (target === 0) return true; if (target \u003c 0) return false; for (let num of numbers) { let tmp = target - num; if (canSum(tmp, numbers, memo)) { memo[key] = true; return memo[key]; } } memo[key] = false; return memo[key]; }; let res = canSum(300, [25], {}); res; const howSum = (target, numbers, memo) =\u003e { const key = target; if (key in memo) return memo[key]; if (target === 0) return []; if (target \u003c 0) return null; for (let num of numbers) { let tmp = target - num; let sumRes = howSum(tmp, numbers, memo); if (sumRes !== null) { memo[key] = [num, ...sumRes]; return memo[key]; } } return null; }; res = howSum(300, [7, 15], {}); res; const bestSum = (target, numbers, memo) =\u003e { const key = target; if (key in memo) return memo[key]; if (target === 0) return []; if (target \u003c 0) return null; let shortestRes = null; for (let num of numbers) { let tmp = target - num; let tmpCombination = bestSum(tmp, numbers, memo); if (tmpCombination !== null) { shortestRes = shortestRes === null || shortestRes.length \u003e tmpCombination.length + 1 ? [num, ...tmpCombination] : shortestRes; } } memo[key] = shortestRes; return memo[key]; }; res = bestSum(8, [2, 3, 5], {}); res; ","date":"2020-07-10","objectID":"https://tyrangyang.github.io/TyrangYang_blog/dp/:2:1","tags":["dp","c++"],"title":"Dynamic Programming 🏗","uri":"https://tyrangyang.github.io/TyrangYang_blog/dp/"},{"categories":["Alg\u0026DataStr"],"content":"DP table ","date":"2020-07-10","objectID":"https://tyrangyang.github.io/TyrangYang_blog/dp/:3:0","tags":["dp","c++"],"title":"Dynamic Programming 🏗","uri":"https://tyrangyang.github.io/TyrangYang_blog/dp/"},{"categories":["Alg\u0026DataStr"],"content":"State machine ","date":"2020-07-10","objectID":"https://tyrangyang.github.io/TyrangYang_blog/dp/:4:0","tags":["dp","c++"],"title":"Dynamic Programming 🏗","uri":"https://tyrangyang.github.io/TyrangYang_blog/dp/"},{"categories":["Alg\u0026DataStr"],"content":"State transaction equation ","date":"2020-07-10","objectID":"https://tyrangyang.github.io/TyrangYang_blog/dp/:5:0","tags":["dp","c++"],"title":"Dynamic Programming 🏗","uri":"https://tyrangyang.github.io/TyrangYang_blog/dp/"},{"categories":["Alg\u0026DataStr"],"content":"DP problem Example I have another post to classify dp problem See this Post ","date":"2020-07-10","objectID":"https://tyrangyang.github.io/TyrangYang_blog/dp/:6:0","tags":["dp","c++"],"title":"Dynamic Programming 🏗","uri":"https://tyrangyang.github.io/TyrangYang_blog/dp/"},{"categories":["Overview"],"content":"Download Go to this link ","date":"2020-06-21","objectID":"https://tyrangyang.github.io/TyrangYang_blog/go/:1:0","tags":["Go"],"title":"Go overview 🏗","uri":"https://tyrangyang.github.io/TyrangYang_blog/go/"},{"categories":["Overview"],"content":"workspace Run go env in terminal. The variable GOPATH is the default workspace path. Project should under this folder. In this workspace, file should structured as how you route your project: . ├── bin ├── pkg └── src └── \u003cThe home web page of version control\u003e └── \u003cUser name\u003e └── \u003cProject name\u003e Example: . ├── bin ├── pkg └── src └── github.com └── TyrangYang ├── project1 └── project2 ","date":"2020-06-21","objectID":"https://tyrangyang.github.io/TyrangYang_blog/go/:2:0","tags":["Go"],"title":"Go overview 🏗","uri":"https://tyrangyang.github.io/TyrangYang_blog/go/"},{"categories":["Overview"],"content":"Main type string bool int int int8 int16 int32 int64 uint uint8 uint16 uint32 uint64 uintptr byte = uint8 rune = int32 float32 float64 complex64 complex128 ","date":"2020-06-21","objectID":"https://tyrangyang.github.io/TyrangYang_blog/go/:3:0","tags":["Go"],"title":"Go overview 🏗","uri":"https://tyrangyang.github.io/TyrangYang_blog/go/"},{"categories":["Overview"],"content":"Print Import fmt is necessary Document ","date":"2020-06-21","objectID":"https://tyrangyang.github.io/TyrangYang_blog/go/:4:0","tags":["Go"],"title":"Go overview 🏗","uri":"https://tyrangyang.github.io/TyrangYang_blog/go/"},{"categories":["Overview"],"content":"Assignment var name = \"yang\" var age = 23 var isTrue = true name2, age2 := \"yang2\", 12 ","date":"2020-06-21","objectID":"https://tyrangyang.github.io/TyrangYang_blog/go/:5:0","tags":["Go"],"title":"Go overview 🏗","uri":"https://tyrangyang.github.io/TyrangYang_blog/go/"},{"categories":["Overview"],"content":"Array // declare var fruitArr [2]string fruitArr[0] = \"apple\" fruitArr[1] = \"orange\" // declare and assign fruitArr2 := [2]string{\"apple\", \"orange\"} fmt.Println(fruitArr2) fruitSlice := []string{\"apple\", \"orange\", \"abc\"} fmt.Println(fruitSlice) i, j := 1, 2 fmt.Println(fruitSlice[i:j]) ","date":"2020-06-21","objectID":"https://tyrangyang.github.io/TyrangYang_blog/go/:6:0","tags":["Go"],"title":"Go overview 🏗","uri":"https://tyrangyang.github.io/TyrangYang_blog/go/"},{"categories":["Overview"],"content":"Here have some good pictures that is helpful for understanding git and contain the record for git commend ","date":"2020-06-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/:0:0","tags":["git"],"title":"Git overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/"},{"categories":["Overview"],"content":"Concept Map Here is a concept map given by Udacity.com. This picture shows the relationship between these basic git concept. ","date":"2020-06-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/:1:0","tags":["git"],"title":"Git overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/"},{"categories":["Overview"],"content":"Git Data Transport Map Git have four working zones. This map shows that using which commend to shift your code from one zone to another. This photo is provide by osteele ","date":"2020-06-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/:2:0","tags":["git"],"title":"Git overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/"},{"categories":["Overview"],"content":"Git commend and usage ","date":"2020-06-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/:3:0","tags":["git"],"title":"Git overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/"},{"categories":["Overview"],"content":"Initialize the git repository git init ","date":"2020-06-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/:3:1","tags":["git"],"title":"Git overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/"},{"categories":["Overview"],"content":"Clone a repository by giving the URL (github) git clone \u003crepository URL\u003e ","date":"2020-06-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/:3:2","tags":["git"],"title":"Git overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/"},{"categories":["Overview"],"content":"Show the status (Status of Index) git status ","date":"2020-06-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/:3:3","tags":["git"],"title":"Git overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/"},{"categories":["Overview"],"content":"Show the log of commit git log show all logs in graph and each log in one line git log --graph --oneline \u003cbranch name\u003e \u003cbranch name\u003e show specific number of log git log -n \u003cnumber\u003e ","date":"2020-06-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/:3:4","tags":["git"],"title":"Git overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/"},{"categories":["Overview"],"content":"Compare workspace and index git diff compare workspace and index area (basically just show what you are not add) git diff head compare index area and head in local repository git diff \u003ccommit ID\u003e compare index area and given commit ID in local repository git diff \u003ccommit ID\u003e \u003ccommit ID\u003e compare two given commit ","date":"2020-06-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/:3:5","tags":["git"],"title":"Git overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/"},{"categories":["Overview"],"content":"Add git add \u003cfilename\u003e git add . add all ","date":"2020-06-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/:3:6","tags":["git"],"title":"Git overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/"},{"categories":["Overview"],"content":"Commit git commit -m '...' add and commit git commit -am '...' ","date":"2020-06-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/:3:7","tags":["git"],"title":"Git overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/"},{"categories":["Overview"],"content":"Branch show all branch git branch Open a new branch git branch \u003cbranch name\u003e Open a new branch and checkout git checkout -b \u003cnew branch name\u003e ","date":"2020-06-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/:3:8","tags":["git"],"title":"Git overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/"},{"categories":["Overview"],"content":"Push git push \u003cremote name\u003e \u003cbranch name\u003e ","date":"2020-06-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/:3:9","tags":["git"],"title":"Git overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/"},{"categories":["Overview"],"content":"Pull git pull \u003cremote name\u003e \u003cbranch name\u003e ","date":"2020-06-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/:3:10","tags":["git"],"title":"Git overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/"},{"categories":["Overview"],"content":"Merge git merge \u003cbranch\u003e merge a given branch to current branch Eg: git merge test (when you on master branch) –\u003e merge branch test into master. ","date":"2020-06-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/:3:11","tags":["git"],"title":"Git overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/"},{"categories":["Overview"],"content":"Remote show all remote git remote show all remote detail git remote -v giving a new remote name and connect it to a URL git remote add \u003cremote name\u003e \u003cURL\u003e ","date":"2020-06-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/:3:12","tags":["git"],"title":"Git overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/"},{"categories":["Overview"],"content":"Fetch git fetch \u003cremote name\u003e git fetch origin b Without changing workspace, update local repository from remote repository ","date":"2020-06-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/:3:13","tags":["git"],"title":"Git overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/"},{"categories":["Overview"],"content":"Roll back git reset --soft HEAD~1 Roll back 1 commit into index area git reset --hard HEAD~2 Roll back 2 commits into workspace ","date":"2020-06-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/:3:14","tags":["git"],"title":"Git overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/"},{"categories":["Overview"],"content":"Remove some file in Index git rm --cached \u003cfile name\u003e git rm -r --cached . This command will set file to be untraced. -r means recursively --cached means remove file in index Update .gitignore. delete something that you add in gitignore and commit before ","date":"2020-06-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/:3:15","tags":["git"],"title":"Git overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/"},{"categories":["Overview"],"content":"Rebase Suppose we have this situation and you are currently on branch topic A---B---C topic / D---E---F---G master The base of topic is commit E. Therefore rebase means you change the base depends on your given branch After you run git rebase master, branch will be like: A'--B'--C' topic / D---E---F---G master ","date":"2020-06-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/:3:16","tags":["git"],"title":"Git overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/"},{"categories":["Overview"],"content":"Compare merge, merge –squash and rebase If we have two branches master and topic A---B---C topic / D---E---F---G master ","date":"2020-06-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/:4:0","tags":["git"],"title":"Git overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/"},{"categories":["Overview"],"content":"merge If run git merge A---B---C topic / \\ D---E---F---G---H master ","date":"2020-06-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/:4:1","tags":["git"],"title":"Git overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/"},{"categories":["Overview"],"content":"merge –squash if fun git merge --squash and git commit H combine A B C A---B---C topic / D---E---F---G---H master Now you have topic branch and update the master. You may delete topic later ","date":"2020-06-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/:4:2","tags":["git"],"title":"Git overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/"},{"categories":["Overview"],"content":"rebase After you run git rebase master when you on branch topic: A'--B'--C' topic / D---E---F---G master You can checkout master and run git merge topic: D---E---F---G---A'---B'---C' master/topic ","date":"2020-06-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/:4:3","tags":["git"],"title":"Git overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/"},{"categories":["Overview"],"content":"Git config Usually config your github email account and username in global ","date":"2020-06-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/:5:0","tags":["git"],"title":"Git overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/"},{"categories":["Overview"],"content":"list all global config git config -l ","date":"2020-06-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/:5:1","tags":["git"],"title":"Git overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/"},{"categories":["Overview"],"content":"set user name and email git config --global user.name \"your name\" git config --global user.email \"your@email.com\" ","date":"2020-06-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/:5:2","tags":["git"],"title":"Git overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/"},{"categories":["Overview"],"content":"set password cache git config --global credential.helper cache and next password/token entering will be cache git config --global --unset credential.helper will unset cache state ","date":"2020-06-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/:5:3","tags":["git"],"title":"Git overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/"},{"categories":["Overview"],"content":"How to manage multiple github accounts https://www.heady.io/blog/how-to-manage-multiple-github-accounts ","date":"2020-06-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/:5:4","tags":["git"],"title":"Git overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/"},{"categories":["Overview"],"content":"Delete submodule Delete the relevant section from the .gitmodules file. Stage the .gitmodules changes git add .gitmodules Delete the relevant section from .git/config. Run git rm –cached path_to_submodule (no trailing slash). Run rm -rf .git/modules/path_to_submodule (no trailing slash). Commit git commit -m “Removed submodule \" Delete the now untracked submodule files rm -rf path_to_submodule Source ","date":"2020-06-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/:6:0","tags":["git"],"title":"Git overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/"},{"categories":["Overview"],"content":"Vuex Document: English 中文 ","date":"2020-05-29","objectID":"https://tyrangyang.github.io/TyrangYang_blog/vuex-overview/:0:0","tags":["vue","vuex","javascript","redux"],"title":"Vuex Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/vuex-overview/"},{"categories":["Overview"],"content":"Concept State - App-level state/data Getters - Get pieces of state or computed values from state Actions - Called from components to commit mutation (async) Mutations - Mutate the state (sync) Modules - Each module can have its own state, getters, actions and mutations ","date":"2020-05-29","objectID":"https://tyrangyang.github.io/TyrangYang_blog/vuex-overview/:1:0","tags":["vue","vuex","javascript","redux"],"title":"Vuex Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/vuex-overview/"},{"categories":["Overview"],"content":"Work flow Vuex Workflow Vuex work flow is similar with Redux =\u003e More Detail about Redux Redux Workflow ","date":"2020-05-29","objectID":"https://tyrangyang.github.io/TyrangYang_blog/vuex-overview/:2:0","tags":["vue","vuex","javascript","redux"],"title":"Vuex Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/vuex-overview/"},{"categories":["Overview"],"content":"Basic structure In store/index.js // import vue and vuex import Vuex from 'vuex'; import Vue from 'vue'; // import module import users from './modules/users'; import bills from './modules/bills'; // adding vuex Vue.use(Vuex); // create store const store = new Vuex.Store({ modules: { users, bills, }, }); // export store export default store; In main.js // Adding... // import store import store from './store'; // add store to vue object new Vue({ store, // add this line render: (h) =\u003e h(App), }).$mount('#app'); In a module const state = { Users: [ { id: 'userId1', name: 'testName1' }, { id: 'userId2', name: 'testName2' }, ], }; const getters = { Users: (state) =\u003e state.Users }; const actions = { async addUser(context, usr) { let usr = await axios.post('....', usr); context.commit('addUser', usr); }, // or async addUser({ commit }, usr) { let usr = await axios.post('....', usr); commit('addUser', usr); }, }; const mutations = { addUser(state, usr) { state.Users.push(usr); }, }; export default { state, getters, actions, mutations, }; ","date":"2020-05-29","objectID":"https://tyrangyang.github.io/TyrangYang_blog/vuex-overview/:3:0","tags":["vue","vuex","javascript","redux"],"title":"Vuex Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/vuex-overview/"},{"categories":["Overview"],"content":"Access ","date":"2020-05-29","objectID":"https://tyrangyang.github.io/TyrangYang_blog/vuex-overview/:4:0","tags":["vue","vuex","javascript","redux"],"title":"Vuex Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/vuex-overview/"},{"categories":["Overview"],"content":"Getters export default { name: 'User', computed: { Users() { return this.$store.getters.Users; }, }, }; ","date":"2020-05-29","objectID":"https://tyrangyang.github.io/TyrangYang_blog/vuex-overview/:4:1","tags":["vue","vuex","javascript","redux"],"title":"Vuex Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/vuex-overview/"},{"categories":["Overview"],"content":"Actions this.$store.dispatch('mutation name', variable); ","date":"2020-05-29","objectID":"https://tyrangyang.github.io/TyrangYang_blog/vuex-overview/:4:2","tags":["vue","vuex","javascript","redux"],"title":"Vuex Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/vuex-overview/"},{"categories":["Overview"],"content":"Mutation this.$store.commit('mutation name', variable); ","date":"2020-05-29","objectID":"https://tyrangyang.github.io/TyrangYang_blog/vuex-overview/:4:3","tags":["vue","vuex","javascript","redux"],"title":"Vuex Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/vuex-overview/"},{"categories":["Overview"],"content":"Module In default, all modules will combine to root store even you have different module except you have a namespace ","date":"2020-05-29","objectID":"https://tyrangyang.github.io/TyrangYang_blog/vuex-overview/:4:4","tags":["vue","vuex","javascript","redux"],"title":"Vuex Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/vuex-overview/"},{"categories":["Overview"],"content":"mapActions, mapGetters, mapMutations import { mapActions, mapGetters, mapMutations } from 'vuex'; export default { // ... computed: { ...mapGetters([ 'doneTodosCount', // `this.doneTodosCount` -\u003e `this.$store.getters.doneTodosCount` 'anotherGetter', // `this.anotherGetter` -\u003e `this.$store.getters.anotherGetter` ]), }, methods: { ...mapMutations([ 'increment', // `this.increment()` -\u003e `this.$store.commit('increment')` 'incrementBy', // `this.incrementBy(amount)` -\u003e `this.$store.commit('incrementBy', amount)` ]), ...mapMutations({ add: 'increment', // `this.add()` -\u003e `this.$store.commit('increment')` }), ...mapActions([ 'increment', // `this.increment()` -\u003e `this.$store.dispatch('increment')` 'incrementBy', // `this.incrementBy(amount)` -\u003e `this.$store.dispatch('incrementBy', amount)` ]), ...mapActions({ add: 'increment', // `this.add()` -\u003e `this.$store.dispatch('increment')` }), }, }; ","date":"2020-05-29","objectID":"https://tyrangyang.github.io/TyrangYang_blog/vuex-overview/:4:5","tags":["vue","vuex","javascript","redux"],"title":"Vuex Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/vuex-overview/"},{"categories":["Overview"],"content":"Vue Document: English 中文 ","date":"2020-05-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/vue-overview/:0:0","tags":["vue","javascript"],"title":"Vue Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/vue-overview/"},{"categories":["Overview"],"content":"life cycle ","date":"2020-05-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/vue-overview/:1:0","tags":["vue","javascript"],"title":"Vue Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/vue-overview/"},{"categories":["Overview"],"content":"Basic structure \u003ctemplate\u003e \u003cdiv\u003e\u003c/div\u003e \u003c/template\u003e \u003cscript\u003e export default { name: '', props: [...], data() { return {}; }, computed:{ ... } methods: { ... } }; \u003c/script\u003e \u003cstyle lang=\"css\"\u003e\u003c/style\u003e ","date":"2020-05-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/vue-overview/:2:0","tags":["vue","javascript"],"title":"Vue Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/vue-overview/"},{"categories":["Overview"],"content":"Basic vue function ","date":"2020-05-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/vue-overview/:3:0","tags":["vue","javascript"],"title":"Vue Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/vue-overview/"},{"categories":["Overview"],"content":"v-bind \u003coption v-for=\"(user, idx) in Users\" :key=\"idx\" :value=\"user.id\" @mousedown.prevent=\"multiSelectEvent\" \u003e{{ user.name }}\u003c/option \u003e v-bind:value is equal to :value ","date":"2020-05-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/vue-overview/:3:1","tags":["vue","javascript"],"title":"Vue Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/vue-overview/"},{"categories":["Overview"],"content":"v-on \u003coption v-for=\"(user, idx) in Users\" :key=\"idx\" :value=\"user.id\" @mousedown.prevent=\"multiSelectEvent\" \u003e{{ user.name }}\u003c/option \u003e v-on:click is equal to @click ","date":"2020-05-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/vue-overview/:3:2","tags":["vue","javascript"],"title":"Vue Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/vue-overview/"},{"categories":["Overview"],"content":"v-for \u003cdiv class=\"oneline\" v-for=\"(each, idx) in sortSummary(summary)\" :key=\"idx\" \u003e\u003c/div\u003e Not use v-for \u0026 v-if in one tag Document v-for have higher priority than v-if, Therefore, v-if will be run multiple times and all element will be render. However, you only need to render the element which v-if return true. The solution is to make a method or computed that filter the element and return them ","date":"2020-05-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/vue-overview/:3:3","tags":["vue","javascript"],"title":"Vue Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/vue-overview/"},{"categories":["Overview"],"content":"v-if \u003cdiv v-if=\"errors.length\"\u003e \u003cb\u003ePlease correct the following error(s):\u003c/b\u003e \u003cul\u003e \u003cli v-for=\"(error, idx) in errors\" :key=\"idx\"\u003e{{ error }}\u003c/li\u003e \u003c/ul\u003e \u003c/div\u003e ","date":"2020-05-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/vue-overview/:3:4","tags":["vue","javascript"],"title":"Vue Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/vue-overview/"},{"categories":["Overview"],"content":"v-show \u003cspan v-show=\"unevenlySplit \u0026\u0026 amount === ''\" style=\"color: red\" \u003e(amount should not empty)\u003c/span \u003e ","date":"2020-05-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/vue-overview/:3:5","tags":["vue","javascript"],"title":"Vue Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/vue-overview/"},{"categories":["Overview"],"content":"v-model \u003cselect class=\"sortSummary\" v-model=\"sortModel\"\u003e \u003coption value=\"0\"\u003eNot sort\u003c/option\u003e \u003coption value=\"1\"\u003eSort by Payer\u003c/option\u003e \u003coption value=\"2\"\u003eSort by receiver\u003c/option\u003e \u003c/select\u003e In input tag v-model = \"something\" is equal to :value=\"something @input=\"something = $event.target.value ","date":"2020-05-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/vue-overview/:3:6","tags":["vue","javascript"],"title":"Vue Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/vue-overview/"},{"categories":["Overview"],"content":"v-text \u003cspan v-text=\"variable\"\u003e\u003c/span\u003e This is equal to \u003cspan\u003e {{variable}} \u003c/span\u003e ","date":"2020-05-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/vue-overview/:3:7","tags":["vue","javascript"],"title":"Vue Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/vue-overview/"},{"categories":["Overview"],"content":"Vuex See my another post: Vuex Overview ","date":"2020-05-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/vue-overview/:4:0","tags":["vue","javascript"],"title":"Vue Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/vue-overview/"},{"categories":["Overview"],"content":"Question facing ","date":"2020-05-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/vue-overview/:5:0","tags":["vue","javascript"],"title":"Vue Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/vue-overview/"},{"categories":["Overview"],"content":"Vue can not use [] to modify an object in data; We have to use this.$set(\u003cobject name\u003e, \u003ckey\u003e, \u003cval\u003e) https://www.telerik.com/blogs/so-what-actually-is-vue-set ","date":"2020-05-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/vue-overview/:5:1","tags":["vue","javascript"],"title":"Vue Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/vue-overview/"},{"categories":["Note"],"content":"warning Many of JavaScript cool feature or syntactic sugar included since ES6(ES2015). You can read this Article to know What new feature brings in since ES6 ","date":"2020-05-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/js-trick/:0:0","tags":["javascript"],"title":"Js Trick","uri":"https://tyrangyang.github.io/TyrangYang_blog/js-trick/"},{"categories":["Note"],"content":"Conversion ","date":"2020-05-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/js-trick/:1:0","tags":["javascript"],"title":"Js Trick","uri":"https://tyrangyang.github.io/TyrangYang_blog/js-trick/"},{"categories":["Note"],"content":"Any =\u003e Boolean !!false; // false !!undefined; // false !!null; // false !!NaN; // false !!0; // false !!''; // false !!variable == Boolean(variable); ","date":"2020-05-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/js-trick/:1:1","tags":["javascript"],"title":"Js Trick","uri":"https://tyrangyang.github.io/TyrangYang_blog/js-trick/"},{"categories":["Note"],"content":"String =\u003e Integer Number('100'); //100 +'100'; // 100 +'abc'; // NAN ","date":"2020-05-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/js-trick/:1:2","tags":["javascript"],"title":"Js Trick","uri":"https://tyrangyang.github.io/TyrangYang_blog/js-trick/"},{"categories":["Note"],"content":"Object \u003c=\u003e Array Array =\u003e Object let arr = [1, 2, 3, 4, 5]; let objFromArr1 = Object.assign({}, arr); let objFromArr2 = { ...arr }; console.log(objFromArr1); // { '0': 1, '1': 2, '2': 3, '3': 4, '4': 5 } console.log(objFromArr2); // { '0': 1, '1': 2, '2': 3, '3': 4, '4': 5 } let pair = [ ['key1', 'val1'], ['key2', 'val2'], ]; // Map works as well let objFromPair = Object.fromEntries(arr); // ES10 console.log(objFromPair); //{ key1: 'val1', key2: 'val2' } Object.fromEntries(arr) included in ES10 (ES2019). Before ES10 or convert a complex array, arr.reduce(()=\u003e{}, {}) is a good method Object =\u003e Array let obj = { name: 1, age: 2, }; let keys = Object.keys(obj); let values = Object.values(obj); let entries = Object.entries(obj); console.log(keys); // [ 'name', 'age' ] console.log(values); // [ 1, 2 ] console.log(entries); // [ [ 'name', 1 ], [ 'age', 2 ] ] Object.values \u0026 Object.entries are from ES8 (ES2017) ","date":"2020-05-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/js-trick/:1:3","tags":["javascript"],"title":"Js Trick","uri":"https://tyrangyang.github.io/TyrangYang_blog/js-trick/"},{"categories":["Note"],"content":"let vs var var is function-scoped let (and const) are block-scoped function doMoreStuff() { if (2 + 4 === 4) { // Here, `a` will be available for the whole function var a = 5; // But `b` will be available only inside this if block let b = 5; } console.log(a); // undefined console.log(b); // ​​b is not defined​​ } doMoreStuff(); // ​​b is not defined​​ ","date":"2020-05-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/js-trick/:2:0","tags":["javascript"],"title":"Js Trick","uri":"https://tyrangyang.github.io/TyrangYang_blog/js-trick/"},{"categories":["Note"],"content":"Shallow copy \u0026 Deep copy ","date":"2020-05-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/js-trick/:3:0","tags":["javascript"],"title":"Js Trick","uri":"https://tyrangyang.github.io/TyrangYang_blog/js-trick/"},{"categories":["Note"],"content":"Shallow copy // array let nums1 = [1, 2, 3, 4, 5]; let nums2 = [...nums1]; let num3 = nums1.concat(); let num3 = nums1.slice(); // Object let obj1 = { test1: 1, test2: { test3: 2, test4: 3, }, }; let obj2 = { ...obj1 }; let obj3 = Object.assign({}, obj1); ","date":"2020-05-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/js-trick/:3:1","tags":["javascript"],"title":"Js Trick","uri":"https://tyrangyang.github.io/TyrangYang_blog/js-trick/"},{"categories":["Note"],"content":"deep copy // array and obj` let copy = JSON.parse(JSON.stringify(orig)); ","date":"2020-05-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/js-trick/:3:2","tags":["javascript"],"title":"Js Trick","uri":"https://tyrangyang.github.io/TyrangYang_blog/js-trick/"},{"categories":["Note"],"content":"Exponential ES7 feature let res = Math.pow(x, 2); // new operator added in ES7 res = x ** 2; ","date":"2020-05-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/js-trick/:4:0","tags":["javascript"],"title":"Js Trick","uri":"https://tyrangyang.github.io/TyrangYang_blog/js-trick/"},{"categories":["Note"],"content":"Nullish coalescing MDN: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator The nullish coalescing operator (??) is a logical operator that returns its right-hand side operand when its left-hand side operand is null or undefined, and otherwise returns its left-hand side operand. This operator used to replace || in some situations that or logic cannot handle elegantly. let calTax = (price, taxRate) =\u003e { taxRate = taxRate || 0.05; // if taxRate not provided (undefined), set default to 0.05 // But there is a problem when taxRate to 0 return price * (1 + taxRate); }; let res1 = calTax(100, 0); // 105 WRONG X let res2 = calTax(100); // 105 correct ✓ let calTax2 = (price, taxRate) =\u003e { taxRate = taxRate ?? 0.05; // if taxRate not provided (undefined), set default to 0.05 // But there is a problem when taxRate to 0 return price * (1 + taxRate); }; let res3 = calTax2(100, 0); // 100 correct X let res4 = calTax2(100); // 105 correct ✓ console.log(res3, res4); ","date":"2020-05-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/js-trick/:5:0","tags":["javascript"],"title":"Js Trick","uri":"https://tyrangyang.github.io/TyrangYang_blog/js-trick/"},{"categories":["Note"],"content":"Optional chaining class Person { constructor(name, age) { this.name = name; this.age = age; } getAge() { return this.age; } } let p1 = new Person(undefined, 12); console.log(p1.getAge()); // 12 console.log(p1.name.firstName); // Error console.log(p1.getSex()); // Error console.log(p1.name?.firstName); // undefined console.log(p1.getSex?.()); // undefined ","date":"2020-05-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/js-trick/:6:0","tags":["javascript"],"title":"Js Trick","uri":"https://tyrangyang.github.io/TyrangYang_blog/js-trick/"},{"categories":["Note"],"content":"Naming object If object key has same name with the variable in value, just use variable name. let a = 1, b = 2, c = 3; let res = { a, b, c }; // this is equal to // res = {a: a, b: b, c: c}; console.log(res); // { a: 1, b: 2, c: 3 } ","date":"2020-05-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/js-trick/:7:0","tags":["javascript"],"title":"Js Trick","uri":"https://tyrangyang.github.io/TyrangYang_blog/js-trick/"},{"categories":["Note"],"content":"Destruct Array destructing is ES6 feature, But Object destructing is ES9 feature…. let array = [1, 2, 3, 4]; let [a1, a2, ...a3] = array; console.log(a1, a2, a3); // 1 2 [ 3, 4 ] let test = { a: 1, b: 2, c: { d: 3, e: 4, }, f: 5, g: 6, }; let { a, b, c: { d, e }, ...f } = test; console.log(a, b, d, e, f); // 1 2 3 4 { f: 5, g: 6 } ","date":"2020-05-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/js-trick/:8:0","tags":["javascript"],"title":"Js Trick","uri":"https://tyrangyang.github.io/TyrangYang_blog/js-trick/"},{"categories":["Note"],"content":"Add space for every four digit let value = '123456789'; value = value .replace(/\\W/gi, '') .replace(/(.{4})/g, '$1 ') .trim(); console.log(value); // 1234 5678 9 .trim() for supporting deletion ","date":"2020-05-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/js-trick/:8:1","tags":["javascript"],"title":"Js Trick","uri":"https://tyrangyang.github.io/TyrangYang_blog/js-trick/"},{"categories":["Note"],"content":"Function compose Compose a list of function into one. I saw this in create middleware const f1 = (val) =\u003e `1\u003c${val}\u003e`; const f2 = (val) =\u003e `2\u003c${val}\u003e`; const compose = (...functionList) =\u003e { return functionList.reduce((prevFn, curFn) =\u003e { return (val) =\u003e curFn(prevFn(val)); }); }; const composedFun = compose(f1, f2); console.log(composedFun('hello world')); // 2\u003c1\u003chello world\u003e\u003e But we can improve this compose function. not need those return the final reduced function (val) =\u003e curFn(prevFn(val)); may have several arguments, therefore val change to ...args reduce function should give the second parameter as initial state in case the function list is empty const f1 = (val) =\u003e `1\u003c${val}\u003e`; const f2 = (val) =\u003e `2\u003c${val}\u003e`; const compose = (...functionList) =\u003e functionList.reduce( (prevFn, curFn) =\u003e (...args) =\u003e curFn(prevFn(...args)), (val) =\u003e val ); const composedFun = compose(f1, f2); console.log(composedFun('hello world')); // 2\u003c1\u003chello world\u003e\u003e const composedFun2 = compose(); console.log(composedFun2('hello world')); // hello world ","date":"2020-05-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/js-trick/:9:0","tags":["javascript"],"title":"Js Trick","uri":"https://tyrangyang.github.io/TyrangYang_blog/js-trick/"},{"categories":["Note"],"content":"tagged template Since es6, js provide a special function called tagged template which use template string as parameter function normal(...args) { console.log(args); } normal(1, 2, 'string1', 'string2'); // [ 1, 2, 'string1', 'string2' ] function tag(...args) { console.log(args); } tag`string1${1}string2${2}string3`; // [ [ 'string1', 'string2', 'string3' ], 1, 2 ] Normally, the tagged template function will handle arguments like: function tag(strings, ...args) { console.log(strings, args); } tag`string1${1}string2${2}string3`; // [ 'string1', 'string2', 'string3' ] [ 1, 2 ] ","date":"2020-05-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/js-trick/:10:0","tags":["javascript"],"title":"Js Trick","uri":"https://tyrangyang.github.io/TyrangYang_blog/js-trick/"},{"categories":["Note"],"content":"Debounce \u0026 throttle Here is my Example: Try it Now Play in CodePen ","date":"2020-05-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/js-trick/:11:0","tags":["javascript"],"title":"Js Trick","uri":"https://tyrangyang.github.io/TyrangYang_blog/js-trick/"},{"categories":["Note"],"content":"Debounce The debounce function delays the processing of event until the user has stopped trigger it. The core logic is using HOF to only keep the last trigger. const debounce = (fn, delay) =\u003e { let timer = null; return (...args) =\u003e { clearTimeout(timer); timer = setTimeout(() =\u003e { fn(...args); }, delay); }; }; ","date":"2020-05-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/js-trick/:11:1","tags":["javascript"],"title":"Js Trick","uri":"https://tyrangyang.github.io/TyrangYang_blog/js-trick/"},{"categories":["Note"],"content":"Throttle The Throttle function only allows one event running in a period of time The core logic is using HOF to only keep the first trigger. const throttle = (fn, delay) =\u003e { let timer = null; return (...args) =\u003e { if (timer !== null) { return; } clearTimeout(timer); timer = setTimeout(() =\u003e { timer = null; fn(...args); }, delay); }; }; ","date":"2020-05-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/js-trick/:11:2","tags":["javascript"],"title":"Js Trick","uri":"https://tyrangyang.github.io/TyrangYang_blog/js-trick/"},{"categories":["Note"],"content":"Snapshot \u0026 current value This problem due to the fact that every time you log out base on same reference or different variable for (var i = 0; i \u003c 10; i++) { setTimeout(() =\u003e console.log('val:', i)); // current value } // 10 10 ... 10 10 for (let i = 0; i \u003c 10; i++) { setTimeout(() =\u003e console.log('val:', i)); // snapshot } // 1 2 ... 8 9 // var is function scope, let is block scope for (var i = 0; i \u003c 10; i++) { setTimeout(((val) =\u003e console.log('val:', val)).bind(null, i)); // snapshot } // 1 2 3 4 ... 9 const ref = { current: null }; for (var i = 0; i \u003c 10; i++) { ref.current = i; setTimeout(((val) =\u003e console.log('val:', val.current)).bind(null, ref)); // current val } // 9 9 ... 9 9 for (var i = 0; i \u003c 10; i++) { // snapshot const t = i; setTimeout(() =\u003e { console.log('t:', t); }); } // 1 2 3 4 ... 9 ","date":"2020-05-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/js-trick/:12:0","tags":["javascript"],"title":"Js Trick","uri":"https://tyrangyang.github.io/TyrangYang_blog/js-trick/"},{"categories":["Note"],"content":"bind \u003c==\u003e callback fn.bind(context, ...args) will return a new function with a given context and given several arguments. If context is null, bind() same like callback newFn = fn.bind(null, ...args); == newFn = (...newArgs) =\u003e fn(...args,...newArgs); ","date":"2020-05-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/js-trick/:13:0","tags":["javascript"],"title":"Js Trick","uri":"https://tyrangyang.github.io/TyrangYang_blog/js-trick/"},{"categories":["Note"],"content":"Format time string The direct way to format a date object is used the second attribute in toLocaleString also as Intl.DateTimeFormat() const today = new Date(); console.log( today.toLocaleString('en-US', { hour12: true, year: '2-digit', month: '2-digit', day: '2-digit', minute: '2-digit', hour: '2-digit', second: '2-digit', timeZoneName: 'short', }) ); ","date":"2020-05-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/js-trick/:14:0","tags":["javascript"],"title":"Js Trick","uri":"https://tyrangyang.github.io/TyrangYang_blog/js-trick/"},{"categories":["Overview"],"content":"This posts only use as a remainder ","date":"2020-04-28","objectID":"https://tyrangyang.github.io/TyrangYang_blog/python-overview/:0:0","tags":["python"],"title":"Python Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/python-overview/"},{"categories":["Overview"],"content":"Variable ","date":"2020-04-28","objectID":"https://tyrangyang.github.io/TyrangYang_blog/python-overview/:1:0","tags":["python"],"title":"Python Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/python-overview/"},{"categories":["Overview"],"content":"Multiple assignment x, y, name, is_cool = (1, 2.5, 'a name', True) ","date":"2020-04-28","objectID":"https://tyrangyang.github.io/TyrangYang_blog/python-overview/:1:1","tags":["python"],"title":"Python Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/python-overview/"},{"categories":["Overview"],"content":"Casting x = str(x) # x will be string y = int(y) # y will be an integer ","date":"2020-04-28","objectID":"https://tyrangyang.github.io/TyrangYang_blog/python-overview/:1:2","tags":["python"],"title":"Python Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/python-overview/"},{"categories":["Overview"],"content":"String name = 'Brad' age = 37 print('name is' + name + ' and age is ' + str(age)) print('name is {name}and age is {age}'.format(name = name, age = age)) print(f'name is {name}and age is {age}') ","date":"2020-04-28","objectID":"https://tyrangyang.github.io/TyrangYang_blog/python-overview/:2:0","tags":["python"],"title":"Python Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/python-overview/"},{"categories":["Overview"],"content":"Methods # Capitalize string print(s.capitalize()) # Make all uppercase print(s.upper()) # Make all lower print(s.lower()) # Swap case print(s.swapcase()) # Get length print(len(s)) # Replace print(s.replace('world', 'everyone')) # Count sub = 'h' print(s.count(sub)) # Starts with print(s.startswith('hello')) # Ends with print(s.endswith('d')) # Split into a list print(s.split()) # Find position print(s.find('r')) # Is all alphanumeric print(s.isalnum()) # Is all alphabetic print(s.isalpha()) # Is all numeric print(s.isnumeric()) ","date":"2020-04-28","objectID":"https://tyrangyang.github.io/TyrangYang_blog/python-overview/:2:1","tags":["python"],"title":"Python Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/python-overview/"},{"categories":["Overview"],"content":"List A List is a collection which is ordered and changeable. Allows duplicate members. ","date":"2020-04-28","objectID":"https://tyrangyang.github.io/TyrangYang_blog/python-overview/:3:0","tags":["python"],"title":"Python Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/python-overview/"},{"categories":["Overview"],"content":"Tuple A Tuple is a collection which is ordered and unchangeable. Allows duplicate members. # Create tuple fruits = ('Apples', 'Oranges', 'Grapes') # Using a constructor # fruits2 = tuple(('Apples', 'Oranges', 'Grapes')) # Single value needs trailing comma fruits2 = ('Apples',) # Get value print(fruits[1]) # Can't change value # fruits[0] = 'Pears' # Delete tuple del fruits2 # Get length print(len(fruits)) ","date":"2020-04-28","objectID":"https://tyrangyang.github.io/TyrangYang_blog/python-overview/:4:0","tags":["python"],"title":"Python Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/python-overview/"},{"categories":["Overview"],"content":"set A Set is a collection which is unordered and unindexed. No duplicate members. # Create set fruits_set = {'Apples', 'Oranges', 'Mango'} # Check if in set print('Apples' in fruits_set) # Add to set fruits_set.add('Grape') # Remove from set fruits_set.remove('Grape') # Add duplicate fruits_set.add('Apples') # Clear set fruits_set.clear() # Delete not work # del fruits_set print(fruits_set) ","date":"2020-04-28","objectID":"https://tyrangyang.github.io/TyrangYang_blog/python-overview/:5:0","tags":["python"],"title":"Python Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/python-overview/"},{"categories":["Overview"],"content":"Dictionary # Create dict person = { 'first_name': 'John', 'last_name': 'Doe', 'age': 30 } # Use constructor # person2 = dict(first_name='Sara', last_name='Williams') # Get value print(person['first_name']) print(person.get('last_name')) # Add key/value person['phone'] = '555-555-5555' # Get dict keys print(person.keys()) # Get dict items print(person.items()) # Copy dict person2 = person.copy() person2['city'] = 'Boston' # Remove item del(person['age']) person.pop('phone') # Clear person.clear() # Get length print(len(person2)) # List of dict people = [ {'name': 'Martha', 'age': 30}, {'name': 'Kevin', 'age': 25} ] print(people[1]['name']) ","date":"2020-04-28","objectID":"https://tyrangyang.github.io/TyrangYang_blog/python-overview/:6:0","tags":["python"],"title":"Python Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/python-overview/"},{"categories":["Overview"],"content":"Functions A function is a block of code which only runs when it is called. In Python, we do not use curly brackets, we use indentation with tabs or spaces def sayHello(name='Sam'): print(f'Hello {name}') # Return values def getSum(num1, num2): total = num1 + num2 return total ","date":"2020-04-28","objectID":"https://tyrangyang.github.io/TyrangYang_blog/python-overview/:7:0","tags":["python"],"title":"Python Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/python-overview/"},{"categories":["Overview"],"content":"lambda function A lambda function is a small anonymous function. A lambda function can take any number of arguments, but can only have one expression. Very similar to JS arrow functions getSum2 = lambda num1, num2: num1 + num2 print(getSum(10, 3)) ","date":"2020-04-28","objectID":"https://tyrangyang.github.io/TyrangYang_blog/python-overview/:7:1","tags":["python"],"title":"Python Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/python-overview/"},{"categories":["Overview"],"content":"conditionals if elif else Comparison Operators (==, !=, \u003e, \u003c, \u003e=, \u003c=) - Used to compare values Logical operators (and, or, not) - Used to combine conditional statements Membership Operators (not, not in) - Membership operators are used to test if a sequence is presented in an object Identity Operators (is, is not) - Compare the objects, not if they are equal, but if they are actually the same object, with the same memory location: ","date":"2020-04-28","objectID":"https://tyrangyang.github.io/TyrangYang_blog/python-overview/:8:0","tags":["python"],"title":"Python Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/python-overview/"},{"categories":["Overview"],"content":"Loop people = ['John', 'Paul', 'Sara', 'Susan'] # Simple for loop for person in people: print(f'Current Person: {person}') # Break for person in people: if person == 'Sara': break print(f'Current Person: {person}') # Continue for person in people: if person == 'Sara': continue print(f'Current Person: {person}') # range for i in range(len(people)): print(people[i]) for i in range(0, 11): print(f'Number: {i}') # While loops execute a set of statements as long as a condition is true. count = 0 while count \u003c 10: print(f'Count: {count}') count += 1 ","date":"2020-04-28","objectID":"https://tyrangyang.github.io/TyrangYang_blog/python-overview/:9:0","tags":["python"],"title":"Python Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/python-overview/"},{"categories":["Overview"],"content":"Modules # Core modules import datetime from datetime import date import time from time import time # Pip module # pip3 install camelcase from camelcase import CamelCase # Import custom module import validator from validator import validate_email # today = datetime.date.today() today = date.today() # timestamp = time.time() timestamp = time() c = CamelCase() # print(c.hump('hello there world')) email = 'test#test.com' if validate_email(email): print('Email is valid') else: print('Email is bad') validator.py import re def validate_email(email): if len(email) \u003e 7: return bool(re.match(\"^.+@(\\[?)[a-zA-Z0-9-.]+.([a-zA-Z]{2,3}|[0-9]{1,3})(]?)$\", email)) ","date":"2020-04-28","objectID":"https://tyrangyang.github.io/TyrangYang_blog/python-overview/:10:0","tags":["python"],"title":"Python Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/python-overview/"},{"categories":["Overview"],"content":"Classes # Create class class User: # Constructor def __init__(self, name, email, age): self.name = name self.email = email self.age = age def greeting(self): return f'My name is {self.name}and I am {self.age}' def has_birthday(self): self.age += 1 # Extend class class Customer(User): # Constructor def __init__(self, name, email, age): self.name = name self.email = email self.age = age self.balance = 0 def set_balance(self, balance): self.balance = balance def greeting(self): return f'My name is {self.name}and I am {self.age}and my balance is {self.balance}' # Init user object brad = User('Brad Traversy', 'brad@gmail.com', 37) # Init customer object janet = Customer('Janet Johnson', 'janet@yahoo.com', 25) janet.has_birthday() janet.set_balance(500) print(janet.greeting()) brad.has_birthday() print(brad.greeting()) ","date":"2020-04-28","objectID":"https://tyrangyang.github.io/TyrangYang_blog/python-overview/:11:0","tags":["python"],"title":"Python Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/python-overview/"},{"categories":["Overview"],"content":"File # Open a file myFile = open('myfile.txt', 'w') # Get some info print('Name: ', myFile.name) print('Is Closed : ', myFile.closed) print('Opening Mode: ', myFile.mode) # Write to file myFile.write('I love Python') myFile.write(' and JavaScript') myFile.close() ## with as will automatic run close() with open('myfile.txt', 'w') as myFile: pass # Append to file myFile = open('myfile.txt', 'a') myFile.write(' I also like PHP') myFile.close() # Read from file myFile = open('myfile.txt', 'r+') text = myFile.read(100) print(text) myFile.close() ## Read one line and read all line myFile = open('myfile.txt', 'r+') print(myFile.readline()) print(myFile.readlines()) myFile.close() ","date":"2020-04-28","objectID":"https://tyrangyang.github.io/TyrangYang_blog/python-overview/:12:0","tags":["python"],"title":"Python Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/python-overview/"},{"categories":["Overview"],"content":"Python \u0026 Json JSON is commonly used with data APIS. Here how we can parse JSON into a Python dictionary import json # Sample JSON userJSON = '{\"first_name\": \"John\", \"last_name\": \"Doe\", \"age\": 30}' # Parse to dict user = json.loads(userJSON) # print(user) # print(user['first_name']) car = {'make': 'Ford', 'model': 'Mustang', 'year': 1970} carJSON = json.dumps(car) print(carJSON) ","date":"2020-04-28","objectID":"https://tyrangyang.github.io/TyrangYang_blog/python-overview/:13:0","tags":["python"],"title":"Python Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/python-overview/"},{"categories":["Overview"],"content":"chmod is linux command to control file permission ","date":"2020-04-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/chmod/:0:0","tags":["linux","chmod","terminal"],"title":"chmod Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/chmod/"},{"categories":["Overview"],"content":"usage chmod [u|g|o|a][=|+|-] [r|w|x] u =\u003e user g =\u003e group o =\u003e other a =\u003e all r =\u003e read w =\u003e write x =\u003e execute ","date":"2020-04-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/chmod/:1:0","tags":["linux","chmod","terminal"],"title":"chmod Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/chmod/"},{"categories":["Overview"],"content":"example chmod +wr test.txt give write and read permission for user chmod -r test.txt remove read permission for user chmod g=wrx test.txt give write, read and execute permission for group ","date":"2020-04-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/chmod/:1:1","tags":["linux","chmod","terminal"],"title":"chmod Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/chmod/"},{"categories":["Overview"],"content":"use number specific the bits 011101110111 =\u003e -rwx-rwx-rwx r = 4; w = 2; x = 1; rwx = 4+2+1; rw = 4+2 chmod u=rwx g=rw o=x test.txt \u003c=\u003e chmod 761 test.txt ","date":"2020-04-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/chmod/:2:0","tags":["linux","chmod","terminal"],"title":"chmod Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/chmod/"},{"categories":["Overview"],"content":"socket.io enable realtime, bidirectional communication for Nodejs ","date":"2020-04-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/socketio/:0:0","tags":["socketIo","nodejs"],"title":"SocketIo Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/socketio/"},{"categories":["Overview"],"content":"Backend We use Express as backend framework. const express = require('express'); const path = require('path'); const http = require('http'); const socket_io = require('socket.io'); const app = express(); const server = http.createServer(app); const io = socket_io(server); io.on('connection', (server_socket) =\u003e { // ... } ","date":"2020-04-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/socketio/:1:0","tags":["socketIo","nodejs"],"title":"SocketIo Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/socketio/"},{"categories":["Overview"],"content":"Frontend bring client side socket.io in your html file \u003cscript src=\"/socket.io/socket.io.js\"\u003e\u003c/script\u003e connect in your frontend script file const clientSocket = io(); ","date":"2020-04-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/socketio/:2:0","tags":["socketIo","nodejs"],"title":"SocketIo Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/socketio/"},{"categories":["Overview"],"content":"Function ","date":"2020-04-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/socketio/:3:0","tags":["socketIo","nodejs"],"title":"SocketIo Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/socketio/"},{"categories":["Overview"],"content":"Receive -\u003e on() socket.on('\u003chead\u003e', (data) =\u003e { // deal with data }); ","date":"2020-04-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/socketio/:3:1","tags":["socketIo","nodejs"],"title":"SocketIo Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/socketio/"},{"categories":["Overview"],"content":"Send -\u003e emit() socket.emit('\u003chead\u003e', data); ","date":"2020-04-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/socketio/:3:2","tags":["socketIo","nodejs"],"title":"SocketIo Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/socketio/"},{"categories":["Overview"],"content":"Send to all client socket except itself -\u003e socket.broadcast.emit() socket.broadcast.emit('\u003chead\u003e', data); ","date":"2020-04-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/socketio/:3:3","tags":["socketIo","nodejs"],"title":"SocketIo Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/socketio/"},{"categories":["Overview"],"content":"Sent to all client socket include itself -\u003e io.emit() io.emit('\u003chead\u003e', data); ","date":"2020-04-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/socketio/:3:4","tags":["socketIo","nodejs"],"title":"SocketIo Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/socketio/"},{"categories":["Overview"],"content":"Group socket together socket.join('\u003cname\u003e'); ","date":"2020-04-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/socketio/:3:5","tags":["socketIo","nodejs"],"title":"SocketIo Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/socketio/"},{"categories":["Overview"],"content":"Send to a group socket.to('\u003cname\u003e').emit(); socket.broadcast.to('\u003cname\u003e').emit(); io.to('\u003cname\u003e').emit(); ","date":"2020-04-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/socketio/:3:6","tags":["socketIo","nodejs"],"title":"SocketIo Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/socketio/"},{"categories":["Overview"],"content":"ssh-keygen ssh-keygen -b specific the number of bits(1024 2048 4069) -m specific type -y get public key -f specific file name ","date":"2020-04-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/ssh/:1:0","tags":["ssh","chmod"],"title":"SSH Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/ssh/"},{"categories":["Overview"],"content":"public key public key should give to server. Usually put in file ~/.ssh/authorized_key ","date":"2020-04-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/ssh/:1:1","tags":["ssh","chmod"],"title":"SSH Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/ssh/"},{"categories":["Overview"],"content":"access via SSH ssh \u003cusername\u003e@\u003chostname | ip address\u003e ","date":"2020-04-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/ssh/:2:0","tags":["ssh","chmod"],"title":"SSH Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/ssh/"},{"categories":["Heroku"],"content":"Heroku can help us deploy our application(back end) rapidly and easy ","date":"2020-04-15","objectID":"https://tyrangyang.github.io/TyrangYang_blog/heroku/:0:0","tags":["heroku","dev","deploy","sever"],"title":"Heroku overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/heroku/"},{"categories":["Heroku"],"content":"deploy The only we need to take care is the PORT of your app. You have to use the PORT in environment. In Node.js PORT = process.env.PORT || 3000; // 3000 can be anything else ","date":"2020-04-15","objectID":"https://tyrangyang.github.io/TyrangYang_blog/heroku/:1:0","tags":["heroku","dev","deploy","sever"],"title":"Heroku overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/heroku/"},{"categories":["Heroku"],"content":"heroku cli Home page heroku login heroku create git push heroku master ","date":"2020-04-15","objectID":"https://tyrangyang.github.io/TyrangYang_blog/heroku/:2:0","tags":["heroku","dev","deploy","sever"],"title":"Heroku overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/heroku/"},{"categories":["Overview"],"content":"Canvas is a new feature since html5 that allows you draw something on your web page Reference from MDN ","date":"2020-04-08","objectID":"https://tyrangyang.github.io/TyrangYang_blog/canvas/:0:0","tags":["html","javascript","css"],"title":"Canvas in html5","uri":"https://tyrangyang.github.io/TyrangYang_blog/canvas/"},{"categories":["Overview"],"content":"Project by using Canvas Chaos Game: Use canvas to draw the chaos game Draw panel with socket.io: A scribble panel with Websocket. Multi user can draw panel on simultaneously ","date":"2020-04-08","objectID":"https://tyrangyang.github.io/TyrangYang_blog/canvas/:1:0","tags":["html","javascript","css"],"title":"Canvas in html5","uri":"https://tyrangyang.github.io/TyrangYang_blog/canvas/"},{"categories":["Overview"],"content":"Draw on canvas ","date":"2020-04-08","objectID":"https://tyrangyang.github.io/TyrangYang_blog/canvas/:2:0","tags":["html","javascript","css"],"title":"Canvas in html5","uri":"https://tyrangyang.github.io/TyrangYang_blog/canvas/"},{"categories":["Overview"],"content":"Get start Jquery to get canvas. ctx mean canvas content which used to draw on canvas const canvas = document.getElementById('canvas'); const ctx = canvas.getContext('2d'); ","date":"2020-04-08","objectID":"https://tyrangyang.github.io/TyrangYang_blog/canvas/:2:1","tags":["html","javascript","css"],"title":"Canvas in html5","uri":"https://tyrangyang.github.io/TyrangYang_blog/canvas/"},{"categories":["Overview"],"content":"fill \u0026 stroke rectangle // fillRect() ctx.fillStyle = 'red'; ctx.fillRect(20, 20, 150, 100); // up left point and weight and height // strokeRect() ctx.lineWidth = 4; ctx.strokeStyle = '#555'; ctx.strokeRect(180, 130, 150, 100); ","date":"2020-04-08","objectID":"https://tyrangyang.github.io/TyrangYang_blog/canvas/:2:2","tags":["html","javascript","css"],"title":"Canvas in html5","uri":"https://tyrangyang.github.io/TyrangYang_blog/canvas/"},{"categories":["Overview"],"content":"Text // fillText(); ctx.font = '30px Arial'; ctx.fillStyle = 'green'; ctx.fillText('hello world', 400, 100); // strokeText(); ctx.lineWidth = 1; ctx.strokeStyle = 'red'; ctx.strokeText('hello world', 400, 200); ","date":"2020-04-08","objectID":"https://tyrangyang.github.io/TyrangYang_blog/canvas/:2:3","tags":["html","javascript","css"],"title":"Canvas in html5","uri":"https://tyrangyang.github.io/TyrangYang_blog/canvas/"},{"categories":["Overview"],"content":"Path moveTo set the start point and lineTo set the end point. ctx.beginPath(); ctx.moveTo(20, 20); ctx.lineTo(150, 150); ctx.lineTo(20, 150); ctx.lineTo(20, 20); // or ctx.closePath(); ctx.stroke(); ctx.fillStyle = 'coral'; ctx.fill(); ","date":"2020-04-08","objectID":"https://tyrangyang.github.io/TyrangYang_blog/canvas/:2:4","tags":["html","javascript","css"],"title":"Canvas in html5","uri":"https://tyrangyang.github.io/TyrangYang_blog/canvas/"},{"categories":["Overview"],"content":"arc arc(centerX, centerY, Radius, startAngle, endAngel, isClockWise) // arc(cycle) ctx.beginPath(); const centerX = canvas.width / 2; const centerY = canvas.height / 2; // ctx.moveTo(0, 0); ctx.arc(centerX, centerY, 200, 0, Math.PI * 2); ctx.moveTo(centerX + 100, centerY); ctx.arc(centerX, centerY, 100, 0, Math.PI, false); ctx.moveTo(centerX - 60, centerY - 80); ctx.arc(centerX - 80, centerY - 80, 20, 0, Math.PI * 2); ctx.moveTo(centerX + 100, centerY - 80); ctx.arc(centerX + 80, centerY - 80, 20, 0, Math.PI * 2); ctx.stroke(); ","date":"2020-04-08","objectID":"https://tyrangyang.github.io/TyrangYang_blog/canvas/:2:5","tags":["html","javascript","css"],"title":"Canvas in html5","uri":"https://tyrangyang.github.io/TyrangYang_blog/canvas/"},{"categories":["Overview"],"content":"locate a point on canvas When you add listener for canvas, event object have e.clientX and e.clientY to locate the position one canvas. Or using e.pageX - canvas.offsetLeft and e.pageY - canvas.offsetTop. (This means the position on the page, include scroll down, minus canvas offset) h ","date":"2020-04-08","objectID":"https://tyrangyang.github.io/TyrangYang_blog/canvas/:2:6","tags":["html","javascript","css"],"title":"Canvas in html5","uri":"https://tyrangyang.github.io/TyrangYang_blog/canvas/"},{"categories":["Overview"],"content":"Reference https://wesbos.com/html5-canvas-websockets-nodejs/ \u0026\u0026 https://stackoverflow.com/questions/2368784/draw-on-html5-canvas-using-a-mouse ","date":"2020-04-08","objectID":"https://tyrangyang.github.io/TyrangYang_blog/canvas/:3:0","tags":["html","javascript","css"],"title":"Canvas in html5","uri":"https://tyrangyang.github.io/TyrangYang_blog/canvas/"},{"categories":["Overview"],"content":" Show all function: Try String.prototype \u0026 String in browser console. ","date":"2020-04-07","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/:0:0","tags":["javascript","nodejs","string"],"title":"All String Method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/"},{"categories":["Overview"],"content":"fromCharCode console.log(String.fromCharCode(189, 43, 190, 61)); // expected output: \"½+¾=\" ","date":"2020-04-07","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/:1:0","tags":["javascript","nodejs","string"],"title":"All String Method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/"},{"categories":["Overview"],"content":"fromCodePoint console.log(String.fromCodePoint(9731, 9733, 9842, 0x2f804)); // expected output: \"☃★♲你\" ","date":"2020-04-07","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/:2:0","tags":["javascript","nodejs","string"],"title":"All String Method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/"},{"categories":["Overview"],"content":"raw // Create a variable that uses a Windows // path without escaping the backslashes: const filePath = String.raw`C:\\Development\\profile\\aboutme.html`; console.log(`The file was uploaded from: ${filePath}`); // expected output: \"The file was uploaded from: C:\\Development\\profile\\aboutme.html\" ","date":"2020-04-07","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/:3:0","tags":["javascript","nodejs","string"],"title":"All String Method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/"},{"categories":["Overview"],"content":"charAt const sentence = 'The quick brown fox jumps over the lazy dog.'; const index = 4; console.log(`The character at index ${index}is ${sentence.charAt(index)}`); // expected output: \"The character at index 4 is q\" ","date":"2020-04-07","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/:4:0","tags":["javascript","nodejs","string"],"title":"All String Method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/"},{"categories":["Overview"],"content":"charCodeAt const sentence = 'The quick brown fox jumps over the lazy dog.'; const index = 4; console.log( `The character code ${sentence.charCodeAt( index )}is equal to ${sentence.charAt(index)}` ); // expected output: \"The character code 113 is equal to q\" ","date":"2020-04-07","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/:5:0","tags":["javascript","nodejs","string"],"title":"All String Method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/"},{"categories":["Overview"],"content":"codePointAt const icons = '☃★♲'; console.log(icons.codePointAt(1)); // expected output: \"9733\" ","date":"2020-04-07","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/:6:0","tags":["javascript","nodejs","string"],"title":"All String Method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/"},{"categories":["Overview"],"content":"concat const str1 = 'Hello'; const str2 = 'World'; console.log(str1.concat(' ', str2)); // expected output: \"Hello World\" console.log(str2.concat(', ', str1)); // expected output: \"World, Hello\" ","date":"2020-04-07","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/:7:0","tags":["javascript","nodejs","string"],"title":"All String Method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/"},{"categories":["Overview"],"content":"startsWith const str1 = 'Saturday night plans'; console.log(str1.startsWith('Sat')); // expected output: true console.log(str1.startsWith('Sat', 3)); // expected output: false console.log(str1.startsWith('ur', 3)); // true ","date":"2020-04-07","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/:8:0","tags":["javascript","nodejs","string"],"title":"All String Method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/"},{"categories":["Overview"],"content":"endsWith const str1 = 'Cats are the best!'; // len == 18 console.log(str1.endsWith('best', 17)); // expected output: true const str2 = 'Is this a question'; console.log(str2.endsWith('?')); // expected output: false ","date":"2020-04-07","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/:9:0","tags":["javascript","nodejs","string"],"title":"All String Method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/"},{"categories":["Overview"],"content":"includes const sentence = 'The quick brown fox jumps over the lazy dog.'; const word = 'fox'; console.log( `The word \"${word}\" ${ sentence.includes(word) ? 'is' : 'is not' }in the sentence` ); // expected output: \"The word \"fox\" is in the sentence\" ","date":"2020-04-07","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/:10:0","tags":["javascript","nodejs","string"],"title":"All String Method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/"},{"categories":["Overview"],"content":"indexOf const paragraph = 'The quick brown fox jumps over the lazy dog. If the dog barked, was it really lazy?'; const searchTerm = 'dog'; const indexOfFirst = paragraph.indexOf(searchTerm); console.log( `The index of the first \"${searchTerm}\" from the beginning is ${indexOfFirst}` ); // expected output: \"The index of the first \"dog\" from the beginning is 40\" console.log( `The index of the 2nd \"${searchTerm}\" is ${paragraph.indexOf( searchTerm, indexOfFirst + 1 )}` ); // expected output: \"The index of the 2nd \"dog\" is 52\" ","date":"2020-04-07","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/:11:0","tags":["javascript","nodejs","string"],"title":"All String Method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/"},{"categories":["Overview"],"content":"lastIndexOf const paragraph = 'The quick brown fox jumps over the lazy dog. If the dog barked, was it really lazy?'; const searchTerm = 'dog'; console.log( `The index of the first \"${searchTerm}\" from the end is ${paragraph.lastIndexOf( searchTerm )}` ); // expected output: \"The index of the first \"dog\" from the end is 52\" ","date":"2020-04-07","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/:12:0","tags":["javascript","nodejs","string"],"title":"All String Method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/"},{"categories":["Overview"],"content":"localeCompare const a = 'réservé'; // with accents, lowercase const b = 'RESERVE'; // no accents, uppercase console.log(a.localeCompare(b)); // expected output: 1 console.log(a.localeCompare(b, 'en', { sensitivity: 'base' })); // expected output: 0 ","date":"2020-04-07","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/:13:0","tags":["javascript","nodejs","string"],"title":"All String Method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/"},{"categories":["Overview"],"content":"match const paragraph = 'The quick brown fox jumps over the lazy dog. It barked.'; const regex = /[A-Z]/g; const found = paragraph.match(regex); console.log(found); // expected output: Array [\"T\", \"I\"] ","date":"2020-04-07","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/:14:0","tags":["javascript","nodejs","string"],"title":"All String Method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/"},{"categories":["Overview"],"content":"matchAll The matchAll() method returns an iterator of all results matching a string against a regular expression, including capturing groups. const regexp = /t(e)(st(\\d?))/g; const str = 'test1test2'; const array = [...str.matchAll(regexp)]; console.log(array); // [[\"test1\", \"e\", \"st1\", \"1\"] [\"test2\", \"e\", \"st2\", \"2\"]] ","date":"2020-04-07","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/:15:0","tags":["javascript","nodejs","string"],"title":"All String Method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/"},{"categories":["Overview"],"content":"normalize const name1 = '\\u0041\\u006d\\u00e9\\u006c\\u0069\\u0065'; const name2 = '\\u0041\\u006d\\u0065\\u0301\\u006c\\u0069\\u0065'; console.log(`${name1}, ${name2}`); // expected output: \"Amélie, Amélie\" console.log(name1 === name2); // expected output: false console.log(name1.length === name2.length); // expected output: false const name1NFC = name1.normalize('NFC'); const name2NFC = name2.normalize('NFC'); console.log(`${name1NFC}, ${name2NFC}`); // expected output: \"Amélie, Amélie\" console.log(name1NFC === name2NFC); // expected output: true console.log(name1NFC.length === name2NFC.length); // expected output: true ","date":"2020-04-07","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/:16:0","tags":["javascript","nodejs","string"],"title":"All String Method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/"},{"categories":["Overview"],"content":"padEnd const str1 = 'Breaded Mushrooms'; console.log(str1.padEnd(25, '.')); // expected output: \"Breaded Mushrooms........\" // new str len == 25 const str2 = '200'; console.log(str2.padEnd(5)); // expected output: \"200 \" ","date":"2020-04-07","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/:17:0","tags":["javascript","nodejs","string"],"title":"All String Method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/"},{"categories":["Overview"],"content":"padStart const str1 = '5'; console.log(str1.padStart(2, '0')); // expected output: \"05\" const fullNumber = '2034399002125581'; const last4Digits = fullNumber.slice(-4); const maskedNumber = last4Digits.padStart(fullNumber.length, '*'); console.log(maskedNumber); // expected output: \"************5581\" ","date":"2020-04-07","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/:18:0","tags":["javascript","nodejs","string"],"title":"All String Method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/"},{"categories":["Overview"],"content":"repeat const chorus = \"Because I'm happy. \"; console.log(`Chorus lyrics for \"Happy\": ${chorus.repeat(3)}`); //\"Chorus lyrics for \"Happy\": Because I'm happy. Because I'm happy. Because I'm happy. \" ","date":"2020-04-07","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/:19:0","tags":["javascript","nodejs","string"],"title":"All String Method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/"},{"categories":["Overview"],"content":"replace only replace the first match. If wanna match all use global flag (g) const p = 'The quick brown fox jumps over the lazy dog. If the dog reacted, was it really lazy?'; const regex = /dog/gi; console.log(p.replace(regex, 'ferret')); // expected output: \"The quick brown fox jumps over the lazy ferret. If the ferret reacted, was it really lazy?\" console.log(p.replace('dog', 'monkey')); // expected output: \"The quick brown fox jumps over the lazy monkey. If the dog reacted, was it really lazy?\" ","date":"2020-04-07","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/:20:0","tags":["javascript","nodejs","string"],"title":"All String Method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/"},{"categories":["Overview"],"content":"replaceAll using a regexp you must have to set the global (“g”) flag; const p = 'The quick brown fox jumps over the lazy dog. If the dog reacted, was it really lazy?'; const regex = /dog/gi; console.log(p.replaceAll(regex, 'ferret')); // expected output: \"The quick brown fox jumps over the lazy ferret. If the ferret reacted, was it really lazy?\" console.log(p.replaceAll('dog', 'monkey')); // expected output: \"The quick brown fox jumps over the lazy monkey. If the monkey reacted, was it really lazy?\" ","date":"2020-04-07","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/:21:0","tags":["javascript","nodejs","string"],"title":"All String Method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/"},{"categories":["Overview"],"content":"search const paragraph = 'The quick brown fox jumps over the lazy dog. If the dog barked, was it really lazy?'; // any character that is not a word character or whitespace const regex = /[^\\w\\s]/g; console.log(paragraph.search(regex)); // expected output: 43 console.log(paragraph[paragraph.search(regex)]); // expected output: \".\" ","date":"2020-04-07","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/:22:0","tags":["javascript","nodejs","string"],"title":"All String Method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/"},{"categories":["Overview"],"content":"slice const str = 'The quick brown fox jumps over the lazy dog.'; console.log(str.slice(31)); // expected output: \"the lazy dog.\" console.log(str.slice(4, 19)); // expected output: \"quick brown fox\" console.log(str.slice(-4)); // expected output: \"dog.\" console.log(str.slice(-9, -5)); // expected output: \"lazy\" ","date":"2020-04-07","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/:23:0","tags":["javascript","nodejs","string"],"title":"All String Method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/"},{"categories":["Overview"],"content":"split const str = 'The quick brown fox jumps over the lazy dog.'; const words = str.split(' '); console.log(words[3]); // expected output: \"fox\" const chars = str.split(''); console.log(chars[8]); // expected output: \"k\" const strCopy = str.split(); console.log(strCopy); // expected output: Array [\"The quick brown fox jumps over the lazy dog.\"] ","date":"2020-04-07","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/:24:0","tags":["javascript","nodejs","string"],"title":"All String Method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/"},{"categories":["Overview"],"content":"substring const str = 'Mozilla'; console.log(str.substring(1, 3)); // expected output: \"oz\" console.log(str.substring(2)); // expected output: \"zilla\" ","date":"2020-04-07","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/:25:0","tags":["javascript","nodejs","string"],"title":"All String Method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/"},{"categories":["Overview"],"content":"toLocaleLowerCase const dotted = 'İstanbul'; console.log(`EN-US: ${dotted.toLocaleLowerCase('en-US')}`); // expected output: \"i̇stanbul\" console.log(`TR: ${dotted.toLocaleLowerCase('tr')}`); // expected output: \"istanbul\" ","date":"2020-04-07","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/:26:0","tags":["javascript","nodejs","string"],"title":"All String Method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/"},{"categories":["Overview"],"content":"toLocaleUpperCase const city = 'istanbul'; console.log(city.toLocaleUpperCase('en-US')); // expected output: \"ISTANBUL\" console.log(city.toLocaleUpperCase('TR')); // expected output: \"İSTANBUL\" ","date":"2020-04-07","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/:27:0","tags":["javascript","nodejs","string"],"title":"All String Method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/"},{"categories":["Overview"],"content":"toLowerCase const sentence = 'The quick brown fox jumps over the lazy dog.'; console.log(sentence.toLowerCase()); // expected output: \"the quick brown fox jumps over the lazy dog.\" ","date":"2020-04-07","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/:28:0","tags":["javascript","nodejs","string"],"title":"All String Method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/"},{"categories":["Overview"],"content":"toUpperCase const sentence = 'The quick brown fox jumps over the lazy dog.'; console.log(sentence.toUpperCase()); // expected output: \"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.\" ","date":"2020-04-07","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/:29:0","tags":["javascript","nodejs","string"],"title":"All String Method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/"},{"categories":["Overview"],"content":"toString const stringObj = new String('foo'); console.log(stringObj); // expected output: String { \"foo\" } console.log(stringObj.toString()); // expected output: \"foo\" ","date":"2020-04-07","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/:30:0","tags":["javascript","nodejs","string"],"title":"All String Method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/"},{"categories":["Overview"],"content":"trim const greeting = ' Hello world! '; console.log(greeting); // expected output: \" Hello world! \"; console.log(greeting.trim()); // expected output: \"Hello world!\"; ","date":"2020-04-07","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/:31:0","tags":["javascript","nodejs","string"],"title":"All String Method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/"},{"categories":["Overview"],"content":"trimEnd const greeting = ' Hello world! '; console.log(greeting); // expected output: \" Hello world! \"; console.log(greeting.trimEnd()); // expected output: \" Hello world!\"; ","date":"2020-04-07","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/:32:0","tags":["javascript","nodejs","string"],"title":"All String Method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/"},{"categories":["Overview"],"content":"trimStart const greeting = ' Hello world! '; console.log(greeting); // expected output: \" Hello world! \"; console.log(greeting.trimStart()); // expected output: \"Hello world! \"; ","date":"2020-04-07","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/:33:0","tags":["javascript","nodejs","string"],"title":"All String Method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/"},{"categories":["Overview"],"content":"trimLeft alias of trimStart() ","date":"2020-04-07","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/:34:0","tags":["javascript","nodejs","string"],"title":"All String Method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/"},{"categories":["Overview"],"content":"trimRight alias of trimEnd() ","date":"2020-04-07","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/:35:0","tags":["javascript","nodejs","string"],"title":"All String Method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/"},{"categories":["Overview"],"content":"valueOf const stringObj = new String('foo'); console.log(stringObj); // expected output: String { \"foo\" } console.log(stringObj.valueOf()); // expected output: \"foo\" ","date":"2020-04-07","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/:36:0","tags":["javascript","nodejs","string"],"title":"All String Method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-string-method-in-javascript/"},{"categories":["Overview"],"content":" Show all function: Try Array.prototype \u0026 Array in browser console. ","date":"2020-04-06","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/:0:0","tags":["javascript","nodejs","array"],"title":"All array method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/"},{"categories":["Overview"],"content":"foreach let numbers = [1, 2, 3, 4, 5]; // each element in a func numbers.forEach((element, index, arr) =\u003e { console.log(`a[${index}] = ${element}`); }); // a[0] = 1 // a[1] = 2 // a[2] = 3 // a[3] = 4 // a[4] = 5 ","date":"2020-04-06","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/:1:0","tags":["javascript","nodejs","array"],"title":"All array method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/"},{"categories":["Overview"],"content":"map let numbers = [1, 2, 3, 4, 5]; // [] =\u003e [] (some size) let numbers2 = numbers.map((e, index, arr) =\u003e { return e * index; }); console.log(numbers2); // [0, 2, 6, 12, 20] ","date":"2020-04-06","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/:2:0","tags":["javascript","nodejs","array"],"title":"All array method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/"},{"categories":["Overview"],"content":"filter let numbers = [1, 2, 3, 4, 5]; // [] =\u003e fuc =\u003e [] (some left) let numbers3 = numbers.filter((e, index, arr) =\u003e { return arr.indexOf(e) === index; }); // remove duplication ","date":"2020-04-06","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/:3:0","tags":["javascript","nodejs","array"],"title":"All array method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/"},{"categories":["Overview"],"content":"reduce let numbers = [1, 2, 3, 4, 5]; // [] =\u003e 1 let numbers4 = numbers.reduce((prev, cur, curIndex, arr) =\u003e { return prev + cur; }, 0); console.log(numbers4); // 15 let maxValue = numbers.reduce((prev, cur) =\u003e { if (prev \u003e cur) return prev; else return cur; }, -Infinity); console.log(maxValue); // 5 ","date":"2020-04-06","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/:4:0","tags":["javascript","nodejs","array"],"title":"All array method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/"},{"categories":["Overview"],"content":"slice let numbers = [1, 2, 3, 4, 5]; // [start, end) // [start to end) let first2 = numbers.slice(0, 2); let shallowCopy = numbers.slice(); // could shallow copy an array shallowCopy[5] = 100; let last3 = numbers.slice(-3); let startFrom1 = numbers.slice(1); console.log([first2, shallowCopy, last3, startFrom1]); // [ [ 1, 2 ], [ 1, 2, 3, 4, 5, 100 ], [ 3, 4, 5 ], [ 2, 3, 4, 5 ] ] ","date":"2020-04-06","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/:5:0","tags":["javascript","nodejs","array"],"title":"All array method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/"},{"categories":["Overview"],"content":"splice let numbers = [1, 2, 3, 4, 5]; let deleted = numbers.splice(1, 2, 'add', 'add'); // (start point, num, ...add-in) console.log(numbers, deleted); //[ 1, 'add', 'add', 4, 5 ] [ 2, 3 ] ","date":"2020-04-06","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/:6:0","tags":["javascript","nodejs","array"],"title":"All array method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/"},{"categories":["Overview"],"content":"sort let numbers = [75, 22, 18, 10, 100, 214, 1]; numbers.sort(); // not sort by number // If compareFn not provided, sort everything base on string. console.log(numbers); // [1, 10, 100, 18, 214, 22, 75] // CompareFn return a Number. If return \u003c 0, a goes first. If return \u003e 0, b goes first. If return 0, not change numbers.sort((a, b) =\u003e { return a - b; // if use a \u003e b, function only return 0 and 1. }); console.log(numbers); // [ 1, 10, 18, 22, 75, 100, 214] ","date":"2020-04-06","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/:7:0","tags":["javascript","nodejs","array"],"title":"All array method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/"},{"categories":["Overview"],"content":"concat let a = [1, 2, 3]; let b = [10, 20, 30]; let c = a.concat(b); let d = a.concat(c, 100, a); console.log(c); // [ 1, 2, 3, 10, 20, 30 ] console.log(d); // [ 1, 2, 3, 1, 2, 3, 10, 20, 30, 100, 1, 2, 3] shallowCopy = d.concat(); // also a shallow copy ","date":"2020-04-06","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/:8:0","tags":["javascript","nodejs","array"],"title":"All array method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/"},{"categories":["Overview"],"content":"fill let numbers = [1, 2, 3, 4, 5]; // fill let out = numbers.fill(0, 2, 4); // (value, start, end) console.log(out); // [ 1, 2, 0, 0, 5 ] console.log(numbers); // [ 1, 2, 0, 0, 5 ] let fillInNumber = (n) =\u003e { return Array(n) .fill(0) .map((_, idx) =\u003e idx); }; console.log(fillInNumber(10)); // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]; ","date":"2020-04-06","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/:9:0","tags":["javascript","nodejs","array"],"title":"All array method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/"},{"categories":["Overview"],"content":"include let names = ['andy', 'bob', 'eve']; console.log(names.includes('bob')); // true ","date":"2020-04-06","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/:10:0","tags":["javascript","nodejs","array"],"title":"All array method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/"},{"categories":["Overview"],"content":"join let names = ['andy', 'bob', 'eve']; let res = names.join(); console.log(res); // andy,bob,eve res = names.join(' - '); console.log(res); // andy - bob - eve ","date":"2020-04-06","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/:11:0","tags":["javascript","nodejs","array"],"title":"All array method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/"},{"categories":["Overview"],"content":"reverse let names = ['andy', 'bob', 'eve']; let str = 'coding is fun'; res = str.split(' ').reverse().join(' '); console.log(res); // fun is coding ","date":"2020-04-06","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/:12:0","tags":["javascript","nodejs","array"],"title":"All array method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/"},{"categories":["Overview"],"content":"push let numbers = [0]; let len = numbers.push(1, 2, 3, 4, 5); console.log(len); // 6 console.log(numbers); // [ 0, 1, 2, 3, 4, 5 ] ","date":"2020-04-06","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/:13:0","tags":["javascript","nodejs","array"],"title":"All array method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/"},{"categories":["Overview"],"content":"pop let numbers = [1, 2, 3, 4, 5]; let lastItem = numbers.pop(); console.log(lastItem); // 5 console.log(numbers); // [1,2,3,4] ","date":"2020-04-06","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/:14:0","tags":["javascript","nodejs","array"],"title":"All array method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/"},{"categories":["Overview"],"content":"unshift let numbers = [1, 2, 3, 4, 5]; len = numbers.unshift(-1, -2); // push at begin console.log(len); // 7 console.log(numbers); // [-1, -2, 1, 2, 3, 4, 5] ","date":"2020-04-06","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/:15:0","tags":["javascript","nodejs","array"],"title":"All array method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/"},{"categories":["Overview"],"content":"shift let numbers = [1, 2, 3, 4, 5]; let res = numbers.shift(); console.log(res, numbers); // 1 [2, 3, 4, 5] ","date":"2020-04-06","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/:16:0","tags":["javascript","nodejs","array"],"title":"All array method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/"},{"categories":["Overview"],"content":"indexOf \u0026 lastIndexOf let names = ['florin', 'ivan', 'liam', 'ivan', 'liam']; let idx = names.indexOf('jay'); console.log(idx); // -1 idx = names.indexOf('liam'); // return first index console.log(idx); // 2 idx = names.lastIndexOf('liam'); console.log(idx); // 4 ","date":"2020-04-06","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/:17:0","tags":["javascript","nodejs","array"],"title":"All array method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/"},{"categories":["Overview"],"content":"every let numbers = [1, 2, 3, 4, 5]; // each =\u003e bool let res = numbers.every((each) =\u003e { return each \u003e 0; }); console.log(res); // true const people = [{ name: '1' }, { name: '1' }, { name: '1' }, { surname: '1' }]; res = people.every((each) =\u003e each.name !== undefined); console.log(res); // false ","date":"2020-04-06","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/:18:0","tags":["javascript","nodejs","array"],"title":"All array method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/"},{"categories":["Overview"],"content":"some let numbers = [1, 2, 3, 4, 5]; let res = numbers.some((each) =\u003e { return each \u003e 4; }); console.log(res); // true ","date":"2020-04-06","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/:19:0","tags":["javascript","nodejs","array"],"title":"All array method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/"},{"categories":["Overview"],"content":"find let people = [ { name: 'florin', age: 25, }, { name: 'ivan', age: 20, }, { name: 'lima', age: 18, }, ]; let res = people.find((each) =\u003e { return each.name == 'ivan'; }).age; console.log(res); // 20 ","date":"2020-04-06","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/:20:0","tags":["javascript","nodejs","array"],"title":"All array method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/"},{"categories":["Overview"],"content":"findIndex const numbers = [1, 2, 3, 4, 5]; let res = numbers.findIndex((each) =\u003e { return each === 4; }); console.log(res); // 3 ","date":"2020-04-06","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/:21:0","tags":["javascript","nodejs","array"],"title":"All array method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/"},{"categories":["Overview"],"content":"flat let array = [1, [2, [3, [4, [5]]]]]; console.log(array.flat()); // [1, 2, [3, [4, [5]]]] console.log(array.flat(3)); // [1, 2, 3, 4, [5]] console.log(array.flat(Infinity)); // [1, 2, 3, 4, 5] ","date":"2020-04-06","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/:22:0","tags":["javascript","nodejs","array"],"title":"All array method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/"},{"categories":["Overview"],"content":"flatMap ","date":"2020-04-06","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/:23:0","tags":["javascript","nodejs","array"],"title":"All array method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/"},{"categories":["Overview"],"content":"keys \u0026 values \u0026 entries These 3 methods returns a new Array Iterator object let numbers = [10, 20, 30, 40, 50]; let iterator_keys = numbers.keys(); console.log(iterator_keys.next().value); // 0 for (let i of iterator_keys) { console.log(i); // 1 2 3 4 } let iterator_values = numbers.values(); console.log(iterator_values.next().value); // 10 for (let i of iterator_values) { console.log(i); // 20 30 40 50 } let iterator = numbers.entries(); console.log(iterator.next().value); // [0,10] for (let i of iterator) { console.log(i); // [1,20] [2,30] [3,40] [4,50] } ","date":"2020-04-06","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/:24:0","tags":["javascript","nodejs","array"],"title":"All array method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/"},{"categories":["Overview"],"content":"copyWithin const array1 = ['a', 'b', 'c', 'd', 'e']; // copy to index 0 the element at index 3 console.log(array1.copyWithin(0, 3, 4)); // expected output: Array [\"d\", \"b\", \"c\", \"d\", \"e\"] // copy to index 1 all elements from index 3 to the end console.log(array1.copyWithin(1, 3)); // expected output: Array [\"d\", \"d\", \"e\", \"d\", \"e\"] ","date":"2020-04-06","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/:25:0","tags":["javascript","nodejs","array"],"title":"All array method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/"},{"categories":["Overview"],"content":"toLocaleString \u0026 toString const array1 = [1, 2, 'a', '1a']; console.log(array1.toString()); // expected output: \"1,2,a,1a\" const array1 = [1, 'a', new Date('21 Dec 1997 14:12:00 UTC')]; const localeString = array1.toLocaleString('en', { timeZone: 'UTC' }); console.log(localeString); // expected output: \"1,a,12/21/1997, 2:12:00 PM\", // This assumes \"en\" locale and UTC timezone - your results may vary ","date":"2020-04-06","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/:26:0","tags":["javascript","nodejs","array"],"title":"All array method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/"},{"categories":["Overview"],"content":"from Make a shallow copy from a iterable object const str = '1234567'; const res = Array.from(str, (each, index) =\u003e Number(each)); console.log(res); let numbers = [1, 2, 3, 4, 3, 2, 1, 3, 3, 4, 3, 5, 2]; let s = new Set(numbers); numbers = Array.from(s); console.log(numbers); ","date":"2020-04-06","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/:27:0","tags":["javascript","nodejs","array"],"title":"All array method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/"},{"categories":["Overview"],"content":"of Array.of(7); // [7] Array.of(1, 2, 3); // [1, 2, 3] Array(7); // [ , , , , , , ] Array(1, 2, 3); // [1, 2, 3] ","date":"2020-04-06","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/:28:0","tags":["javascript","nodejs","array"],"title":"All array method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/"},{"categories":["Overview"],"content":"isArray let numbers = [1, 2, 3, 4, 3, 2, 1, 3, 3, 4, 3, 5, 2]; const str = '1234567'; let number = 12; console.log(Array.isArray(numbers)); // true console.log(Array.isArray(str)); // false console.log(Array.isArray(number)); // false ","date":"2020-04-06","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/:29:0","tags":["javascript","nodejs","array"],"title":"All array method in Javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-javascript/"},{"categories":["Overview"],"content":"Express.js is a web framework for Node.js ","date":"2020-03-30","objectID":"https://tyrangyang.github.io/TyrangYang_blog/express/:0:0","tags":["web","express"],"title":"Express Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/express/"},{"categories":["Overview"],"content":"Example const express = require('express'); const app = express(); app.use(...); // get and post or middle ware app.get('/', (req, res) =\u003e { return res.send({hello:\"world\"}); }) const PORT = 4000; app.listen(PORT, ()=\u003e { console.log(`Server is ready on http://localhost:${PORT}`); }) ","date":"2020-03-30","objectID":"https://tyrangyang.github.io/TyrangYang_blog/express/:1:0","tags":["web","express"],"title":"Express Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/express/"},{"categories":["Posts"],"content":"Github provide a tech called github pages that can hosted your project directly from repository. Basely push you project into gh-pages branch and the index.html will show on the page which is {\u003cgithub username\u003e.github.io}/{\u003crepository name\u003e} ","date":"2020-03-29","objectID":"https://tyrangyang.github.io/TyrangYang_blog/gh-pages/:0:0","tags":["github","gh-page","npm"],"title":"How to demonstrate your front end application on Github by gh-page","uri":"https://tyrangyang.github.io/TyrangYang_blog/gh-pages/"},{"categories":["Posts"],"content":"gh-pages gh-pages provide by Tim Schaub is a npm package that can help you push something directly into gh-page branch Read more detail in repository ","date":"2020-03-29","objectID":"https://tyrangyang.github.io/TyrangYang_blog/gh-pages/:1:0","tags":["github","gh-page","npm"],"title":"How to demonstrate your front end application on Github by gh-page","uri":"https://tyrangyang.github.io/TyrangYang_blog/gh-pages/"},{"categories":["Posts"],"content":"command line usage This package also provide a command line tool: add \"deploy\": \"gh-pages -d build\" and run npm run deploy. This command will push all file inside a folder called build. ","date":"2020-03-29","objectID":"https://tyrangyang.github.io/TyrangYang_blog/gh-pages/:1:1","tags":["github","gh-page","npm"],"title":"How to demonstrate your front end application on Github by gh-page","uri":"https://tyrangyang.github.io/TyrangYang_blog/gh-pages/"},{"categories":["Posts"],"content":"React app Run npm run build will build a front end app. If you host on github page, however, the root url should unified by changing \"homepage: \"\u003curl\u003e\" in package.json file. \"homepage: \".\" works as well ","date":"2020-03-29","objectID":"https://tyrangyang.github.io/TyrangYang_blog/gh-pages/:1:2","tags":["github","gh-page","npm"],"title":"How to demonstrate your front end application on Github by gh-page","uri":"https://tyrangyang.github.io/TyrangYang_blog/gh-pages/"},{"categories":["Overview"],"content":"CSS cheat sheet: html \u0026 css provided by Traversy Media ","date":"2020-03-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/css/:0:0","tags":["css"],"title":"CSS Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/css/"},{"categories":["Overview"],"content":"Font font-size size font-family: \u003cFAMILY_NAME\u003e, \u003cGENERIC_NAME\u003e; font-family: Lobster monospace; GENERIC_NAME: sans-serif serif monospace; sans-serif force on connected and serif force on single alphabet. line-height: 25px; ","date":"2020-03-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/css/:1:0","tags":["css"],"title":"CSS Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/css/"},{"categories":["Overview"],"content":"Import font Could use google font and add link into index.html or in style.css ","date":"2020-03-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/css/:1:1","tags":["css"],"title":"CSS Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/css/"},{"categories":["Overview"],"content":"Control space There are three important properties to control the space: padding, margin and border ","date":"2020-03-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/css/:2:0","tags":["css"],"title":"CSS Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/css/"},{"categories":["Overview"],"content":"Border border-size border-color border-width border-style border: \u003cborder-width\u003e \u003cborder-style\u003e \u003cborder-color\u003e ","date":"2020-03-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/css/:2:1","tags":["css"],"title":"CSS Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/css/"},{"categories":["Overview"],"content":"padding Padding control the amount of space between the element’s content and its border; padding-top padding-right padding-bottom padding-left or specify them all in one line clockwise: padding: 20px 10px 20px 10px; or specify top-bottom and left-right padding: 20px 10px; ","date":"2020-03-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/css/:2:2","tags":["css"],"title":"CSS Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/css/"},{"categories":["Overview"],"content":"Margin margin controls the amount of space between an element’s border and surrounding elements. margin-top margin-right margin-bottom margin-left or specify them all in one line clockwise: margin: 20px 10px 20px 10px; or specify top-bottom and left-right margin: 20px 10px; ","date":"2020-03-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/css/:2:3","tags":["css"],"title":"CSS Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/css/"},{"categories":["Overview"],"content":"CSS inheritance Afterword can overwrite previous. Id will always take precedence. \u003cstyle\u003e body { background-color: black; font-family: monospace; color: green; } #orange-text { color: orange; } .pink-text { color: pink !important; } .blue-text { color: blue; } \u003c/style\u003e \u003ch1 id=\"orange-text\" class=\"pink-text blue-text\" style=\"color: white\"\u003e Hello World! \u003c/h1\u003e ","date":"2020-03-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/css/:3:0","tags":["css"],"title":"CSS Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/css/"},{"categories":["Overview"],"content":"text text-align: justify; causes all lines of text except the last line to meet the left and right edges of the line box. text-align: center; centers the text text-align: right; right-aligns the text text-align: left; (the default) left-aligns the text. text-overflow: ellipsis; ellipsis text overflow (…) ","date":"2020-03-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/css/:4:0","tags":["css"],"title":"CSS Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/css/"},{"categories":["Overview"],"content":"decoration font-weight: bold; text-decoration: underline; font-style: italic; text-decoration: line-through; ","date":"2020-03-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/css/:4:1","tags":["css"],"title":"CSS Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/css/"},{"categories":["Overview"],"content":"transform The text-transform property in CSS is used to change the appearance of text. It’s a convenient way to make sure text on a webpage appears consistently, without having to change the text content of the actual HTML elements. Value Result lowercase “transform me” uppercase “TRANSFORM ME” capitalize “Transform Me” initial Use the default value inherit Use the text-transform value from the parent element none Default: Use the original text ","date":"2020-03-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/css/:4:2","tags":["css"],"title":"CSS Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/css/"},{"categories":["Overview"],"content":"Box shadow The box-shadow property applies one or more shadows to an element. The box-shadow property takes values for offset-x (how far to push the shadow horizontally from the element), offset-y (how far to push the shadow vertically from the element), blur-radius, spread-radius and color, in that order. The blur-radius and spread-radius values are optional. Multiple box-shadows can be created by using commas to separate properties of each box-shadow element. ","date":"2020-03-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/css/:5:0","tags":["css"],"title":"CSS Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/css/"},{"categories":["Overview"],"content":"opacity The opacity property in CSS is used to adjust the opacity, or conversely, the transparency for an item. A value of 1 is opaque, which isn’t transparent at all. A value of 0.5 is half see-through. A value of 0 is completely transparent. ","date":"2020-03-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/css/:6:0","tags":["css"],"title":"CSS Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/css/"},{"categories":["Overview"],"content":"pseudo-classes tag can be changed for its hover state using the :hover a:hover { color: red; } ","date":"2020-03-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/css/:7:0","tags":["css"],"title":"CSS Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/css/"},{"categories":["Overview"],"content":"transform MDN: https://developer.mozilla.org/en-US/docs/Web/CSS/transform ","date":"2020-03-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/css/:8:0","tags":["css"],"title":"CSS Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/css/"},{"categories":["Overview"],"content":"position Reference The position property specifies the type of positioning method used for an element. you have top left bottom right to set the position There are five different position values: static: default relative: relative to normal position absolute: target wherever position inside of a relative element ( fixed: fix to browser window sticky position This is another post shows different ","date":"2020-03-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/css/:9:0","tags":["css"],"title":"CSS Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/css/"},{"categories":["Overview"],"content":"color ","date":"2020-03-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/css/:10:0","tags":["css"],"title":"CSS Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/css/"},{"categories":["Overview"],"content":"linear-gradient background: linear-gradient(30deg, #cff, #fcc); repeating-linear-gradient( 90deg, yellow 0px, blue 40px, green 40px, red 80px ); 0px [yellow – blend – blue] 40px [green – blend – red] 80px ","date":"2020-03-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/css/:11:0","tags":["css"],"title":"CSS Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/css/"},{"categories":["Overview"],"content":"animate ","date":"2020-03-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/css/:12:0","tags":["css"],"title":"CSS Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/css/"},{"categories":["Overview"],"content":"Example Try in CodePen \u003cstyle\u003e button { border-radius: 5px; color: white; background-color: #0f5897; padding: 5px 10px 8px 10px; } button:hover { animation-name: background-color; animation-duration: 500ms; animation-fill-mode: forwards; } @keyframes background-color { 100% { background-color: #4791d0; } } \u003c/style\u003e \u003cbutton\u003eRegister\u003c/button\u003e ","date":"2020-03-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/css/:12:1","tags":["css"],"title":"CSS Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/css/"},{"categories":["Overview"],"content":"keyframes MDN: https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes ","date":"2020-03-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/css/:12:2","tags":["css"],"title":"CSS Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/css/"},{"categories":["Overview"],"content":"animation MDN: https://developer.mozilla.org/en-US/docs/Web/CSS/animation ","date":"2020-03-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/css/:12:3","tags":["css"],"title":"CSS Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/css/"},{"categories":["Overview"],"content":"transition CSS transitions provide a way to control animation speed when changing CSS properties. Instead of having property changes take effect immediately, you can cause the changes in a property to take place over a period of time. For example, if you change the color of an element from white to black, usually the change is instantaneous. With CSS transitions enabled, changes occur at time intervals that follow an acceleration curve, all of which can be customized. MDN: https://developer.mozilla.org/en-US/docs/Web/CSS/transition ","date":"2020-03-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/css/:13:0","tags":["css"],"title":"CSS Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/css/"},{"categories":["Overview"],"content":"cubic-bezier A curve about about animation speed. Use two point to decide the curve curve line ","date":"2020-03-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/css/:14:0","tags":["css"],"title":"CSS Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/css/"},{"categories":["Overview"],"content":"tabindex \u003cstyle\u003e p:focus { background-color: yellow; } \u003c/style\u003e \u003cp tabindex=\"0\"\u003e Instructions: Fill in ALL your information then click \u003cb\u003eSubmit\u003c/b\u003e \u003c/p\u003e ","date":"2020-03-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/css/:15:0","tags":["css"],"title":"CSS Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/css/"},{"categories":["Overview"],"content":"display https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/The_box_model ","date":"2020-03-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/css/:16:0","tags":["css"],"title":"CSS Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/css/"},{"categories":["Overview"],"content":"block vs inline vs inline-block https://www.digitalocean.com/community/tutorials/css-display-inline-vs-inline-block ","date":"2020-03-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/css/:16:1","tags":["css"],"title":"CSS Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/css/"},{"categories":["Overview"],"content":"Layout MDN Reference There is an another compare flex and grid: Flex and Grid in CSS ","date":"2020-03-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/css/:17:0","tags":["css"],"title":"CSS Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/css/"},{"categories":["Overview"],"content":"Flex Sample code provided by Traversy Media More Detail in Flex and Grid in CSS Cheat Sheet provide by CSS-tricks.com A Flexbox code Example ","date":"2020-03-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/css/:17:1","tags":["css"],"title":"CSS Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/css/"},{"categories":["Overview"],"content":"grid More Detail in Flex and Grid in CSS Cheat Sheet provide by CSS-tricks.com A Grid code Example ","date":"2020-03-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/css/:17:2","tags":["css"],"title":"CSS Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/css/"},{"categories":["Overview"],"content":"z-index Move some element to the front or back. z-index = 10; ","date":"2020-03-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/css/:18:0","tags":["css"],"title":"CSS Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/css/"},{"categories":["Overview"],"content":"Personal default style ","date":"2020-03-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/css/:19:0","tags":["css"],"title":"CSS Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/css/"},{"categories":["Overview"],"content":"button .btn { display: inline-block; padding: 5px 30px; background: var(--primarily-color); color: #fff; border: 1px #fff solid; border-radius: 5px; margin-top: 25px; opacity: 0.7; } .btn:hover { transform: scale(0.98); } ","date":"2020-03-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/css/:19:1","tags":["css"],"title":"CSS Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/css/"},{"categories":["Overview"],"content":"pseudo-classes \u0026 pseudo-elements Ref: https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes Ref: https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements A CSS pseudo-element is a keyword added to a selector that lets you style a specific part of the selected element(s). Pseudo-elements create abstractions about the document tree beyond those specified by the document language. For instance, document languages do not offer mechanisms to access the first letter or first line of an element’s content. Pseudo-elements allow authors to refer to this otherwise inaccessible information. Pseudo-elements may also provide authors a way to refer to content that does not exist in the source document (e.g., the ::before and ::after pseudo-elements give access to generated content). A CSS pseudo-class is a keyword added to a selector that specifies a special state of the selected element(s). The pseudo-class concept is introduced to permit selection based on information that lies outside of the document tree or that cannot be expressed using the other simple selectors. pseudo-elements use (::) like ::before pseudo-class use (:) like :hover, :nth-child() ","date":"2020-03-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/css/:20:0","tags":["css"],"title":"CSS Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/css/"},{"categories":["Overview"],"content":"symbols in CSS selectors Reference https://levelup.gitconnected.com/understanding-use-of-the-and-symbols-in-css-selectors-95552eb436f5 Descendant Selector (space) Child Selector (\u003e) Adjacent Sibling Selector (+) General Sibling Selector (~) For a Same HTML part \u003cdiv class=\"container\"\u003e \u003cp\u003eApple\u003c/p\u003e \u003cdiv\u003e \u003cp\u003eAn apple a day keeps doctor away!\u003c/p\u003e \u003c/div\u003e \u003cp\u003eBanana\u003c/p\u003e \u003cp\u003eCherry\u003c/p\u003e \u003c/div\u003e ","date":"2020-03-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/css/:21:0","tags":["css"],"title":"CSS Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/css/"},{"categories":["Overview"],"content":"space div.container p { font-size: 20px; } Choose all p tag ","date":"2020-03-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/css/:21:1","tags":["css"],"title":"CSS Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/css/"},{"categories":["Overview"],"content":"(\u003e) div.container \u003e p { border-bottom: 1px dashed black; } Child Selector ","date":"2020-03-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/css/:21:2","tags":["css"],"title":"CSS Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/css/"},{"categories":["Overview"],"content":"(+) div + p { background-color: yellow; } Adjacent Sibling Selector ","date":"2020-03-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/css/:21:3","tags":["css"],"title":"CSS Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/css/"},{"categories":["Overview"],"content":"(~) div ~ p { background-color: yellow; } General Sibling Selector ","date":"2020-03-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/css/:21:4","tags":["css"],"title":"CSS Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/css/"},{"categories":["Overview"],"content":"Different between initial, inherit, unset \u0026 revert ","date":"2020-03-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/css/:22:0","tags":["css"],"title":"CSS Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/css/"},{"categories":["Overview"],"content":"initial set field into css default value, not browser default value (user agent stylesheet) ","date":"2020-03-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/css/:22:1","tags":["css"],"title":"CSS Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/css/"},{"categories":["Overview"],"content":"inherit inherit parent html container setting ","date":"2020-03-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/css/:22:2","tags":["css"],"title":"CSS Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/css/"},{"categories":["Overview"],"content":"unset unset = inherit + initial if property can inherit parent, set to inherit. Otherwise, set to initial Set All properties {all: unset} can set all properties to inherit or initial ","date":"2020-03-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/css/:22:3","tags":["css"],"title":"CSS Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/css/"},{"categories":["Overview"],"content":"revert set property to browser default value (user agent stylesheet) ","date":"2020-03-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/css/:22:4","tags":["css"],"title":"CSS Overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/css/"},{"categories":["Terminal"],"content":"Basic cd route ls list pwd show current path cat concatenate and print file (usually as read file) touch change file access and modification time; (usually as create file) ","date":"2020-03-16","objectID":"https://tyrangyang.github.io/TyrangYang_blog/basic-terminal-command/:1:0","tags":["terminal"],"title":"Basic Terminal command","uri":"https://tyrangyang.github.io/TyrangYang_blog/basic-terminal-command/"},{"categories":["Terminal"],"content":"Routing cd \u003cdirectory\u003e cd . current cd .. last cd ~ home cd / root ","date":"2020-03-16","objectID":"https://tyrangyang.github.io/TyrangYang_blog/basic-terminal-command/:2:0","tags":["terminal"],"title":"Basic Terminal command","uri":"https://tyrangyang.github.io/TyrangYang_blog/basic-terminal-command/"},{"categories":["Terminal"],"content":"List ls ls -a list all included hiding file ls -l list detail ","date":"2020-03-16","objectID":"https://tyrangyang.github.io/TyrangYang_blog/basic-terminal-command/:3:0","tags":["terminal"],"title":"Basic Terminal command","uri":"https://tyrangyang.github.io/TyrangYang_blog/basic-terminal-command/"},{"categories":["Terminal"],"content":"Move \u0026 Copy cp \u003cname1\u003e \u003cname2\u003e copy mv \u003cname1\u003e \u003cname2\u003e rename move one file within this directory to another name. mv \u003cdirectory1\u003e \u003cdirectory2\u003e move ","date":"2020-03-16","objectID":"https://tyrangyang.github.io/TyrangYang_blog/basic-terminal-command/:4:0","tags":["terminal"],"title":"Basic Terminal command","uri":"https://tyrangyang.github.io/TyrangYang_blog/basic-terminal-command/"},{"categories":["Terminal"],"content":"Find Find a file in a dir find . find . -type d //only directory find . -type f//only file ","date":"2020-03-16","objectID":"https://tyrangyang.github.io/TyrangYang_blog/basic-terminal-command/:5:0","tags":["terminal"],"title":"Basic Terminal command","uri":"https://tyrangyang.github.io/TyrangYang_blog/basic-terminal-command/"},{"categories":["Terminal"],"content":"name find . -type f -name \"\u003cfilename\u003e\" find . -type f -name \"\u003cpartial filename\u003e_\" find . -type f -iname \"\u003cpartial filename\u003e_\" -i means not case sensitive find . -type f -name \"\\*.py\" ","date":"2020-03-16","objectID":"https://tyrangyang.github.io/TyrangYang_blog/basic-terminal-command/:5:1","tags":["terminal"],"title":"Basic Terminal command","uri":"https://tyrangyang.github.io/TyrangYang_blog/basic-terminal-command/"},{"categories":["Terminal"],"content":"time find . -type f -mmin -10 file modify lest than 10 min find . -type f -mmin +10 modify more than 10 min find . -type f -mmin +1 -mmin -10 modify more than 1 less than 10 min find . -type f -mtime -20 modify less than 20 days ago // mmin mtime // modify miniums days // amin atime // access // cmin ctime // change ","date":"2020-03-16","objectID":"https://tyrangyang.github.io/TyrangYang_blog/basic-terminal-command/:5:2","tags":["terminal"],"title":"Basic Terminal command","uri":"https://tyrangyang.github.io/TyrangYang_blog/basic-terminal-command/"},{"categories":["Terminal"],"content":"size find . -size +5M find size larger than 5 MB find . -size -1G find size smaller than 1 GB find . -size +2k find size larger than 2KB (k is lower case) ","date":"2020-03-16","objectID":"https://tyrangyang.github.io/TyrangYang_blog/basic-terminal-command/:5:3","tags":["terminal"],"title":"Basic Terminal command","uri":"https://tyrangyang.github.io/TyrangYang_blog/basic-terminal-command/"},{"categories":["Terminal"],"content":"empty find . -empty find empty file ","date":"2020-03-16","objectID":"https://tyrangyang.github.io/TyrangYang_blog/basic-terminal-command/:5:4","tags":["terminal"],"title":"Basic Terminal command","uri":"https://tyrangyang.github.io/TyrangYang_blog/basic-terminal-command/"},{"categories":["Terminal"],"content":"Grep Find some content inside a file grep \"find\" terminal.txt find the content inside the file or not (Eg: findfind will be fond) grep -w \"find\" terminal.txt -w find the content exactly inside the file ofr not (Eg:findfind will be ignored) grep -iw \"find\" terminal.txt -i not case sensitive grep -iwn \"find\" terminal.txt -n show line number that find the content grep -iwn -B 4 \"find\" terminal.txt 4 line before the match grep -iwn -A 4 \"find\" terminal.txt 4 line after the match grep -iwn -C 4 \"find\" terminal.txt 4 line before and after the match grep -iwn \"find\" ./* find all files in this directory with content grep -winr \"find\" ./ -r recursive search the directory and subdirectory grep -wirl \"find\" ./ -l only show the directory of matching file. grep -wirc \"find\" ./ -c how many match in this directory. ","date":"2020-03-16","objectID":"https://tyrangyang.github.io/TyrangYang_blog/basic-terminal-command/:6:0","tags":["terminal"],"title":"Basic Terminal command","uri":"https://tyrangyang.github.io/TyrangYang_blog/basic-terminal-command/"},{"categories":["Terminal"],"content":"History history !! last command ex: sudo !! ","date":"2020-03-16","objectID":"https://tyrangyang.github.io/TyrangYang_blog/basic-terminal-command/:7:0","tags":["terminal"],"title":"Basic Terminal command","uri":"https://tyrangyang.github.io/TyrangYang_blog/basic-terminal-command/"},{"categories":["Terminal"],"content":"combine with grep history | grep \"ls\" show history have “ls” ","date":"2020-03-16","objectID":"https://tyrangyang.github.io/TyrangYang_blog/basic-terminal-command/:7:1","tags":["terminal"],"title":"Basic Terminal command","uri":"https://tyrangyang.github.io/TyrangYang_blog/basic-terminal-command/"},{"categories":["Terminal"],"content":"Curl (http request) curl \u003curl\u003e http request curl -i \u003curl\u003e //–include get detail curl -d \u003cdata\u003e \u003curl\u003e // –data post request curl -X PUT -d \u003cdata\u003e \u003curl\u003e // update curl -X DELETE \u003curl\u003e //delete curl -u \u003cusername\u003e:\u003cpassword\u003e \u003curl\u003e // username curl -0 \u003cdownloadname\u003e \u003curl\u003e //download ","date":"2020-03-16","objectID":"https://tyrangyang.github.io/TyrangYang_blog/basic-terminal-command/:8:0","tags":["terminal"],"title":"Basic Terminal command","uri":"https://tyrangyang.github.io/TyrangYang_blog/basic-terminal-command/"},{"categories":["Terminal"],"content":"Short cut ctrl + a //go to the beginning of a line ctrl + e //go to the end of a line option + \u003c- or -\u003e jump a word right or left option + click ctrl + u //delete everything before cursor 光标 ctrl + k //delete everything after cursor tab //auto complete up or down //scroll through your history command history //show all history command ","date":"2020-03-16","objectID":"https://tyrangyang.github.io/TyrangYang_blog/basic-terminal-command/:9:0","tags":["terminal"],"title":"Basic Terminal command","uri":"https://tyrangyang.github.io/TyrangYang_blog/basic-terminal-command/"},{"categories":["Posts"],"content":"This check method will help you find out whether one digit is wrong or 2 adjacent digit are in reverse order. ","date":"2020-03-15","objectID":"https://tyrangyang.github.io/TyrangYang_blog/check-digit-id/:0:0","tags":["javascript"],"title":"How to check the Chinese ID is correct","uri":"https://tyrangyang.github.io/TyrangYang_blog/check-digit-id/"},{"categories":["Posts"],"content":"Sample code checkChineseId = (id) =\u003e { const ID_LENGTH = 18; // check type if (typeof id !== 'string') { console.error('type error'); return; } //check length if (id.length !== ID_LENGTH) { console.error('length error'); return; } // check each digit for (let i = 0; i \u003c id.length - 1; i++) { const e = id[i]; if (e \u003c '0' || e \u003e '9') { console.error('digit error'); return; } } if ( id[ID_LENGTH - 1] !== 'x' \u0026\u0026 id[ID_LENGTH - 1] != 'X' \u0026\u0026 id[ID_LENGTH - 1] \u003c '0' \u0026\u0026 id[ID_LENGTH - 1] \u003e '9' ) { console.error('digit error'); return; } // num: 01 01 00 01 00 05 01 09 04 09 01 02 03 01 00 00 02 10 //serial: 17 16 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00 //weight = 2^serial % 11 //weight: 07 09 10 05 08 04 02 01 06 03 07 09 10 05 08 04 02 01 (fix) // calculate code let weight_sum = 0; for (let i = 0; i \u003c id.length - 1; i++) { let weight = Math.pow(2, ID_LENGTH - 1 - i) % 11; weight_sum += id[i] * weight; } // checkCode = (12 - weight_sum % 11) % 11 let checkCode = (12 - (weight_sum % 11)) % 11; // compare let res = false; if (checkCode == 10) { res = id[ID_LENGTH - 1] === 'x' || id[ID_LENGTH - 1] === 'X' ? true : false; } else { res = id[ID_LENGTH - 1] == checkCode ? true : false; } console.log(`${id}is ${res}`); return res; }; module.exports = { checkChineseId, }; ","date":"2020-03-15","objectID":"https://tyrangyang.github.io/TyrangYang_blog/check-digit-id/:1:0","tags":["javascript"],"title":"How to check the Chinese ID is correct","uri":"https://tyrangyang.github.io/TyrangYang_blog/check-digit-id/"},{"categories":["C++"],"content":"Structured binding is a new feature since c++17 cppreference.com auto [ identifier-list ] = expression ","date":"2020-03-01","objectID":"https://tyrangyang.github.io/TyrangYang_blog/structured-binding/:0:0","tags":["c++"],"title":"Structured binding","uri":"https://tyrangyang.github.io/TyrangYang_blog/structured-binding/"},{"categories":["C++"],"content":"Bind array int main(int argc, char const *argv[]) { int test[3] = {1, 2, 3}; auto [a, b, c] = test; // an new array e copy from test and a = e[0]; b = e[1]; c = e[2]; auto \u0026[x, y, z] = test; // x = test[0]; x = test[1]; x = test[2] cout \u003c\u003c ++a \u003c\u003c \" \" \u003c\u003c ++b \u003c\u003c \" \" \u003c\u003c ++c \u003c\u003c \" \" \u003c\u003c endl; for (int \u0026i : test) cout \u003c\u003c i \u003c\u003c \" \"; cout \u003c\u003c endl; cout \u003c\u003c ++x \u003c\u003c \" \" \u003c\u003c ++y \u003c\u003c \" \" \u003c\u003c ++z \u003c\u003c \" \" \u003c\u003c endl; for (int \u0026i : test) cout \u003c\u003c i \u003c\u003c \" \"; cout \u003c\u003c endl; return 0; } ","date":"2020-03-01","objectID":"https://tyrangyang.github.io/TyrangYang_blog/structured-binding/:1:0","tags":["c++"],"title":"Structured binding","uri":"https://tyrangyang.github.io/TyrangYang_blog/structured-binding/"},{"categories":["C++"],"content":"tuple int main(int argc, char const *argv[]) { tuple\u003cint, int, int\u003e test(1, 2, 3); auto \u0026[a, b, c] = test; // 1 2 3 pair\u003cint, char\u003e test2(1, 'c'); auto \u0026[a2, b2] = test2; // 1 c return 0; } ","date":"2020-03-01","objectID":"https://tyrangyang.github.io/TyrangYang_blog/structured-binding/:2:0","tags":["c++"],"title":"Structured binding","uri":"https://tyrangyang.github.io/TyrangYang_blog/structured-binding/"},{"categories":["C++"],"content":"struct struct test { int a; int b; }; int main(int argc, char const *argv[]) { test one; one.a = 1; one.b = 2; auto \u0026[first, second] = one; // 1 ,2 return 0; } ","date":"2020-03-01","objectID":"https://tyrangyang.github.io/TyrangYang_blog/structured-binding/:3:0","tags":["c++"],"title":"Structured binding","uri":"https://tyrangyang.github.io/TyrangYang_blog/structured-binding/"},{"categories":["Note"],"content":"Idea to traverse a tree ","date":"2020-02-10","objectID":"https://tyrangyang.github.io/TyrangYang_blog/traverse-a-tree/:0:0","tags":["Traverse a tree"],"title":"Traverse a tree","uri":"https://tyrangyang.github.io/TyrangYang_blog/traverse-a-tree/"},{"categories":["Note"],"content":"Tree structure The tree structure: struct TreeNode { int val; TreeNode *left; TreeNode *right; TreeNode(int x) : val(x), left(NULL), right(NULL) {} }; ","date":"2020-02-10","objectID":"https://tyrangyang.github.io/TyrangYang_blog/traverse-a-tree/:1:0","tags":["Traverse a tree"],"title":"Traverse a tree","uri":"https://tyrangyang.github.io/TyrangYang_blog/traverse-a-tree/"},{"categories":["Note"],"content":"BFS DFS Pre-order In-order Post-order Relationship: Iterative Loop for BFS: void BFS(TreeNode *root){ stack\u003cTreeNode *\u003e q; q.push(root); while(!q.empty()){ TreeNode *temp = q.front(); q.pop(); // do something if(temp-\u003eleft != NULL) q.push(temp -\u003e left); if(temp-\u003eright != NULL) q.push(temp -\u003e right); } } Loop for DFS: Pre-order: void DFS(TreeNode *root){ stack\u003cTreeNode *\u003e s; s.push(root); while(!s.empty()){ TreeNode *temp = s.top(); s.pop(); // do something if(temp-\u003eright != NULL) s.push(temp -\u003e right); if(temp-\u003eleft != NULL) s.push(temp -\u003e left); } } In-order: void DFS(TreeNode *root){ stack\u003cTreeNode *\u003e s; TreeNode *cur = root; while(!s.empty() || cur != NULL){ // To the left most while(cur != NULL){ s.push(cur); cur = cur -\u003e left } cur = s.top(); s.pop(); // do something cur = cur -\u003e right; } } Post-order: void DFS(TreeNode *root){ stack\u003cTreeNode *\u003e s; TreeNode *cur = root; do{ while(cur != NULL){ if(cur-\u003eright != NULL) s.push(cur-\u003eright); s.push(cur); cur = cur-\u003eleft; } cur = s.top(); s.pop(); // if cur have right node and the right not visited (stack must have top) if(cur-\u003eright != NULL \u0026\u0026 !s.empty() \u0026\u0026 s.top() == cur -\u003e right){ // cur switch to cur-\u003eright. Original node is put back. s.pop(); s.push(cur); cur = cur -\u003e right; } // node which doesn't have right or right node is already been processed. else{ // do something cur = NULL; } }while(!s.empty()); } This is another method which is easy but not actually traverse the tree in post-order. This just can give a correct output res; vector\u003cint\u003e DFS(TreeNode *root){ vector\u003cint\u003e res; stack\u003cTreeNode *\u003e s; s.push(root); while(!s.empty()){ TreeNode *temp = s.top(); s.pop(); res.push_back(temp -\u003e val); // do something if(temp-\u003eleft != NULL) s.push(temp -\u003e left); if(temp-\u003eright != NULL) s.push(temp -\u003e right); } reverse(res.begin(), res.end()); return res; } Recursive Pre-order: (DFS is same) void preOrder(TreeNode *root){ if(root == NULL) return; // root -\u003e val do something preOrder(root -\u003e left); preOrder(root -\u003e right); } In-Order: void inOrder(TreeNode *root){ if(root == NULL) return; inOrder(root -\u003e left); // root -\u003e val do something inOrder(root -\u003e right); } Pre-Order: (Bottom-to-up) void postOrder(TreeNode *root){ if(root == NULL) return; postOrder(root -\u003e left); postOrder(root -\u003e right); // root -\u003e val do something } ","date":"2020-02-10","objectID":"https://tyrangyang.github.io/TyrangYang_blog/traverse-a-tree/:1:1","tags":["Traverse a tree"],"title":"Traverse a tree","uri":"https://tyrangyang.github.io/TyrangYang_blog/traverse-a-tree/"},{"categories":["Note"],"content":"BFS process level by level void BFS(TreeNode *root){ stack\u003cTreeNode *\u003e q; q.push(root); while(!q.empty()){ int levelSize = q.size(); // get current level size so that BFS can process level by level for(int i=0; i\u003clevelSize; ++i){ TreeNode *temp = q.front(); q.pop(); // do something if(temp-\u003eleft != NULL) q.push(temp -\u003e left); if(temp-\u003eright != NULL) q.push(temp -\u003e right); } } } ","date":"2020-02-10","objectID":"https://tyrangyang.github.io/TyrangYang_blog/traverse-a-tree/:1:2","tags":["Traverse a tree"],"title":"Traverse a tree","uri":"https://tyrangyang.github.io/TyrangYang_blog/traverse-a-tree/"},{"categories":["STL-study-note"],"content":"This is introduce how to find the next lexicographically permutation. Suppose the permutation is 1 2 3. The next one is 1 3 2. ","date":"2020-02-05","objectID":"https://tyrangyang.github.io/TyrangYang_blog/next-permutation/:0:0","tags":["c++","algorithm","permutation"],"title":"How to find next permutation","uri":"https://tyrangyang.github.io/TyrangYang_blog/next-permutation/"},{"categories":["STL-study-note"],"content":"Algorithm in C++ C++ provide an algorithm called next_permutation to support that. Reference Example: #include \u003ciostream\u003e // std::cout#include \u003calgorithm\u003e // std::next_permutation, std::sort int main () { int myints[] = {1,2,3}; std::sort (myints,myints+3); std::cout \u003c\u003c \"The 3! possible permutations with 3 elements:\\n\"; do { std::cout \u003c\u003c myints[0] \u003c\u003c ' ' \u003c\u003c myints[1] \u003c\u003c ' ' \u003c\u003c myints[2] \u003c\u003c '\\n'; } while ( std::next_permutation(myints,myints+3) ); std::cout \u003c\u003c \"After loop: \" \u003c\u003c myints[0] \u003c\u003c ' ' \u003c\u003c myints[1] \u003c\u003c ' ' \u003c\u003c myints[2] \u003c\u003c '\\n'; return 0; ","date":"2020-02-05","objectID":"https://tyrangyang.github.io/TyrangYang_blog/next-permutation/:1:0","tags":["c++","algorithm","permutation"],"title":"How to find next permutation","uri":"https://tyrangyang.github.io/TyrangYang_blog/next-permutation/"},{"categories":["STL-study-note"],"content":"How it work. There are four step to achieve. Find first decreasing element A in backward. Find element B behind A and just large then A. Swap A and B. Reverse all elements behind B. ","date":"2020-02-05","objectID":"https://tyrangyang.github.io/TyrangYang_blog/next-permutation/:2:0","tags":["c++","algorithm","permutation"],"title":"How to find next permutation","uri":"https://tyrangyang.github.io/TyrangYang_blog/next-permutation/"},{"categories":["STL-study-note"],"content":"Why it works Example each step Find the element that should be changed. Find the next element that will replace the previous one. Swap them. Since all elements behind the new one is decreasing, reverse them. ","date":"2020-02-05","objectID":"https://tyrangyang.github.io/TyrangYang_blog/next-permutation/:3:0","tags":["c++","algorithm","permutation"],"title":"How to find next permutation","uri":"https://tyrangyang.github.io/TyrangYang_blog/next-permutation/"},{"categories":["LeetCode"],"content":"Some strategy learning from leetCode ","date":"2020-01-31","objectID":"https://tyrangyang.github.io/TyrangYang_blog/leetcode-idea/:0:0","tags":["leetCode"],"title":"Learn from leetCode","uri":"https://tyrangyang.github.io/TyrangYang_blog/leetcode-idea/"},{"categories":["LeetCode"],"content":"C++ 2d array Better use a vector(don’t need to consider allocator) int row = 10; int col = 10; int init = 1; vector\u003cvector \u003cint\u003e\u003e memos(row, vector\u003cint\u003e(col, init)) // init can ignore int** a = new int*[rowCount]; for(int i = 0; i \u003c rowCount; ++i) a[i] = new int[colCount]; delete ... ","date":"2020-01-31","objectID":"https://tyrangyang.github.io/TyrangYang_blog/leetcode-idea/:1:0","tags":["leetCode"],"title":"Learn from leetCode","uri":"https://tyrangyang.github.io/TyrangYang_blog/leetcode-idea/"},{"categories":["LeetCode"],"content":"Traverse a tree The tree structure: struct TreeNode { int val; TreeNode *left; TreeNode *right; TreeNode(int x) : val(x), left(NULL), right(NULL) {} }; ","date":"2020-01-31","objectID":"https://tyrangyang.github.io/TyrangYang_blog/leetcode-idea/:2:0","tags":["leetCode"],"title":"Learn from leetCode","uri":"https://tyrangyang.github.io/TyrangYang_blog/leetcode-idea/"},{"categories":["LeetCode"],"content":"BFS DFS Pre-order In-order Post-order for a tree Loop for BFS: void BFS(TreeNode *root){ stack\u003cTreeNode *\u003e q; q.push(root); while(!q.empty()){ TreeNode *temp = q.front(); q.pop(); // do something if(temp-\u003eleft != NULL) q.push(temp -\u003e left); if(temp-\u003eright != NULL) q.push(temp -\u003e right); } } Loop for DFS: void DFS(TreeNode *root){ stack\u003cTreeNode *\u003e s; s.push(root); while(!s.empty()){ TreeNode *temp = s.top(); s.pop(); // do something if(temp-\u003eleft != NULL) s.push(temp -\u003e left); if(temp-\u003eright != NULL) s.push(temp -\u003e right); } } Pre-order: (DFS is same) void preOrder(TreeNode *root){ if(root == NULL) return; // root -\u003e val do something preOrder(root -\u003e left); preOrder(root -\u003e right); } In-Order: void inOrder(TreeNode *root){ if(root == NULL) return; inOrder(root -\u003e left); // root -\u003e val do something inOrder(root -\u003e right); } Pre-Order: (Bottom-to-up) void postOrder(TreeNode *root){ if(root == NULL) return; postOrder(root -\u003e left); postOrder(root -\u003e right); // root -\u003e val do something } ","date":"2020-01-31","objectID":"https://tyrangyang.github.io/TyrangYang_blog/leetcode-idea/:2:1","tags":["leetCode"],"title":"Learn from leetCode","uri":"https://tyrangyang.github.io/TyrangYang_blog/leetcode-idea/"},{"categories":["LeetCode"],"content":"BFS process level by level void BFS(TreeNode *root){ stack\u003cTreeNode *\u003e q; q.push(root); while(!q.empty()){ int levelSize = q.size(); // get current level size so that BFS can process level by level for(int i=0; i\u003clevelSize; ++i){ TreeNode *temp = q.front(); q.pop(); // do something if(temp-\u003eleft != NULL) q.push(temp -\u003e left); if(temp-\u003eright != NULL) q.push(temp -\u003e right); } } } ","date":"2020-01-31","objectID":"https://tyrangyang.github.io/TyrangYang_blog/leetcode-idea/:2:2","tags":["leetCode"],"title":"Learn from leetCode","uri":"https://tyrangyang.github.io/TyrangYang_blog/leetcode-idea/"},{"categories":["LeetCode"],"content":"heap Function make_heap can be used to arrange vector into a heap. It is better to use adopter priority_queue as heap. #include \u003cqueue\u003e priority_queue\u003cpair\u003cchar, int\u003e, vector\u003cpair\u003cchar, int\u003e\u003e , less\u003cpair\u003cchar,int\u003e\u003e \u003e pq; ","date":"2020-01-31","objectID":"https://tyrangyang.github.io/TyrangYang_blog/leetcode-idea/:3:0","tags":["leetCode"],"title":"Learn from leetCode","uri":"https://tyrangyang.github.io/TyrangYang_blog/leetcode-idea/"},{"categories":["LeetCode"],"content":"Faster io for C++ At this part at beginning. Relative article: Fast I/O for Competitive Programming - GeeksforGeeks auto all=[](){ ios::sync_with_stdio(false); // toggle off synchronization cin.tie(nullptr); return 0; }(); ","date":"2020-01-31","objectID":"https://tyrangyang.github.io/TyrangYang_blog/leetcode-idea/:4:0","tags":["leetCode"],"title":"Learn from leetCode","uri":"https://tyrangyang.github.io/TyrangYang_blog/leetcode-idea/"},{"categories":["LeetCode"],"content":"Binary search tree(BST) \u0026 In-order traversal After In-order traverse a BST, the result is a sorted sequence. Also you can use a sorted sequence to rebuild a balance BST. LeetCode 109 Convert Sorted List to Binary Search Tree ","date":"2020-01-31","objectID":"https://tyrangyang.github.io/TyrangYang_blog/leetcode-idea/:5:0","tags":["leetCode"],"title":"Learn from leetCode","uri":"https://tyrangyang.github.io/TyrangYang_blog/leetcode-idea/"},{"categories":["LeetCode"],"content":"DFS \u0026 Backtracking Example for DFS: LeetCode200 Example for Backtracking: LeetCode46 The different between them is: Backtracking will set the current state back after recursion. Since they all traverse a matrix, they both need to worry about recursive back. Like DFS goes from left to right and how to protect go back from right left. Of course, sometime it don’t need to be considered. ","date":"2020-01-31","objectID":"https://tyrangyang.github.io/TyrangYang_blog/leetcode-idea/:6:0","tags":["leetCode"],"title":"Learn from leetCode","uri":"https://tyrangyang.github.io/TyrangYang_blog/leetcode-idea/"},{"categories":["LeetCode"],"content":"Word ladder problem Give a begin word, an end word and a word dictionary. Word Ladder: leetCode 127 The idea to solve this question is to build a graph (or a State machine) and BFS the graph. Minimum Genetic Mutation: leetCode 433 Tis question don’t have to build a graph since each char only have 4 options. We can just check the one word mutation is stay in dictionary or not. ","date":"2020-01-31","objectID":"https://tyrangyang.github.io/TyrangYang_blog/leetcode-idea/:7:0","tags":["leetCode"],"title":"Learn from leetCode","uri":"https://tyrangyang.github.io/TyrangYang_blog/leetcode-idea/"},{"categories":["LeetCode"],"content":"Sum O(n^2) -\u003e O(n) If you want to find all continuous sum in a vector, the naive method is using two for loop: for (int i = 0; i \u003c size; i++) { int temp_sum = 0; for (int j = 0; j \u003c size; j++) { temp_sum += v[j] } // temp_sum is sum from i to j. sum(i, j) } We can use some tech to make time complexity down to O(n) The key idea is sum(i, j) = sum(0, j) - sum(0, i-1); ","date":"2020-01-31","objectID":"https://tyrangyang.github.io/TyrangYang_blog/leetcode-idea/:8:0","tags":["leetCode"],"title":"Learn from leetCode","uri":"https://tyrangyang.github.io/TyrangYang_blog/leetcode-idea/"},{"categories":["LeetCode"],"content":"Monotonic Queue A monotonic queue is a data structure that all elements is strictly increasing or decreasing. Any new element only entry at the end of the queue and tick out the elements in the queue to make sure the queue is still monotonic. ","date":"2020-01-31","objectID":"https://tyrangyang.github.io/TyrangYang_blog/leetcode-idea/:9:0","tags":["leetCode"],"title":"Learn from leetCode","uri":"https://tyrangyang.github.io/TyrangYang_blog/leetcode-idea/"},{"categories":["LeetCode"],"content":"Example [5,3,1,2,4] index v Increasing queue Decreasing queue 1 5 [5] [5] 2 3 [3] [5,3] 3 1 [1] [5,3,1] 4 2 [1,2] [5,3,2] 5 4 [1,2,4] [5,4] ","date":"2020-01-31","objectID":"https://tyrangyang.github.io/TyrangYang_blog/leetcode-idea/:9:1","tags":["leetCode"],"title":"Learn from leetCode","uri":"https://tyrangyang.github.io/TyrangYang_blog/leetcode-idea/"},{"categories":["LeetCode"],"content":"Questions leetcode 581: Shortest Unsorted Continuous Subarray ","date":"2020-01-31","objectID":"https://tyrangyang.github.io/TyrangYang_blog/leetcode-idea/:9:2","tags":["leetCode"],"title":"Learn from leetCode","uri":"https://tyrangyang.github.io/TyrangYang_blog/leetcode-idea/"},{"categories":["LeetCode"],"content":"Convert a number to a binary string (and back) in C++ Reference Use bitset to easily achieve that. See my previous post ","date":"2020-01-31","objectID":"https://tyrangyang.github.io/TyrangYang_blog/leetcode-idea/:10:0","tags":["leetCode"],"title":"Learn from leetCode","uri":"https://tyrangyang.github.io/TyrangYang_blog/leetcode-idea/"},{"categories":["LeetCode"],"content":"Question leetCode 190:Reverse Bits ","date":"2020-01-31","objectID":"https://tyrangyang.github.io/TyrangYang_blog/leetcode-idea/:10:1","tags":["leetCode"],"title":"Learn from leetCode","uri":"https://tyrangyang.github.io/TyrangYang_blog/leetcode-idea/"},{"categories":["C++"],"content":"Introduction of Lambda expression in C++ and how to use it. ","date":"2020-01-26","objectID":"https://tyrangyang.github.io/TyrangYang_blog/lambda-cpp/:0:0","tags":["lambda","c++"],"title":"Lambda in C++","uri":"https://tyrangyang.github.io/TyrangYang_blog/lambda-cpp/"},{"categories":["C++"],"content":"What is Lambda in C++ Lambda expression is a new feature since c++11. It is used to create anonymous function object to simplify programming process. ","date":"2020-01-26","objectID":"https://tyrangyang.github.io/TyrangYang_blog/lambda-cpp/:1:0","tags":["lambda","c++"],"title":"Lambda in C++","uri":"https://tyrangyang.github.io/TyrangYang_blog/lambda-cpp/"},{"categories":["C++"],"content":"How Lambda expressions are composed [capture](parameters) mutable -\u003e return type {statement} // ... #include \u003cfunctional\u003e// ... std:function\u003cint(int, int)\u003e add = [](int a, int b) -\u003e int {return a+b;}; ","date":"2020-01-26","objectID":"https://tyrangyang.github.io/TyrangYang_blog/lambda-cpp/:2:0","tags":["lambda","c++"],"title":"Lambda in C++","uri":"https://tyrangyang.github.io/TyrangYang_blog/lambda-cpp/"},{"categories":["C++"],"content":"capture Capture variables from context. capture statement meaning [] not capture any variable from context [x, \u0026y] capture x by passing value, y by passing reference [\u0026] capture all variables by passing reference [=] capture all variables by passing value [\u0026,x] capture all variables by passing reference, expect x [=,\u0026x] capture all variables by passing value, expect x ","date":"2020-01-26","objectID":"https://tyrangyang.github.io/TyrangYang_blog/lambda-cpp/:2:1","tags":["lambda","c++"],"title":"Lambda in C++","uri":"https://tyrangyang.github.io/TyrangYang_blog/lambda-cpp/"},{"categories":["C++"],"content":"parameter Same as parameter in normal function. This part is optional actually when no parameter is needed. “()” parentheses can be omitted as well. ","date":"2020-01-26","objectID":"https://tyrangyang.github.io/TyrangYang_blog/lambda-cpp/:2:2","tags":["lambda","c++"],"title":"Lambda in C++","uri":"https://tyrangyang.github.io/TyrangYang_blog/lambda-cpp/"},{"categories":["C++"],"content":"mutable / exception It is a optional keyword. In default, lambda return a const range in another word you cannot change value captured from context. You can change it by adding mutable keyword. exception is declare the exception type. like throw(int) ","date":"2020-01-26","objectID":"https://tyrangyang.github.io/TyrangYang_blog/lambda-cpp/:2:3","tags":["lambda","c++"],"title":"Lambda in C++","uri":"https://tyrangyang.github.io/TyrangYang_blog/lambda-cpp/"},{"categories":["C++"],"content":"return type Same as function return type. It is optional part. It can be omitted when return type is void or just one return keyword in statement so that compiler can automatically recognize. ","date":"2020-01-26","objectID":"https://tyrangyang.github.io/TyrangYang_blog/lambda-cpp/:2:4","tags":["lambda","c++"],"title":"Lambda in C++","uri":"https://tyrangyang.github.io/TyrangYang_blog/lambda-cpp/"},{"categories":["C++"],"content":"statement The function body where you can use variable captured from context and parameters. It can be empty but cannot be omitted. ","date":"2020-01-26","objectID":"https://tyrangyang.github.io/TyrangYang_blog/lambda-cpp/:2:5","tags":["lambda","c++"],"title":"Lambda in C++","uri":"https://tyrangyang.github.io/TyrangYang_blog/lambda-cpp/"},{"categories":["C++"],"content":"How to use it ","date":"2020-01-26","objectID":"https://tyrangyang.github.io/TyrangYang_blog/lambda-cpp/:3:0","tags":["lambda","c++"],"title":"Lambda in C++","uri":"https://tyrangyang.github.io/TyrangYang_blog/lambda-cpp/"},{"categories":["C++"],"content":"Functor loop each element in a container (like map or reduce) std::vector\u003cint\u003e some_list; int total = 0; for (int i = 0; i \u003c 5; ++i) some_list.push_back(i); // 0 1 2 3 4 std::for_each(begin(some_list), end(some_list), [](int\u0026 x) { x++; }); // some_list // 1 2 3 4 5 std::for_each(begin(some_list), end(some_list), [\u0026total](int x) { total += x; }); // total 15 std::sort(begin(some_list), end(some_list), [](int a, int b){return a\u003eb;}); // some_list // 5 4 3 2 1 ","date":"2020-01-26","objectID":"https://tyrangyang.github.io/TyrangYang_blog/lambda-cpp/:3:1","tags":["lambda","c++"],"title":"Lambda in C++","uri":"https://tyrangyang.github.io/TyrangYang_blog/lambda-cpp/"},{"categories":["C++"],"content":"Function #include \u003ciostream\u003e#include \u003cfunctional\u003eusing namespace std; int main(void) { int x = 8, y = 9; auto add = [](int a, int b) { return a + b; }; std::function\u003cint(int, int)\u003e Add = [=](int a, int b) { return a + b; }; cout \u003c\u003c \"add: \" \u003c\u003c add(x, y) \u003c\u003c endl; cout \u003c\u003c \"Add: \" \u003c\u003c Add(x, y) \u003c\u003c endl; return 0; } ","date":"2020-01-26","objectID":"https://tyrangyang.github.io/TyrangYang_blog/lambda-cpp/:3:2","tags":["lambda","c++"],"title":"Lambda in C++","uri":"https://tyrangyang.github.io/TyrangYang_blog/lambda-cpp/"},{"categories":["C++"],"content":"Recursive Same with function but you have to specify the type of function instead of auto. Because compiler cannot automatically detected the type recursive function when calling itself. #include \u003ciostream\u003e#include \u003cfunctional\u003eusing namespace std; int main(void) { std::function\u003cint(int)\u003e recursion = [\u0026recursion](int n) { return n \u003c 2 ? 1 : recursion(n - 1) + recursion(n - 2); }; cout \u003c\u003c \"recursion(2):\" \u003c\u003c recursion(2) \u003c\u003c endl; cout \u003c\u003c \"recursion(3):\" \u003c\u003c recursion(3) \u003c\u003c endl; cout \u003c\u003c \"recursion(4):\" \u003c\u003c recursion(4) \u003c\u003c endl; return 0; } Meanwhile, tail recursion: #include \u003ciostream\u003e#include \u003cfunctional\u003eusing namespace std; int main(void) { function\u003cuint64_t(uint64_t, uint64_t, uint64_t,uint64_t)\u003e fibo = [\u0026fibo](uint64_t a, uint64_t b, uint64_t cur, uint64_t r){ if(cur != r) return fibo(b, a+b , cur+1, r ); return b; }; function\u003cuint64_t(uint64_t)\u003e recursion = [\u0026fibo](uint64_t n) { if (n \u003c 2) return (uint64_t)1; return fibo(1, 1, 1, n); }; uint64_t in = 35; cout \u003c\u003c \"recursion(\"\u003c\u003c in \u003c\u003c\"):\" \u003c\u003c recursion(in) \u003c\u003c endl; return 0; } ","date":"2020-01-26","objectID":"https://tyrangyang.github.io/TyrangYang_blog/lambda-cpp/:3:3","tags":["lambda","c++"],"title":"Lambda in C++","uri":"https://tyrangyang.github.io/TyrangYang_blog/lambda-cpp/"},{"categories":["Terminal"],"content":"What is crontab Crontab is a toll to schedule commands. You can run your terminal command on a specific schedule like run a command every day or every weekends. ","date":"2020-01-23","objectID":"https://tyrangyang.github.io/TyrangYang_blog/crontab/:1:0","tags":["terminal","crontab"],"title":"Crontab overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/crontab/"},{"categories":["Terminal"],"content":"Basic command crontab [-u user] {-l | -e | -r} command utility -l list your cron job -r remove your cron job -e edit your cron job -u specific a user ","date":"2020-01-23","objectID":"https://tyrangyang.github.io/TyrangYang_blog/crontab/:2:0","tags":["terminal","crontab"],"title":"Crontab overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/crontab/"},{"categories":["Terminal"],"content":"How to schedule a command Cron job looks like: # ┌───────────── minute (0 - 59) # │ ┌───────────── hour (0 - 23) # │ │ ┌───────────── day of month (1 - 31) # │ │ │ ┌───────────── month (1 - 12) # │ │ │ │ ┌───────────── day of week (0 - 6) (Sunday to Saturday; # │ │ │ │ │ 7 is also Sunday on some systems) # │ │ │ │ │ # │ │ │ │ │ # * * * * * command_to_execute # export date into a file every minutes * * * * * date \u003e\u003e ~/Desktop/test.txt # Mon to Fri, 2:00, 2:30 , 4:00, 4:30 */30 2,4 * * 1-5 echo \"hello world\" symbol meaning * any value , value list separator - range of value / step values ","date":"2020-01-23","objectID":"https://tyrangyang.github.io/TyrangYang_blog/crontab/:3:0","tags":["terminal","crontab"],"title":"Crontab overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/crontab/"},{"categories":["Terminal"],"content":"crontab.guru crontab.guru which is a website to check whether your schedule is correct. ","date":"2020-01-23","objectID":"https://tyrangyang.github.io/TyrangYang_blog/crontab/:4:0","tags":["terminal","crontab"],"title":"Crontab overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/crontab/"},{"categories":["Terminal"],"content":"Reference Thanks Corey Schafer’s video ","date":"2020-01-23","objectID":"https://tyrangyang.github.io/TyrangYang_blog/crontab/:5:0","tags":["terminal","crontab"],"title":"Crontab overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/crontab/"},{"categories":["Alg\u0026DataStr"],"content":"DFS \u0026 BFS are two basic algorithms to traverse a graph(or a tree). DFS is Deep-first search and BFS is Breath-first search. ","date":"2020-01-14","objectID":"https://tyrangyang.github.io/TyrangYang_blog/dfs-bfs/:0:0","tags":["algorithm"],"title":"DFS \u0026 BFS","uri":"https://tyrangyang.github.io/TyrangYang_blog/dfs-bfs/"},{"categories":["Alg\u0026DataStr"],"content":"Basic idea The idea behind two algorithms are identical but use different auxiliary data structure. DFS use stack and BFS use Queue. First, Every node have a mark to identify is already be visited or not(it could be a list or an attribute in node). Second, Push the start point into the auxiliary data structure and loop until structure is empty. Third, In the loop, pop a node from structure and mark as visited. Push all adjacent and unvisited node into it. ","date":"2020-01-14","objectID":"https://tyrangyang.github.io/TyrangYang_blog/dfs-bfs/:1:0","tags":["algorithm"],"title":"DFS \u0026 BFS","uri":"https://tyrangyang.github.io/TyrangYang_blog/dfs-bfs/"},{"categories":["Alg\u0026DataStr"],"content":"Pseudocode using loop ","date":"2020-01-14","objectID":"https://tyrangyang.github.io/TyrangYang_blog/dfs-bfs/:2:0","tags":["algorithm"],"title":"DFS \u0026 BFS","uri":"https://tyrangyang.github.io/TyrangYang_blog/dfs-bfs/"},{"categories":["Alg\u0026DataStr"],"content":"DFS V is vertexes or say nodes DFS(V){ visited = [f,f,f...f]; stack \u003c- empty; stack.push(V); while(stack not empty){ temp = stack.pop(); print(temp); for each v2 is adjacent to temp{ if (v2 is not visited){ stack.push(v2); mark v2 as visited; } } } } ","date":"2020-01-14","objectID":"https://tyrangyang.github.io/TyrangYang_blog/dfs-bfs/:2:1","tags":["algorithm"],"title":"DFS \u0026 BFS","uri":"https://tyrangyang.github.io/TyrangYang_blog/dfs-bfs/"},{"categories":["Alg\u0026DataStr"],"content":"BFS BFS(V){ visited = [f,f,f...f]; queue \u003c- empty; queue.push(v); while(queue not empty){ queue.pop(); print(temp); for each v2 is adjacent to temp{ if (v2 is not visited){ queue.push(v2); mark v2 as visited; } } } } ","date":"2020-01-14","objectID":"https://tyrangyang.github.io/TyrangYang_blog/dfs-bfs/:2:2","tags":["algorithm"],"title":"DFS \u0026 BFS","uri":"https://tyrangyang.github.io/TyrangYang_blog/dfs-bfs/"},{"categories":["Alg\u0026DataStr"],"content":"Pseudocode using recursion ","date":"2020-01-14","objectID":"https://tyrangyang.github.io/TyrangYang_blog/dfs-bfs/:3:0","tags":["algorithm"],"title":"DFS \u0026 BFS","uri":"https://tyrangyang.github.io/TyrangYang_blog/dfs-bfs/"},{"categories":["Alg\u0026DataStr"],"content":"DFS G is the graph and V is the start vertex. DFS(G, V){ set V as visited for all W which is adjacent V{ if W is not visited{ DFS(G, W); } } } find path Modify from DFS. But BFS still work G is the graph , V is the start vertex and Z is the end vertex; P is a stack for store the result findPathDFS(G, V, Z){ set V is visited P.push(V); if(V == Z) return P; for all W that is adjacent to V{ if W is not visited{ P.push(W); findPath(G, W, Z) P.pop() // pop W } } P.pop() // pop V (find the node that all nodes adjacent to it are visited and It is not target) } cycle finding G is the graph , V is the start vertex; P is a stack for store the current node and T is result; findCycle(G, V){ set V is visited P.push(V); for all W that is adjacent to V{ if W is not visited{ findCycle(G, W) } else{ do{ temp = P.pop(); T.push(temp); }while(temp == W) } } P.pop() } ","date":"2020-01-14","objectID":"https://tyrangyang.github.io/TyrangYang_blog/dfs-bfs/:3:1","tags":["algorithm"],"title":"DFS \u0026 BFS","uri":"https://tyrangyang.github.io/TyrangYang_blog/dfs-bfs/"},{"categories":["Alg\u0026DataStr"],"content":"What is millerRabin algorithm The Miller–Rabin primality test or Rabin–Miller primality test is a primality test: an algorithm which determines whether a given number is prime, similar to the Fermat primality test and the Solovay–Strassen primality test. It was first discovered by Russian mathematician M. M. Artjuhov in 1967.[1] Gary L. Miller rediscovered it in 1976; Miller’s version of the test is deterministic, but its correctness relies on the unproven extended Riemann hypothesis.[2] Michael O. Rabin modified it to obtain an unconditional probabilistic algorithm in 1980.[3] ","date":"2020-01-13","objectID":"https://tyrangyang.github.io/TyrangYang_blog/miller-rabin/:1:0","tags":["algorithm","data structure"],"title":"Miller Rabin Algorithm","uri":"https://tyrangyang.github.io/TyrangYang_blog/miller-rabin/"},{"categories":["Alg\u0026DataStr"],"content":"PowerMod ","date":"2020-01-13","objectID":"https://tyrangyang.github.io/TyrangYang_blog/miller-rabin/:2:0","tags":["algorithm","data structure"],"title":"Miller Rabin Algorithm","uri":"https://tyrangyang.github.io/TyrangYang_blog/miller-rabin/"},{"categories":["Alg\u0026DataStr"],"content":"What problem it solve When you want to mod a number which is the product of two big numbers, this algorithm is necessary. Like a^n mod m. ","date":"2020-01-13","objectID":"https://tyrangyang.github.io/TyrangYang_blog/miller-rabin/:2:1","tags":["algorithm","data structure"],"title":"Miller Rabin Algorithm","uri":"https://tyrangyang.github.io/TyrangYang_blog/miller-rabin/"},{"categories":["Alg\u0026DataStr"],"content":"Code // a^n mod m uint64_t powermod(uint64_t a, uint64_t n, uint64_t m){ uint64_t prod = 1; // a^11 11 = 8 + 2 + 1 = 01011 // a^11 = a^(1+2+8) = a^1 * a^2 * a^8 // the basic idea is shift the bit. It will more understandable than odd/even number. // if the last bit is 0, we make a become a^2. // if the last bit is 1, prod * a. while(n \u003e 0){ if(n % 2 != 0) // n\u00261 // n is odd, n\u00261 is true prod = prod * a % m; a = a * a % m; // can not be prod = prod * prod % m // Because prod * prod will multipul extra a inside. // For n = 11, n(binary)=01011, (((prod * a)^2 * a)^2^2 * a)^2. this is wrong // However, prod should be prod * a * a^2 * a^8. n = n / 2; // compiler n\u003e\u003e=1 } return prod; }//O(logn) ","date":"2020-01-13","objectID":"https://tyrangyang.github.io/TyrangYang_blog/miller-rabin/:2:2","tags":["algorithm","data structure"],"title":"Miller Rabin Algorithm","uri":"https://tyrangyang.github.io/TyrangYang_blog/miller-rabin/"},{"categories":["Alg\u0026DataStr"],"content":"How Miller-Rabin works ","date":"2020-01-13","objectID":"https://tyrangyang.github.io/TyrangYang_blog/miller-rabin/:3:0","tags":["algorithm","data structure"],"title":"Miller Rabin Algorithm","uri":"https://tyrangyang.github.io/TyrangYang_blog/miller-rabin/"},{"categories":["Alg\u0026DataStr"],"content":"Example code Here is the sample code #include \u003ciostream\u003e#include \u003ccmath\u003eusing namespace std; uint64_t powermod(uint64_t a, uint64_t n, uint64_t m){ uint64_t prod = 1; // a^11 11 = 8 + 2 + 1 = 01011 // a^11 = a^(1+2+8) = a^1 * a^2 * a^8 // the basic idea is shift the bit. It will more understandable than odd/even number. // if the last bit is 0, we make a become a^2. // if the last bit is 1, prod * a. while(n \u003e 0){ if(n % 2 != 0) // n\u00261 // n is odd, n\u00261 is true prod = prod * a % m; a = a * a % m; // can not be prod = prod * prod % m // Because prod * prod will multiple extra a inside. // For n = 11, n(binary)=01011, (((prod * a)^2 * a)^2^2 * a)^2. this is wrong // However, prod should be prod * a * a^2 * a^8. n = n / 2; // compiler n\u003e\u003e=1 } return prod; }//O(logn) // https://www.cnblogs.com/Norlan/p/5350243.html bool MillerRabin(uint64_t p, int k){ if(p \u003c 2) return false; for (int i = 0; i \u003c k ;i++){ uint64_t a = random(2,p-2); uint64_t d = p-1; uint64_t s = 0; // cout \u003c\u003c \"MillerRabin a= \"\u003c\u003c a \u003c\u003c \" p=\"\u003c\u003c p\u003c\u003c endl; while (d % 2 == 0) {// d \u0026 1 == 0 s++; d /= 2; //d \u003e\u003e =1 } // cout \u003c\u003c\"d=\" \u003c\u003c d \u003c\u003c \" s=\" \u003c\u003c s \u003c\u003c endl; // d*2^s = p-1 (d is odd number) // d contains high-order, non-zero bits(stripedd low zreo bits off) // s = #of bits that were stripp off uint64_t x = powermod(a,d,p); cout \u003c\u003c \"x= \" \u003c\u003c x \u003c\u003c endl; if(x == 1 || x == p-1) continue; // kurger version // for(int j = 0; j \u003c s-1; j++){ x = x * x % p; if (x == 1) return false; if (x == p-1) goto nextTry; } return false; nextTry:; // ************** // // my version // // for (int j = 0; j \u003c s-1; ++j) // { // x = x * x % p // if(x == 1) // return false; // if(x == p-1) // break; // } // if(x != p-1) // return false; // ************** // } return true; // probably? } ","date":"2020-01-13","objectID":"https://tyrangyang.github.io/TyrangYang_blog/miller-rabin/:4:0","tags":["algorithm","data structure"],"title":"Miller Rabin Algorithm","uri":"https://tyrangyang.github.io/TyrangYang_blog/miller-rabin/"},{"categories":["Overview"],"content":"What is makefile. How to write a makefile. Ref: https://opensource.com/article/18/8/what-how-makefile ","date":"2020-01-12","objectID":"https://tyrangyang.github.io/TyrangYang_blog/makefile-overview/:0:0","tags":["makefile"],"title":"Makefile overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/makefile-overview/"},{"categories":["Overview"],"content":"What is makefile A makefile is a file containing a set of directives used by a make build automation tool to generate a target/goal. You may have used make to compile a program from source code. ","date":"2020-01-12","objectID":"https://tyrangyang.github.io/TyrangYang_blog/makefile-overview/:1:0","tags":["makefile"],"title":"Makefile overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/makefile-overview/"},{"categories":["Overview"],"content":"How to write makefile To summarize, below is the syntax of a typical rule: target: prerequisites \u003cTAB\u003e recipe As an example, a target might be a binary file that depends on prerequisites (source files). On the other hand, a prerequisite can also be a target that depends on other dependencies: final_target: sub_target final_target.c Recipe_to_create_final_target sub_target: sub_target.c Recipe_to_create_sub_target It is not necessary for the target and prerequisites to be a file; it could be just a name for the recipe, as in our example. We call these “phony targets.” ","date":"2020-01-12","objectID":"https://tyrangyang.github.io/TyrangYang_blog/makefile-overview/:2:0","tags":["makefile"],"title":"Makefile overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/makefile-overview/"},{"categories":["Overview"],"content":"Example run: test ./test test: test.o g++ test.o -o test test.o: test.cc g++ -std=c++11 -c test.cc ","date":"2020-01-12","objectID":"https://tyrangyang.github.io/TyrangYang_blog/makefile-overview/:3:0","tags":["makefile"],"title":"Makefile overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/makefile-overview/"},{"categories":["Posts"],"content":"Some keyboards shortcuts when using safari ","date":"2020-01-10","objectID":"https://tyrangyang.github.io/TyrangYang_blog/safari-shotcut/:0:0","tags":["safari","shortcut"],"title":"Safari Shortcut","uri":"https://tyrangyang.github.io/TyrangYang_blog/safari-shotcut/"},{"categories":["Posts"],"content":"Navigating Webpages Use arrow keys to go up and down. Use Option+up/down or Shift+Space / Space to scroll quickly. Use Command+up/down goto the top \u0026 button. ","date":"2020-01-10","objectID":"https://tyrangyang.github.io/TyrangYang_blog/safari-shotcut/:1:0","tags":["safari","shortcut"],"title":"Safari Shortcut","uri":"https://tyrangyang.github.io/TyrangYang_blog/safari-shotcut/"},{"categories":["Posts"],"content":"Open Pages in Tabs Use Command+T to open a new Tab. Use Shift+Command+Left/right arrow or Control+Tab / Control+Shift+Tab to move from tab to tab. Use Command+W to close current tab. Use Command+Z to reopen a closed tab. Use Command+Option+W to close all tabs expect current tab. Use Command+[ / ] to go through history. ","date":"2020-01-10","objectID":"https://tyrangyang.github.io/TyrangYang_blog/safari-shotcut/:2:0","tags":["safari","shortcut"],"title":"Safari Shortcut","uri":"https://tyrangyang.github.io/TyrangYang_blog/safari-shotcut/"},{"categories":["Terminal"],"content":"Zsh \u0026 Bash Since MacOs 10.15(Catalina). The default shell switch from bash to zsh. It is hard to say which one is better however Zsh has been used more widely than bash especially from Linux user. ","date":"2020-01-08","objectID":"https://tyrangyang.github.io/TyrangYang_blog/my-zsh-setting/:1:0","tags":["ohmyzsh","zsh","bash","terminal"],"title":"My Zsh setting","uri":"https://tyrangyang.github.io/TyrangYang_blog/my-zsh-setting/"},{"categories":["Terminal"],"content":"Zsh The Z shell (also known as zsh) is a Unix shell that is built on top of bash (the default shell for macOS (Before MacOs Catalina)) with additional features. It’s recommended to use zsh over bash. It’s also highly recommended to install a framework with zsh as it makes dealing with configuration, plugins and themes a lot nicer. Install zsh using Homebrew: brew install zsh Now you should install a framework, we recommend to use Oh My Zsh or Prezto. Note that you should pick one of them, not use both. The configuration file for zsh is called .zshrc and lives in your home folder (~/.zshrc). ","date":"2020-01-08","objectID":"https://tyrangyang.github.io/TyrangYang_blog/my-zsh-setting/:2:0","tags":["ohmyzsh","zsh","bash","terminal"],"title":"My Zsh setting","uri":"https://tyrangyang.github.io/TyrangYang_blog/my-zsh-setting/"},{"categories":["Terminal"],"content":"OhMyZsh Webpage for OhMyZsh ","date":"2020-01-08","objectID":"https://tyrangyang.github.io/TyrangYang_blog/my-zsh-setting/:3:0","tags":["ohmyzsh","zsh","bash","terminal"],"title":"My Zsh setting","uri":"https://tyrangyang.github.io/TyrangYang_blog/my-zsh-setting/"},{"categories":["Terminal"],"content":"Installation Via curl: sh -c \"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\" Via wegt: sh -c \"$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)\" No $ which is shows on webpage. ","date":"2020-01-08","objectID":"https://tyrangyang.github.io/TyrangYang_blog/my-zsh-setting/:3:1","tags":["ohmyzsh","zsh","bash","terminal"],"title":"My Zsh setting","uri":"https://tyrangyang.github.io/TyrangYang_blog/my-zsh-setting/"},{"categories":["Terminal"],"content":"Themes There are bunch of different themes by default and all in themes folder. But I use a customize one. link Thanks for the article from Steve Losh. It actually give me many idea. ","date":"2020-01-08","objectID":"https://tyrangyang.github.io/TyrangYang_blog/my-zsh-setting/:3:2","tags":["ohmyzsh","zsh","bash","terminal"],"title":"My Zsh setting","uri":"https://tyrangyang.github.io/TyrangYang_blog/my-zsh-setting/"},{"categories":["Terminal"],"content":"My own theme Link I mix several themes and add some feature by my self. There something can list: My own color theme and character The color using the default color theme provided by terminal.app itself. You can change it in terminal\u003epreference. Character is searching from shapeCatcher. PROMPT %~ in PROMPT means print out the whole path. In steven’s version, he wrote a new function to limit the number of path that will be displayed. However, we can add a number to achieve the goal. %1~ will just show the current directory name. %2~ also show the previous one. timeClock I wrote a function to display the current time by a clock character. The basic idea is to get the system time and to match correct USCII code. The drawbacks are that it only update after enter a new line and clock only have characters every 30 mins. ","date":"2020-01-08","objectID":"https://tyrangyang.github.io/TyrangYang_blog/my-zsh-setting/:3:3","tags":["ohmyzsh","zsh","bash","terminal"],"title":"My Zsh setting","uri":"https://tyrangyang.github.io/TyrangYang_blog/my-zsh-setting/"},{"categories":["Terminal"],"content":"plugin git This is default plugin which associate all git features. g can represent git fzf fzf a general-purpose command-line fuzzy finder. On it’s own it’s not very useful but when combined with other tools it becomes super powerful. We need install(brew install fzf) fzf first and add it in zsh plugin. A video tutorial ","date":"2020-01-08","objectID":"https://tyrangyang.github.io/TyrangYang_blog/my-zsh-setting/:3:4","tags":["ohmyzsh","zsh","bash","terminal"],"title":"My Zsh setting","uri":"https://tyrangyang.github.io/TyrangYang_blog/my-zsh-setting/"},{"categories":["Overview"],"content":"Basic Documentation: https://erlang.org/doc/search/ ","date":"2019-12-14","objectID":"https://tyrangyang.github.io/TyrangYang_blog/erlang/:1:0","tags":["erlang"],"title":"Erlang overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/erlang/"},{"categories":["Overview"],"content":"Functional language Erlang is a functional language. Code need compile and running line by line. Every line need finish by a .. like: A = 1.. ","date":"2019-12-14","objectID":"https://tyrangyang.github.io/TyrangYang_blog/erlang/:1:1","tags":["erlang"],"title":"Erlang overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/erlang/"},{"categories":["Overview"],"content":"Module Every erlang file will consider as a module. You console will compile all module you want. You have to add -module(\u003cfilename\u003e). into first line. Module should be same with filename without suffix. In erl console, run c(\u003cfilename\u003e). to compile it. Run a function is like: \u003cmoduleName\u003e: \u003cfunctionName\u003e(...\u003cargument\u003e) Also you need export a list contained all function you expect to export. Like -export([append/2,distance/2, double/1, drop/2]). or -compile(export_all). to export all function. append/2 means a function called append with 2 arguments. ","date":"2019-12-14","objectID":"https://tyrangyang.github.io/TyrangYang_blog/erlang/:1:2","tags":["erlang"],"title":"Erlang overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/erlang/"},{"categories":["Overview"],"content":"Variable \u0026 item Variable a word starting with upper case. like A or Result. item is a word starting from lower case. like request or add. Variable store the value. item use for matching. ","date":"2019-12-14","objectID":"https://tyrangyang.github.io/TyrangYang_blog/erlang/:1:3","tags":["erlang"],"title":"Erlang overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/erlang/"},{"categories":["Overview"],"content":"Bind In erlang, No concept about assigning a value to a variable. It is actually bind a variable to a value. Once they are bound together you cannot to assign a new value to it. A = 1. # right B = 2. # right A = B, # wrong. Because A is already bound. ","date":"2019-12-14","objectID":"https://tyrangyang.github.io/TyrangYang_blog/erlang/:1:4","tags":["erlang"],"title":"Erlang overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/erlang/"},{"categories":["Overview"],"content":"Function Sample function: sample(A) -\u003e A. The last line of Function is the return value. Use ; to represent end point of a branch. if (A == true) and (B == true) -\u003e true; true -\u003e false end. ","date":"2019-12-14","objectID":"https://tyrangyang.github.io/TyrangYang_blog/erlang/:2:0","tags":["erlang"],"title":"Erlang overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/erlang/"},{"categories":["Overview"],"content":"Multi-thread Erlang use message passing module to deal with multi thread. Each thread have own mailbox, stack and heap. ","date":"2019-12-14","objectID":"https://tyrangyang.github.io/TyrangYang_blog/erlang/:3:0","tags":["erlang"],"title":"Erlang overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/erlang/"},{"categories":["Overview"],"content":"thread id Each thread have a id called Pid. You need use Pid as an address and sending the message through it. ","date":"2019-12-14","objectID":"https://tyrangyang.github.io/TyrangYang_blog/erlang/:3:1","tags":["erlang"],"title":"Erlang overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/erlang/"},{"categories":["Overview"],"content":"receive and send message echo() -\u003e receive {echo, From, Ref, Msg} -\u003e From ! {responds, self(), Ref, Msg}, echo(); {stop} -\u003e ok end. ","date":"2019-12-14","objectID":"https://tyrangyang.github.io/TyrangYang_blog/erlang/:3:2","tags":["erlang"],"title":"Erlang overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/erlang/"},{"categories":["Overview"],"content":"spawn Reference: http://erlang.org/doc/man/erlang.html#spawn-1 We need spawn/1, spawn/2, spawn/3 to generate new thread, usually we use spawn/3. The basic idea is giving a function that running initially at new thread. This function can calling another function inside the module. Pid = spawn(?MODULE, echo, []). This line means we generate a new thread with a function called echo in unknown module (usually self module). The argument list is empty and the thread id bind with Pid. ","date":"2019-12-14","objectID":"https://tyrangyang.github.io/TyrangYang_blog/erlang/:3:3","tags":["erlang"],"title":"Erlang overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/erlang/"},{"categories":["Overview"],"content":"special ","date":"2019-12-14","objectID":"https://tyrangyang.github.io/TyrangYang_blog/erlang/:4:0","tags":["erlang"],"title":"Erlang overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/erlang/"},{"categories":["Overview"],"content":"fold This is a basic function which is same as reduce() in javascript. In standard library, erlang have lists:foldl(F,A,[H|T]). foldl is folding the list by a given function from left to right. foldr is from right to left. foldl(_F, A, []) -\u003e A; foldl(F, A, [H|T]) -\u003e fold(F, F(H, A), [T]). foldr(_F, A, []) -\u003e A; foldr(F, A, [H|T]) -\u003e F(H, foldr(F, A, T)). _F means F is unnecessary since first part of function not use F. [H|T] is unique characteristic of erlang. H is the first element. T is the rest. [H|T] = [1,2,3,4,5]. H is 1. T is [2,3,4,5] We can run this function:foldl(fun (H, A) -\u003e H + A end, 0 , [1,2,3,4,5]). ","date":"2019-12-14","objectID":"https://tyrangyang.github.io/TyrangYang_blog/erlang/:4:1","tags":["erlang"],"title":"Erlang overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/erlang/"},{"categories":["Overview"],"content":"MakeFile Sample makefile from a erlang homework: all: erlc *erl erl -eval \"lexgrm:start(), halt()\" -noshell -detached run: all erl clean: rm -f *beam grm.erl lex.erl ","date":"2019-12-14","objectID":"https://tyrangyang.github.io/TyrangYang_blog/erlang/:5:0","tags":["erlang"],"title":"Erlang overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/erlang/"},{"categories":["SSH"],"content":"Extension ","date":"2019-12-13","objectID":"https://tyrangyang.github.io/TyrangYang_blog/ssh-vscode/:1:0","tags":["ssh","vscode"],"title":"SSH in Vscode","uri":"https://tyrangyang.github.io/TyrangYang_blog/ssh-vscode/"},{"categories":["SSH"],"content":"Reference https://letswp.io/remote-development-visual-studio-code-amazon-ec2/ ","date":"2019-12-13","objectID":"https://tyrangyang.github.io/TyrangYang_blog/ssh-vscode/:2:0","tags":["ssh","vscode"],"title":"SSH in Vscode","uri":"https://tyrangyang.github.io/TyrangYang_blog/ssh-vscode/"},{"categories":["Terminal"],"content":"Reference Very useful blog: http://stevelosh.com/blog/2010/02/my-extravagant-zsh-prompt/#username-and-hostname http://zsh.sourceforge.net/Intro/intro_12.html#SEC12 ","date":"2019-12-12","objectID":"https://tyrangyang.github.io/TyrangYang_blog/zshell-overview/:1:0","tags":["zsh","bash"],"title":"Z-shell overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/zshell-overview/"},{"categories":["Terminal"],"content":"Variable name usage %m Hostname %n Username %d Directory from / %~ Directory from ~ %t time (12) %T time (24) %d and %~ can add a number to specify how many previous path will show. Like %1~ ","date":"2019-12-12","objectID":"https://tyrangyang.github.io/TyrangYang_blog/zshell-overview/:2:0","tags":["zsh","bash"],"title":"Z-shell overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/zshell-overview/"},{"categories":["Terminal"],"content":"Guide to zsh Here is the link to A User’s Guide to the Z-Shell ","date":"2019-12-12","objectID":"https://tyrangyang.github.io/TyrangYang_blog/zshell-overview/:3:0","tags":["zsh","bash"],"title":"Z-shell overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/zshell-overview/"},{"categories":["Terminal"],"content":"single quotes \u0026 double quotes RPROMPT=\"$(command)\" # this will run command, then set RPROMPT to the result RPROMPT='$(command)' # this will set RPROMPT to run command each time it is printed ","date":"2019-12-12","objectID":"https://tyrangyang.github.io/TyrangYang_blog/zshell-overview/:4:0","tags":["zsh","bash"],"title":"Z-shell overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/zshell-overview/"},{"categories":["Terminal"],"content":"Date man Date %a locale’s abbreviated weekday name (e.g., Sun) %A locale’s full weekday name (e.g., Sunday) %b locale’s abbreviated month name (e.g., Jan) %B locale’s full month name (e.g., January) %c locale’s date and time (e.g., Thu Mar 3 23:05:25 2005) %C century; like %Y, except omit last two digits (e.g., 20) %d day of month (e.g., 01) %D date; same as %m/%d/%y %e day of month, space padded; same as %_d %F full date; same as %Y-%m-%d %g last two digits of year of ISO week number (see %G) %G year of ISO week number (see %V); normally useful only with %V %h same as %b %H hour (00..23) %I hour (01..12) %j day of year (001..366) %k hour, space padded ( 0..23); same as %_H %l hour, space padded ( 1..12); same as %_I %m month (01..12) %M minute (00..59) %n a newline %N nanoseconds (000000000..999999999) %p locale’s equivalent of either AM or PM; blank if not known %P like %p, but lower case %r locale’s 12-hour clock time (e.g., 11:11:04 PM) %R 24-hour hour and minute; same as %H:%M %s seconds since 1970-01-01 00:00:00 UTC %S second (00..60) %t a tab %T time; same as %H:%M:%S %u day of week (1..7); 1 is Monday %U week number of year, with Sunday as first day of week (00..53) %V ISO week number, with Monday as first day of week (01..53) %w day of week (0..6); 0 is Sunday %W week number of year, with Monday as first day of week (00..53) %x locale’s date representation (e.g., 12/31/99) %X locale’s time representation (e.g., 23:13:48) %y last two digits of year (00..99) %Y year %z +hhmm numeric time zone (e.g., -0400) %:z +hh:mm numeric time zone (e.g., -04:00) %::z +hh:mm:ss numeric time zone (e.g., -04:00:00) %:::z numeric time zone with : to necessary precision (e.g., -04, +05:30) %Z alphabetic time zone abbreviation (e.g., EDT) ","date":"2019-12-12","objectID":"https://tyrangyang.github.io/TyrangYang_blog/zshell-overview/:5:0","tags":["zsh","bash"],"title":"Z-shell overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/zshell-overview/"},{"categories":["Terminal"],"content":"My ZSH theme function prompt_char { git branch \u003e/dev/null 2\u003e/dev/null \u0026\u0026 echo '±' \u0026\u0026 return hg root \u003e/dev/null 2\u003e/dev/null \u0026\u0026 echo '☿' \u0026\u0026 return echo '' } function virtualenv_info { [ $VIRTUAL_ENV ] \u0026\u0026 echo '('`basename $VIRTUAL_ENV`') ' } function timeClock { HOUR=$(date +'%I') # 1 - 12 MIN=$(date +'%M') # 0 - 59 if [[ $HOUR -eq 1 \u0026\u0026 MIN -lt 30 ]]; then echo '\\U1F550' elif [[ $HOUR -eq 1 \u0026\u0026 MIN -ge 30 ]]; then echo '\\U1F55C' elif [[ $HOUR -eq 2 \u0026\u0026 MIN -lt 30 ]]; then echo '\\U1F551' elif [[ $HOUR -eq 2 \u0026\u0026 MIN -ge 30 ]]; then echo '\\U1F55D' elif [[ $HOUR -eq 3 \u0026\u0026 MIN -lt 30 ]]; then echo '\\U1F552' elif [[ $HOUR -eq 3 \u0026\u0026 MIN -ge 30 ]]; then echo '\\U1F55E' elif [[ $HOUR -eq 4 \u0026\u0026 MIN -lt 30 ]]; then echo '\\U1F553' elif [[ $HOUR -eq 4 \u0026\u0026 MIN -ge 30 ]]; then echo '\\U1F55F' elif [[ $HOUR -eq 5 \u0026\u0026 MIN -lt 30 ]]; then echo '\\U1F554' elif [[ $HOUR -eq 5 \u0026\u0026 MIN -ge 30 ]]; then echo '\\U1F560' elif [[ $HOUR -eq 6 \u0026\u0026 MIN -lt 30 ]]; then echo '\\U1F555' elif [[ $HOUR -eq 6 \u0026\u0026 MIN -ge 30 ]]; then echo '\\U1F561' elif [[ $HOUR -eq 7 \u0026\u0026 MIN -lt 30 ]]; then echo '\\U1F556' elif [[ $HOUR -eq 7 \u0026\u0026 MIN -ge 30 ]]; then echo '\\U1F562' elif [[ $HOUR -eq 8 \u0026\u0026 MIN -lt 30 ]]; then echo '\\U1F557' elif [[ $HOUR -eq 8 \u0026\u0026 MIN -ge 30 ]]; then echo '\\U1F563' elif [[ $HOUR -eq 9 \u0026\u0026 MIN -lt 30 ]]; then echo '\\U1F558' elif [[ $HOUR -eq 9 \u0026\u0026 MIN -ge 30 ]]; then echo '\\U1F564' elif [[ $HOUR -eq 10 \u0026\u0026 MIN -lt 30 ]]; then echo '\\U1F559' elif [[ $HOUR -eq 10 \u0026\u0026 MIN -ge 30 ]]; then echo '\\U1F565' elif [[ $HOUR -eq 11 \u0026\u0026 MIN -lt 30 ]]; then echo '\\U1F55A' elif [[ $HOUR -eq 11 \u0026\u0026 MIN -ge 30 ]]; then echo '\\U1F566' elif [[ $HOUR -eq 12 \u0026\u0026 MIN -lt 30 ]]; then echo '\\U1F55B' elif [[ $HOUR -eq 12 \u0026\u0026 MIN -ge 30 ]]; then echo '\\U1F567' fi } PROMPT='%{$fg[yellow]%}🜲 %{$fg[red]%}%n%{$reset_color%} %{$fg_bold[green]%}%2~ $(git_prompt_info)%{$reset_color%}$(virtualenv_info)$(prompt_char) ' RPROMPT='$(timeClock)' ZSH_THEME_GIT_PROMPT_PREFIX=\"%{$fg[blue]%}\" ZSH_THEME_GIT_PROMPT_SUFFIX=\"%{$reset_color%}\" ZSH_THEME_GIT_PROMPT_DIRTY=\"⥀ \" ZSH_THEME_GIT_PROMPT_CLEAN=\"\" ","date":"2019-12-12","objectID":"https://tyrangyang.github.io/TyrangYang_blog/zshell-overview/:6:0","tags":["zsh","bash"],"title":"Z-shell overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/zshell-overview/"},{"categories":["Posts"],"content":"Js event loop | Call stack | task queue This website shows how js running with single thread to handle concurrency ","date":"2019-11-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/callback-promise-async/:1:0","tags":["javascript","nodejs"],"title":"Callback, Promise and Async/await in js","uri":"https://tyrangyang.github.io/TyrangYang_blog/callback-promise-async/"},{"categories":["Posts"],"content":"Synchronous \u0026 asynchronous Function run synchronously means code is running as same as your writing. But in real situation, some code may need time to running but you don’t want all code is block. Therefore, you may need some technique to let this part running asynchronously which means this part of code is block and the rest of code is not. But things going ridiculous. Sometimes, the all code need to be async so that make sure is running synchronously. For example, your code maybe like: // get some data from api (async part) // print data // update data through api (async part) // print success // print title Js may running like: // print data first (data is undefined) // print success (probably is undefined) // print title // get some data from api (async part) // update data through api (async part) You have to make all of code asynchronously so that you code can running synchronously. (all async) // get some data from api (async part) // print data // update data through api (async part) // print success (all async) // print title The reason is that js have two thread running background. The main thread find async part of code and let another thread (which is a queue) to process. In my example, all three print will processed by main thread and two async part process by queue. Actually you want the fist two print is process in sequence, therefore you need to move these two print into queue so that they can running synchronously. For print title, it really doesn’t matter when is actual running and it still processed by main thread. There are three different ways to move some part of code into queue. Callback, Promise and Async/await. ","date":"2019-11-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/callback-promise-async/:2:0","tags":["javascript","nodejs"],"title":"Callback, Promise and Async/await in js","uri":"https://tyrangyang.github.io/TyrangYang_blog/callback-promise-async/"},{"categories":["Posts"],"content":"Callback When talk about callback actually it has two means: First, Callback exist in any language actually. It means you pass a function as a parameter. let calculate = (num1, num2, callback) =\u003e { return callback(num1, num2); }; console.log( calculate(1, 2, (a, b) =\u003e { return a - b; }) ); These functions are running synchronously. The second means is using asynchronous function as a callback to solve async problem. In short, we call this strategy as callback as well. setTimeout(callback, time) is a async function which means callback will be run after a given time. console.log('Getting data'); setTimeout(() =\u003e { console.log('Data got!'); }, 500); Data got! will be printed after Getting data printed 0.5 second This a fake example for getting data. function printData(data) { console.log(data); } function getData(callback) { setTimeout(() =\u003e { console.log('Getting data'); let data = 'DATA'; callback(data); }, 500); } getData(printData); ","date":"2019-11-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/callback-promise-async/:3:0","tags":["javascript","nodejs"],"title":"Callback, Promise and Async/await in js","uri":"https://tyrangyang.github.io/TyrangYang_blog/callback-promise-async/"},{"categories":["Posts"],"content":"Promise Promise is like a technique to deal with async. It actually use callback but make it more readable and useable. function printData(data) { console.log(data); } function getData() { return new Promise((resolve, reject) =\u003e { setTimeout(() =\u003e { console.log('Getting data'); let data = 'DATA'; let error = false; if (!error) { resolve(data); } else { reject('Some Error.'); } }, 500); }); } getData() .then(printData) .catch((err) =\u003e console.log(err)); resolve will get val and passing to the next step which then() and reject is for handle error which catch by catch(). Promise also provide some other feature. Like Promise.all([list of promise]) all() will pass val contained all promise return val after all promise is finish let promise1 = Promise.resolve('First'); let promise2 = 'Second'; let promise3 = new Promise((resolve, reject) =\u003e { setTimeout(() =\u003e { resolve('Goodbye'); }, 1000); }); Promise.all([promise1, promise2, promise3]).then((val) =\u003e console.log(val)); // [ 'First', 'Second', 'Goodbye' ] (after one second) Promise.race([promise1, promise2, promise3]).then((val) =\u003e console.log(val)); // as soon as one of the promises in an iterable fulfills or rejects // probably: 'Second' goes fast ","date":"2019-11-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/callback-promise-async/:4:0","tags":["javascript","nodejs"],"title":"Callback, Promise and Async/await in js","uri":"https://tyrangyang.github.io/TyrangYang_blog/callback-promise-async/"},{"categories":["Posts"],"content":"Async \u0026 Await async and await is another syntax to deal with Promise. Basically, await will add behind a function which return a promise and get the data will passing to then. You can have a variable to get the data and go next. All await must inside a function notified as async. Now your code is same with writing code synchronously. Like example from beginning: // get some data from api (async part) // print data // update data through api (async part) // print success // print title using Async \u0026 Await is like async function{ let data = await// get some data from api (async part) // print data let success = await// update data through api (async part) // print success } // print title // run function Another example from promise: function printData(data) { console.log(data); } function getData() { return new Promise((resolve, reject) =\u003e { setTimeout(() =\u003e { console.log('Getting data'); let data = 'DATA'; let error = false; if (!error) { resolve(data); } else { reject('Some Error.'); } }, 500); }); } async function main() { let data = await getData(); printData(data); } main(); ","date":"2019-11-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/callback-promise-async/:5:0","tags":["javascript","nodejs"],"title":"Callback, Promise and Async/await in js","uri":"https://tyrangyang.github.io/TyrangYang_blog/callback-promise-async/"},{"categories":["Posts"],"content":"Prevent tryCatch hell async function getDataTryCatchHell{ let a, b, c; try { a = await fetch(); } catch (err) { handleErr(err); } try { b = await fetch(); } catch (err) { handleErr(err); } try { c = await fetch(); } catch (err) { handleErr(err); } } Usually just append .catch() function behind the await function, async function getData{ let a = await fetch(...).catch(err=\u003e handleErr(err)); let b = await fetch(...).catch(err=\u003e handleErr(err)); let c = await fetch(...).catch(err=\u003e handleErr(err)); } A better way is creating a function return data and error. async function awesome() { try { const data = await fetch(); return [data, null]; } catch (err) { return [null, err]; } } async function main() { let [data, err] = awesome(); if (err) { return; } console.log(err); } ","date":"2019-11-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/callback-promise-async/:5:1","tags":["javascript","nodejs"],"title":"Callback, Promise and Async/await in js","uri":"https://tyrangyang.github.io/TyrangYang_blog/callback-promise-async/"},{"categories":["Posts"],"content":"Author: Dmitri Pavlutin Reference: https://dmitripavlutin.com/gentle-explanation-of-this-in-javascript/ ","date":"2019-11-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/what-is-this-in-js/:0:0","tags":["javascript","nodejs"],"title":"What is \"this\" in javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/what-is-this-in-js/"},{"categories":["Posts"],"content":"Concept Invocation of a function is executing the code that makes the body of a function, or simply calling the function. For example parseInt function invocation is parseInt('15'). Context of an invocation is the value of this within function body. For example the invocation of map.set('key', 'value') has the context map. Scope of a function is the set of variables, objects, functions accessible within a function body. ","date":"2019-11-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/what-is-this-in-js/:1:0","tags":["javascript","nodejs"],"title":"What is \"this\" in javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/what-is-this-in-js/"},{"categories":["Posts"],"content":"Invocations function invocation: alert(‘Hello World!') method invocation: console.log(‘Hello World!') constructor invocation: new RegExp('\\d’) indirect invocation: alert.call(undefined, ‘Hello World!') ","date":"2019-11-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/what-is-this-in-js/:2:0","tags":["javascript","nodejs"],"title":"What is \"this\" in javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/what-is-this-in-js/"},{"categories":["Posts"],"content":"this in different invocations this is base on the context of calling this function ","date":"2019-11-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/what-is-this-in-js/:3:0","tags":["javascript","nodejs"],"title":"What is \"this\" in javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/what-is-this-in-js/"},{"categories":["Posts"],"content":"Function invocation Example: const numbers = { numberA: 5, numberB: 10, sum: function () { console.log(this === numbers); // =\u003e true const calculate = () =\u003e { console.log(this === numbers); // =\u003e true return this.numberA + this.numberB; }; return calculate(); }, }; numbers.sum(); // =\u003e 15 console.log(this === window); returns true only when your running in a browser otherwise it will give an ERR from Node.js this in a function invocation this means windows function sum(a, b) { console.log(this === window); // =\u003e true this.myNumber = 20; // add 'myNumber' property to global object return a + b; } // sum() is invoked as a function // this in sum() is a global object (window) sum(15, 16); // =\u003e 31 window.myNumber; // =\u003e 20 this in a function invocation, strict mode this is undefined function nonStrictSum(a, b) { // non-strict mode console.log(this === window); // =\u003e true return a + b; } function strictSum(a, b) { 'use strict'; // strict mode is enabled console.log(this === undefined); // =\u003e true return a + b; } // nonStrictSum() is invoked as a function in non-strict mode // this in nonStrictSum() is the window object nonStrictSum(5, 6); // =\u003e 11 // strictSum() is invoked as a function in strict mode // this in strictSum() is undefined strictSum(8, 12); // =\u003e 20 Pitfall: this in an inner function ⚠️ A common trap with the function invocation is thinking that this is the same in an inner function as in the outer function. 👍Correctly the context of the inner function depends only on its invocation type, but not on the outer function’s context. this is windows for inner function. const numbers = { numberA: 5, numberB: 10, sum: function () { console.log(this === numbers); // =\u003e true function calculate() { // this is window or undefined in strict mode console.log(this === numbers); // =\u003e false return this.numberA + this.numberB; } return calculate(); }, }; numbers.sum(); // =\u003e NaN or throws TypeError in strict mode ⚠️ numbers.sum() is a method invocation. But calculate() is a function invocation There are two ways to fix this: Use calculate.call(this) that an indirect invocation of a function. const numbers = { numberA: 5, numberB: 10, sum: function () { console.log(this === numbers); // =\u003e true function calculate() { console.log(this === numbers); // =\u003e true return this.numberA + this.numberB; } // use .call() method to modify the context return calculate.call(this); }, }; numbers.sum(); // =\u003e 15 of use arrow function const numbers = { numberA: 5, numberB: 10, sum: function () { console.log(this === numbers); // =\u003e true const calculate = () =\u003e { console.log(this === numbers); // =\u003e true return this.numberA + this.numberB; }; return calculate(); }, }; numbers.sum(); // =\u003e 15 ","date":"2019-11-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/what-is-this-in-js/:3:1","tags":["javascript","nodejs"],"title":"What is \"this\" in javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/what-is-this-in-js/"},{"categories":["Posts"],"content":"Method invocation Example: const myObject = { // helloFunction is a method helloFunction: function () { return 'Hello World!'; }, }; // method invocation const message = myObject.helloFunction(); this in a method invocation this is object who call the function // Object const calc = { num: 0, increment() { console.log(this === calc); // =\u003e true this.num += 1; return this.num; }, }; // method invocation. this is calc calc.increment(); // =\u003e 1 calc.increment(); // =\u003e 2 // Object inherits a method from its prototype const myDog = Object.create({ sayName() { console.log(this === myDog); // =\u003e true return this.name; }, }); myDog.name = 'Milo'; // method invocation. this is myDog myDog.sayName(); // =\u003e 'Milo' // class syntax class Planet { constructor(name) { this.name = name; } getName() { console.log(this === earth); // =\u003e true return this.name; } } const earth = new Planet('Earth'); // method invocation. the context is earth earth.getName(); // =\u003e 'Earth' Pitfall: Separating method from its object ⚠️ A method can be extracted from an object into a separated variable like: function Pet(type, legs) { this.type = type; this.legs = legs; this.logInfo = function () { console.log(this === myCat); // =\u003e false console.log(`The ${this.type}has ${this.legs}legs`); }; } const myCat = new Pet('Cat', 4); console.log(setTimeout(myCat.logInfo, 1000)); // logs \"The undefined has undefined legs\" // or throws a TypeError in strict mode In this code myCat.logInfo is extracted from object myCat as a function. Therefore is equal to: setTimeout(function () { console.log(this === myCat); // =\u003e false console.log(`The ${this.type}has ${this.legs}legs`); }, 1000); Now you can see that this is invocated by function invocation rather than method invocation. To fix this, Use bind setTimeout(myCat.logInfo.bind(myCat)) or arrow function for logInfo. ","date":"2019-11-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/what-is-this-in-js/:3:2","tags":["javascript","nodejs"],"title":"What is \"this\" in javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/what-is-this-in-js/"},{"categories":["Posts"],"content":"Constructor invocation Example: function Country(name, traveled) { this.name = name ? name : 'United Kingdom'; this.traveled = Boolean(traveled); // transform to a boolean } Country.prototype.travel = function () { this.traveled = true; }; // Constructor invocation const france = new Country('France', false); // Constructor invocation const unitedKingdom = new Country(); france.travel(); // Travel to France // class since ECMAScript 2015 class City { constructor(name, traveled) { this.name = name; this.traveled = false; } travel() { this.traveled = true; } } // Constructor invocation const paris = new City('Paris', false); paris.travel(); this in a constructor invocation this is the newly created object function Foo() { // this is fooInstance this.property = 'Default Value'; } // Constructor invocation const fooInstance = new Foo(); console.log(fooInstance.property); // =\u003e 'Default Value' Pitfall: Forgetting about new function Vehicle(type, wheelsCount) { this.type = type; this.wheelsCount = wheelsCount; return this; } // Function invocation const car = Vehicle('Car', 4); car.type; // =\u003e 'Car' car.wheelsCount; // =\u003e 4 car === window; // =\u003e true PROBLEM! Although it looks good in this code, But actually this is a function invocation not constructor invocation. Since it is not return any error, losing new may cause potential problem. The correct way is to prevent the function invocation. function Vehicle(type, wheelsCount) { if (!(this instanceof Vehicle)) { throw Error('Error: Incorrect invocation'); } this.type = type; this.wheelsCount = wheelsCount; return this; } // Constructor invocation const car = new Vehicle('Car', 4); car.type; // =\u003e 'Car' car.wheelsCount; // =\u003e 4 car instanceof Vehicle; // =\u003e true // Function invocation. Throws an error. const brokenCar = Vehicle('Broken Car', 3); ","date":"2019-11-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/what-is-this-in-js/:3:3","tags":["javascript","nodejs"],"title":"What is \"this\" in javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/what-is-this-in-js/"},{"categories":["Posts"],"content":"Indirect invocation Indirect invocation is performed when a function is called using myFun.call() or myFun.apply() methods. myFun.call() means function be called with given context. The main difference between the two is that .call() accepts a list of arguments, for example myFun.call(thisValue, 'val1', 'val2'). But .apply() accepts a list of values in an array-like object, e.g. myFunc.apply(thisValue, ['val1', 'val2']). function increment(number) { return ++number; } increment.call(undefined, 10); // =\u003e 11 increment.apply(undefined, [10]); // =\u003e 11 this in an indirect invocation this is the first argument of .call() or .apply() function Runner(name) { console.log(this instanceof Rabbit); // =\u003e true this.name = name; } function Rabbit(name, countLegs) { console.log(this instanceof Rabbit); // =\u003e true // Indirect invocation. Call parent constructor. Runner.call(this, name); this.countLegs = countLegs; } const myRabbit = new Rabbit('White Rabbit', 4); myRabbit; // { name: 'White Rabbit', countLegs: 4 } ","date":"2019-11-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/what-is-this-in-js/:3:4","tags":["javascript","nodejs"],"title":"What is \"this\" in javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/what-is-this-in-js/"},{"categories":["Posts"],"content":"Bound function A bound function is a function whose context and/or arguments are bound to specific values. The different between .call() and .bind() is that .bind() bind context and function to a new function but call() calling function directly with a given context. function multiply(number) { 'use strict'; return this * number; } // create a bound function with context const double = multiply.bind(2); // invoke the bound function double(3); // =\u003e 6 double(10); // =\u003e 20 this inside a bound function this is the first argument of .bind() const numbers = { array: [3, 5, 10], getNumbers() { return this.array; }, }; let another = { array: 'Array from another scope', }; // method invocation const getNumbersResult = numbers.getNumbers(); console.log(getNumbersResult); // =\u003e [3, 5, 10] // Extract method from object const simpleGetNumbers = numbers.getNumbers; // This is a function invocation console.log(simpleGetNumbers()); // =\u003e undefined or throws an error in strict mode // Create a bound function const boundGetNumbers = numbers.getNumbers.bind(numbers); console.log(boundGetNumbers()); // =\u003e [3, 5, 10] // bind to another scope const anotherBindFunction = numbers.getNumbers.bind(another); console.log(anotherBindFunction()); // =\u003e \"Array from another scope\" Tight context binding .bind() makes a permanent context link function getThis() { 'use strict'; return this; } const one = getThis.bind(1); console.log(one.call(2)); // =\u003e 1 console.log(one.apply(2)); // =\u003e 1 console.log(one.bind(2)()); // =\u003e 1 // construct invocation console.log(new getThis()); // =\u003e Object ","date":"2019-11-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/what-is-this-in-js/:3:5","tags":["javascript","nodejs"],"title":"What is \"this\" in javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/what-is-this-in-js/"},{"categories":["Posts"],"content":"Arrow function Arrow function is designed to declare the function in a shorter form and lexically bind the context. Example of arrow function const sumArguments = (...args) =\u003e { return args.reduce((result, item) =\u003e result + item); }; console.log(sumArguments.name); // =\u003e 'sumArguments' console.log(sumArguments(5, 5, 6)); // =\u003e 16 this in arrow function arrow function is already bind this is the enclosing context class Point { constructor(x, y) { this.x = x; this.y = y; } log() { console.log(this === myPoint); // =\u003e true setTimeout(() =\u003e { console.log(this === myPoint); // =\u003e true console.log(this.x + ':' + this.y); // =\u003e '95:165' }, 1000); } } const myPoint = new Point(95, 165); myPoint.log(); If use a regular function for setTimeout will be setTimeout(function(){...}.bind{this}) Another example shows how allow function bind to context. function test() { console.log('1.', this); function inner1() { console.log('2.', this); } let inner2 = () =\u003e { console.log('3.', this); }; inner1(); inner2(); } test(); // 1.window 2.window 3.window new test(); // 1.test 2.window(function invocation) 3.test(function invocation but bind this) If the arrow function is defined in the topmost scope (outside any function), the context is always the global object (window in a browser): const getContext = () =\u003e { console.log(this === window); // =\u003e true return this; }; console.log(getContext() === window); // =\u003e true An arrow function is bound with the lexical context once and forever. const numbers = [1, 2]; (function () { const get = () =\u003e { console.log(this === numbers); // =\u003e true return this; }; console.log(this === numbers); // =\u003e true get(); // =\u003e [1, 2] // Try to change arrow function context manually get.call([0]); // =\u003e [1, 2] get.apply([0]); // =\u003e [1, 2] get.bind([0])(); // =\u003e [1, 2] }.call(numbers)); Pitfall: defining method with an arrow function function Period(hours, minutes) { this.hours = hours; this.minutes = minutes; } Period.prototype.format = () =\u003e { console.log(this === window); // =\u003e true return this.hours + ' hours and ' + this.minutes + ' minutes'; }; const walkPeriod = new Period(2, 30); walkPeriod.format(); // =\u003e 'undefined hours and undefined minutes' In this particular situation, better use regular function. ","date":"2019-11-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/what-is-this-in-js/:3:6","tags":["javascript","nodejs"],"title":"What is \"this\" in javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/what-is-this-in-js/"},{"categories":["Posts"],"content":"Conclusion Function invocation –\u003e windows Method invocation –\u003e Scope where method belongs to Constructor invocation –\u003e Object scope Indirection invocation –\u003e Depends on your given context Because the function invocation has the biggest impact on this, from now on do not ask yourself: Where is this taken from? but do ask yourself: How is the function invoked? For an arrow function ask yourself: What is this where the arrow function is defined? ","date":"2019-11-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/what-is-this-in-js/:4:0","tags":["javascript","nodejs"],"title":"What is \"this\" in javascript","uri":"https://tyrangyang.github.io/TyrangYang_blog/what-is-this-in-js/"},{"categories":["Posts"],"content":"In same case, you may want to have a different style depend on your state or a variable. Now we can have two ways to achieve that. ","date":"2019-11-15","objectID":"https://tyrangyang.github.io/TyrangYang_blog/how-to-have-dynamic-classname/:0:0","tags":["html","javascript","react"],"title":"How to have a dynamic class name","uri":"https://tyrangyang.github.io/TyrangYang_blog/how-to-have-dynamic-classname/"},{"categories":["Posts"],"content":"classNames This is a javascript for conditionally joining classNames. Here is: Github Basically, you can combine any number of classNames. const classNames = require('classNames'); classNames('foo', { bar: true, duck: false }, 'baz', { quux: true }); // =\u003e 'foo bar baz quux' ","date":"2019-11-15","objectID":"https://tyrangyang.github.io/TyrangYang_blog/how-to-have-dynamic-classname/:1:0","tags":["html","javascript","react"],"title":"How to have a dynamic class name","uri":"https://tyrangyang.github.io/TyrangYang_blog/how-to-have-dynamic-classname/"},{"categories":["Posts"],"content":"ES6 template literals You can just use template literals. let condition = true; let res = condition ? 'first' : 'second'; // res = first Therefore when your write className in react: let condition = true; \u003cdiv className={condition ? '' : 'error'; }\u003e TEST\u003c/div\u003e // class name can be exist or not \u003cdiv className={condition ? 'right' : 'error'; }\u003e TEST\u003c/div\u003e // class name can be right or error I have an example in a simple react application(Github). The color of launch name is depend on whether it success or not. ","date":"2019-11-15","objectID":"https://tyrangyang.github.io/TyrangYang_blog/how-to-have-dynamic-classname/:2:0","tags":["html","javascript","react"],"title":"How to have a dynamic class name","uri":"https://tyrangyang.github.io/TyrangYang_blog/how-to-have-dynamic-classname/"},{"categories":["Posts"],"content":"graphql Design Graphql is base on what your want ","date":"2019-11-14","objectID":"https://tyrangyang.github.io/TyrangYang_blog/spacex/:1:0","tags":["react","apollo"],"title":"A simple application apollo server and react","uri":"https://tyrangyang.github.io/TyrangYang_blog/spacex/"},{"categories":["Posts"],"content":"github https://github.com/TyrangYang/SpaceX_graphql_react ","date":"2019-11-14","objectID":"https://tyrangyang.github.io/TyrangYang_blog/spacex/:2:0","tags":["react","apollo"],"title":"A simple application apollo server and react","uri":"https://tyrangyang.github.io/TyrangYang_blog/spacex/"},{"categories":["Posts"],"content":"Vscode page for shortcut ","date":"2019-11-01","objectID":"https://tyrangyang.github.io/TyrangYang_blog/vscode-shortcut/:0:0","tags":["vscode","shortcut"],"title":"VSCode shortCut","uri":"https://tyrangyang.github.io/TyrangYang_blog/vscode-shortcut/"},{"categories":["Posts"],"content":"Short cut Source from Traversy Media YouTube Channel YouTube Github ","date":"2019-11-01","objectID":"https://tyrangyang.github.io/TyrangYang_blog/vscode-shortcut/:1:0","tags":["vscode","shortcut"],"title":"VSCode shortCut","uri":"https://tyrangyang.github.io/TyrangYang_blog/vscode-shortcut/"},{"categories":["Concurrent-programming"],"content":"Message passing echo() -\u003e receive {From, Msg} -\u003e From ! {Msg}, echo(); %^pattern^ %^response^ %^keep loop stop -\u003e true %^pattern^ ^a return value and stop receiving end. ","date":"2019-10-31","objectID":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-5/:1:0","tags":["concurrent","course note"],"title":"Concurrent Programming Course note 5","uri":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-5/"},{"categories":["Posts"],"content":"The app should Run when you open up your index.html file The conclusion is add \"homepage\":\".\", in package.json. medium.com/@louis.raymond ","date":"2019-10-28","objectID":"https://tyrangyang.github.io/TyrangYang_blog/open-react-app-by-index/:1:0","tags":["react"],"title":"Why Can’t I Open My React App By Clicking Index.html?","uri":"https://tyrangyang.github.io/TyrangYang_blog/open-react-app-by-index/"},{"categories":["Posts"],"content":"Still not work when you have client side router If you are routing client side, index.html may still not work. In this case, you may using BrowserRouter. Change it to HashRouter. Click: Different between them ","date":"2019-10-28","objectID":"https://tyrangyang.github.io/TyrangYang_blog/open-react-app-by-index/:2:0","tags":["react"],"title":"Why Can’t I Open My React App By Clicking Index.html?","uri":"https://tyrangyang.github.io/TyrangYang_blog/open-react-app-by-index/"},{"categories":["Overview"],"content":"Installation For mac sudo brew install redis-server open redis server redis-server test is work or not redis-cli ping ","date":"2019-10-15","objectID":"https://tyrangyang.github.io/TyrangYang_blog/redis/:1:0","tags":["web","redis"],"title":"Redis overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/redis/"},{"categories":["Overview"],"content":"basic command ECHO 'hello word QUIT SET foo 100 GET foo // 100 SET bar 'hello world' GET bar // hello world INCR foo // 101 DECR foo // 100 EXISTS foo // 1 EXISTS foo1 // 0 DEL bar EXISTS bar // 0 GET bar //(nir) FLUSHALL // all empty SET server:name someserver GET server:name // \"someserver\" SET server:port 8000 GET server:port SET greeting \"Hello world\" GET greeting EXPIRE greeting 50 // set expirations to 50 second TTL greeting SETEX greeting 30 \"hello world\" // set value and expiration PERSIST greeting // key will not expire TTL greeting // -1 MSET key1 \"hello\" key2 \"world\" APPEND key1 \" world\" RENAME key1 greeting LPUSH people \"Brad\" // 1 LPUSH people \"Jen\" // 2 LPUSH people \"Tom\" // 3 LRANGE people 0 -1 // return all // Tom Jen Brad LRANGE people 1 2 // Jen Brad RPUSH people \"Harry\" LRANGE people 0 -1 // Tom Jen Brad Harry LLEN people // 4 RPOP people // Harry LPOP people LINSERT people BEFORE \"Brad\" \"TOM\" LRANGE people 0 -1 // Jen Tom Brad SADD cars \"Ford\" SADD cars \"Honda\" SADD cars \"BMW\" SISMEMBER cars \"Ford\" // 1 SISMEMBER cars \"Chevy\" // 0 SMEMBER cars // Honda BMW Ford SCARD cars // 3 SMOVE cars mycars \"Ford\" SMEMBER cars // Honda BMW SMEMBER mycars // Ford SRAM cars \"BMW\" SMEMBER cars // Honda ZADD users 1980 \"Brad\" ZADD users 1975 \"Jen\" ZADD users 1990 \"Mike\" ZADD users 1990 \"Kate\" ZRANK users \"Mike\" // 3 ZRANK users \"Jen\" // 0 ZRANK users \"Brad\" // 1 ZRANGE users 0 -1 // Jen Brad Kate Mike ZINCRBY users 1 \"Jen\" // 1976 HSET user:brad name \"Brad\" HSET user:brad email \"brad@gmail.com\" HGET user:brad name HGET user:brad email HGETALL user:brad HMSET user:john name \"Jen\" email \"jen@yahoo.com\" age \"25\" HGETALL user:john HKEYS user:john HVAL user:john HINCERBY user:john age 1 // 26 HDEL user:john age // 1 HLEN user:john // 2 SAVE ","date":"2019-10-15","objectID":"https://tyrangyang.github.io/TyrangYang_blog/redis/:2:0","tags":["web","redis"],"title":"Redis overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/redis/"},{"categories":["Archive"],"content":"Development setting up for Mac This guide covers the basics of setting up a development environment on a new Mac. https://sourabhbajaj.com/mac-setup/ ","date":"2019-10-12","objectID":"https://tyrangyang.github.io/TyrangYang_blog/cool-website-archive/:1:0","tags":["website"],"title":"Some cool websites archive","uri":"https://tyrangyang.github.io/TyrangYang_blog/cool-website-archive/"},{"categories":["Archive"],"content":"shapeCatcher Draw a character and find the ASCII code http://shapecatcher.com/index.html ","date":"2019-10-12","objectID":"https://tyrangyang.github.io/TyrangYang_blog/cool-website-archive/:2:0","tags":["website"],"title":"Some cool websites archive","uri":"https://tyrangyang.github.io/TyrangYang_blog/cool-website-archive/"},{"categories":["Archive"],"content":"draw.io Draw diagram online https://www.draw.io ","date":"2019-10-12","objectID":"https://tyrangyang.github.io/TyrangYang_blog/cool-website-archive/:3:0","tags":["website"],"title":"Some cool websites archive","uri":"https://tyrangyang.github.io/TyrangYang_blog/cool-website-archive/"},{"categories":["Archive"],"content":"regular expression Good online tool to test and learn regular expression https://regexr.com ","date":"2019-10-12","objectID":"https://tyrangyang.github.io/TyrangYang_blog/cool-website-archive/:4:0","tags":["website"],"title":"Some cool websites archive","uri":"https://tyrangyang.github.io/TyrangYang_blog/cool-website-archive/"},{"categories":["Archive"],"content":"100 front end component design 100 react component design challenge https://www.florin-pop.com/blog/2019/09/100-days-100-projects/ ","date":"2019-10-12","objectID":"https://tyrangyang.github.io/TyrangYang_blog/cool-website-archive/:5:0","tags":["website"],"title":"Some cool websites archive","uri":"https://tyrangyang.github.io/TyrangYang_blog/cool-website-archive/"},{"categories":["Archive"],"content":"bootswatch Several bootstrap scheme. https://bootswatch.com ","date":"2019-10-12","objectID":"https://tyrangyang.github.io/TyrangYang_blog/cool-website-archive/:6:0","tags":["website"],"title":"Some cool websites archive","uri":"https://tyrangyang.github.io/TyrangYang_blog/cool-website-archive/"},{"categories":["Archive"],"content":"shields.io Get or create Readme badge https://shields.io ","date":"2019-10-12","objectID":"https://tyrangyang.github.io/TyrangYang_blog/cool-website-archive/:7:0","tags":["website"],"title":"Some cool websites archive","uri":"https://tyrangyang.github.io/TyrangYang_blog/cool-website-archive/"},{"categories":["Archive"],"content":"animate.css CSS file add animation https://daneden.github.io/animate.css/ ","date":"2019-10-12","objectID":"https://tyrangyang.github.io/TyrangYang_blog/cool-website-archive/:8:0","tags":["website"],"title":"Some cool websites archive","uri":"https://tyrangyang.github.io/TyrangYang_blog/cool-website-archive/"},{"categories":["Archive"],"content":"Library Genesis A Good library http://gen.lib.rus.ec ","date":"2019-10-12","objectID":"https://tyrangyang.github.io/TyrangYang_blog/cool-website-archive/:9:0","tags":["website"],"title":"Some cool websites archive","uri":"https://tyrangyang.github.io/TyrangYang_blog/cool-website-archive/"},{"categories":["Archive"],"content":"jsfiddle \u0026 codepen These are online coding panel for web-dev. codepen.io looks better https://jsfiddle.net https://codepen.io ","date":"2019-10-12","objectID":"https://tyrangyang.github.io/TyrangYang_blog/cool-website-archive/:10:0","tags":["website"],"title":"Some cool websites archive","uri":"https://tyrangyang.github.io/TyrangYang_blog/cool-website-archive/"},{"categories":["Archive"],"content":"HTML symbol entity https://dev.w3.org/html5/html-author/charref ","date":"2019-10-12","objectID":"https://tyrangyang.github.io/TyrangYang_blog/cool-website-archive/:11:0","tags":["website"],"title":"Some cool websites archive","uri":"https://tyrangyang.github.io/TyrangYang_blog/cool-website-archive/"},{"categories":["Archive"],"content":"excalidraw Virtual whiteboard for sketching hand-drawn like diagrams https://excalidraw.com ","date":"2019-10-12","objectID":"https://tyrangyang.github.io/TyrangYang_blog/cool-website-archive/:12:0","tags":["website"],"title":"Some cool websites archive","uri":"https://tyrangyang.github.io/TyrangYang_blog/cool-website-archive/"},{"categories":["Overview"],"content":"Init react Commend npx create-react-app . npx means you use this package but don’t download it. or with redux npx create-react-app my-app --template redux ","date":"2019-10-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react/:1:0","tags":["web","react"],"title":"React overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/react/"},{"categories":["Overview"],"content":"life cycle Class component lifecycle Function component method ","date":"2019-10-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react/:2:0","tags":["web","react"],"title":"React overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/react/"},{"categories":["Overview"],"content":"shouldComponentUpdate() Run before render() to check this component need to render or not. shouldComponentUpdate(nextProps, nextStates){ return boolean; } PureComponent can automatically do a shallow comparison to determine need to update or not export default React.memo(\u003ccomponent name\u003e) only compare props but it works for functional component ","date":"2019-10-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react/:2:1","tags":["web","react"],"title":"React overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/react/"},{"categories":["Overview"],"content":"getSnapshotBeforeUpdate it is invoked right before the most recently rendered output is committed getSnapshotBeforeUpdate(prevProps, prevState) { console.log('snapshot'); console.log(prevProps, prevState); return 1; } getSnapshotBeforeUpdate must pair with componentDidUpdate() ","date":"2019-10-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react/:2:2","tags":["web","react"],"title":"React overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/react/"},{"categories":["Overview"],"content":"Context API Doc: https://reactjs.org/docs/context.html#reactcreatecontext Use a context: React.createContext({defaultValue}) import the context your create. Warp you root component which you want to use this context in \u003cContextName.provider \u003e\u003c/ContextName.provider\u003e component under root context component will access to this context static contextType = MyContext Warp component like \u003cMyContext.Consumer\u003e {(value) =\u003e /_ render something based on the context value _/} \u003c/MyContext.Consumer\u003e All consumers that are descendants of a Provider will re-render whenever the Provider’s value prop changes. The propagation from Provider to its descendant consumers (including .contextType and useContext) is not subject to the shouldComponentUpdate method, so the consumer is updated even when an ancestor component skips an update. Context API is not for solve all state sharing problem. Think like Context provider change(even prevent update by shouldComponentUpdate) all consumer will re-render. The defaultValue argument is only used when a component does not have a matching Provider above it in the tree. This can be helpful for testing components in isolation without wrapping them. Note: passing undefined as a Provider value does not cause consuming components to use defaultValue. ","date":"2019-10-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react/:3:0","tags":["web","react"],"title":"React overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/react/"},{"categories":["Overview"],"content":"Ref React.createRef() API introduced in React 16.3. If you are using an earlier release of React, we recommend using callback refs instead. There are a few good use cases for refs: Managing focus, text selection, or media playback. Triggering imperative animations. Integrating with third-party DOM libraries. ","date":"2019-10-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react/:4:0","tags":["web","react"],"title":"React overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/react/"},{"categories":["Overview"],"content":"create ref class MyComponent extends React.Component { constructor(props) { super(props); this.myRef = React.createRef(); } render() { return \u003cdiv ref={this.myRef} /\u003e; } } ","date":"2019-10-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react/:4:1","tags":["web","react"],"title":"React overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/react/"},{"categories":["Overview"],"content":"access ref const node = this.myRef.current; ","date":"2019-10-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react/:4:2","tags":["web","react"],"title":"React overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/react/"},{"categories":["Overview"],"content":"Adding a Ref to a Class Component class CustomTextInput extends React.Component { constructor(props) { super(props); // create a ref to store the textInput DOM element this.textInput = React.createRef(); this.focusTextInput = this.focusTextInput.bind(this); } focusTextInput() { // Explicitly focus the text input using the raw DOM API // Note: we're accessing \"current\" to get the DOM node this.textInput.current.focus(); } render() { // tell React that we want to associate the \u003cinput\u003e ref // with the `textInput` that we created in the constructor return ( \u003cdiv\u003e \u003cinput type=\"text\" ref={this.textInput} /\u003e \u003cinput type=\"button\" value=\"Focus the text input\" onClick={this.focusTextInput} /\u003e \u003c/div\u003e ); } } class AutoFocusTextInput extends React.Component { constructor(props) { super(props); this.textInput = React.createRef(); } componentDidMount() { this.textInput.current.focusTextInput(); } render() { return \u003cCustomTextInput ref={this.textInput} /\u003e; } } ","date":"2019-10-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react/:4:3","tags":["web","react"],"title":"React overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/react/"},{"categories":["Overview"],"content":"Adding a Ref to a Functional Component By default, you may not use the ref attribute on function components because they don’t have instances: If you want to allow people to take a ref to your function component, you can use forwardRef (possibly in conjunction with useImperativeHandle), or you can convert the component to a class. useImperativeHandle + ForwardRef function FancyInput(props, ref) { const inputRef = useRef(); useImperativeHandle(ref, () =\u003e ({ focus: () =\u003e { inputRef.current.focus(); }, })); return \u003cinput ref={inputRef} /\u003e; } FancyInput = React.forwardRef(FancyInpacut); In this example, a parent component that renders \u003cFancyInput ref={inputRef} /\u003e would be able to call inputRef.current.focus(). ","date":"2019-10-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react/:4:4","tags":["web","react"],"title":"React overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/react/"},{"categories":["Overview"],"content":"React Hooks ","date":"2019-10-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react/:5:0","tags":["web","react"],"title":"React overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/react/"},{"categories":["Overview"],"content":"useState const [state, setstate] = useState(initialState); ","date":"2019-10-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react/:5:1","tags":["web","react"],"title":"React overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/react/"},{"categories":["Overview"],"content":"useEffect useEffect(() =\u003e { \u003ceffect\u003e; return () =\u003e { \u003ccleanup\u003e; }; }, [\u003cinput\u003e]); ","date":"2019-10-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react/:5:2","tags":["web","react"],"title":"React overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/react/"},{"categories":["Overview"],"content":"useContext Given an Example for useContext + useReducer In ContextProvider.jsx import React, { useReducer, useEffect, createContext } from 'react'; const initialState = { ID: '', }; export const store = createContext(initialState); const { Provider } = store; function ContextProvider({ children }) { const [state, dispatch] = useReducer((state, action) =\u003e { switch (action.type) { case 'setID': return { ...state, currentUserID: action.payload }; default: throw new Error(); } }, initialState); return \u003cProvider value={{ state, dispatch }}\u003e{children}\u003c/Provider\u003e; } export default ContextProvider; In ContextConsumer.jsx: import React, { useContext, useEffect } from 'react'; import { store } from './ContextProvider.jsx'; const ContextConsumer = () =\u003e { // get field that you pass in provider value const { state, dispatch } = useContext(store); useEffect(() =\u003e { dispatch({ type: 'setID', payload: 'ID1' }); }); return \u003cdiv\u003e {state.ID} \u003c/div\u003e; }; export default ContextConsumer; useContext(MyContext) is equivalent to static contextType = MyContext in a class, or to \u003cMyContext.Consumer\u003e But You still need a \u003cMyContext.Provider\u003e above in the tree to provide the value for this context. ","date":"2019-10-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react/:5:3","tags":["web","react"],"title":"React overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/react/"},{"categories":["Overview"],"content":"useReducer const initialState = { count: 0 }; function reducer(state, action) { switch (action.type) { case 'increment': return { count: state.count + action.payload }; case 'decrement': return { count: state.count - action.payload }; case 'clean': return { count: 0 }; default: throw new Error(); } } function Counter() { const [state, dispatch] = useReducer(reducer, initialState); useEffect(() =\u003e { dispatch({ type: 'clean' }); }, []); return ( \u003c\u003e Count: {state.count} \u003cbutton onClick={() =\u003e dispatch({ type: 'decrement', payload: 1 })}\u003e - \u003c/button\u003e \u003cbutton onClick={() =\u003e dispatch({ type: 'increment', payload: 1 })}\u003e + \u003c/button\u003e \u003c/\u003e ); } Unlike Redux dispatch function doesn’t need to add in useEffect or useCallback dependence list since dispatch always be a same function some trick useReducer is the shortest way to create a state for toggle a boolean value const [switch, toggleSwitch] = useReducer((state) =\u003e !state, false); // switch is a boolean // toggleSwitch is a function \u003cbutton onClick={()=\u003e{toggleSwitch()}} value={switch} /\u003e ","date":"2019-10-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react/:5:4","tags":["web","react"],"title":"React overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/react/"},{"categories":["Overview"],"content":"useRef useRef() creates a plain JavaScript object. The only difference between useRef() and creating a {current: ...} object yourself is that useRef will give you the same ref object on every render. ","date":"2019-10-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react/:5:5","tags":["web","react"],"title":"React overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/react/"},{"categories":["Overview"],"content":"useLayoutEffect The only different between useLayoutEffect and useEffect is that the useLayoutEffect is synchronous. Just same as componentDidMount and componentDidUpdate. useLayoutEffect() render useEffect() ","date":"2019-10-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react/:5:6","tags":["web","react"],"title":"React overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/react/"},{"categories":["Overview"],"content":"useImperativeHandle useImperativeHandle customizes the instance value that is exposed to parent components when using ref. It is rare to use. This is use for handle using ref to access functional component. See Usage in Ref ","date":"2019-10-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react/:5:7","tags":["web","react"],"title":"React overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/react/"},{"categories":["Overview"],"content":"React.lazy() The React.lazy function lets you render a dynamic import as a regular component. Component only be loaded when it will be rendered import React, { Suspense } from 'react'; // These lazy imports should put the end of other import code const OtherComponent = React.lazy(() =\u003e import('./OtherComponent')); const AnotherComponent = React.lazy(() =\u003e import('./AnotherComponent')); function MyComponent() { return ( \u003cdiv\u003e \u003cSuspense fallback={\u003cdiv\u003eLoading...\u003c/div\u003e}\u003e \u003csection\u003e \u003cOtherComponent /\u003e \u003cAnotherComponent /\u003e \u003c/section\u003e \u003c/Suspense\u003e \u003c/div\u003e ); } Tip These lazy imports should put the end of other import code You can even wrap multiple lazy components with a single Suspense component. ","date":"2019-10-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react/:6:0","tags":["web","react"],"title":"React overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/react/"},{"categories":["Overview"],"content":"Class Component vs Functional Component ","date":"2019-10-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react/:7:0","tags":["web","react"],"title":"React overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/react/"},{"categories":["Overview"],"content":"Class Component lifecycle ==\u003e Functional Component hooks Class component Functional component state + setState useState() componentDidMount() useEffect() with a empty input list componentDidUpdate() useEffect() with a input list contained which you want to change componentWillUnmount() useEffect() with a return callback function shouldComponentUpdate() export default React.memo() ","date":"2019-10-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react/:7:1","tags":["web","react"],"title":"React overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/react/"},{"categories":["Overview"],"content":"Logic extraction Suppose we have two components A and B that B is depends on A, the common solution is wrapping B in A. However, when the logic in A need to reuse, we cannot copy and parse A to everywhere. Extracting the logic is essential. const A = () =\u003e { // some logic will reuse return ( \u003cdiv\u003e // ... other component \u003cB_depends_on_A /\u003e \u003c/div\u003e ); }; // render \u003cA/\u003e const App = () =\u003e { return \u003cA /\u003e; }; NOTE There are THREE method in React to reuse component logic: High-Order Component, Render Props, Customize Hook(function component ONLY) This Blog is an example to extract logic by Three different way: Check this Blog ","date":"2019-10-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react/:8:0","tags":["web","react"],"title":"React overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/react/"},{"categories":["Overview"],"content":"High-Order Component Concretely, a higher-order component is a function that takes a component and returns a new component. const withA = (ComponentB) =\u003e { return (props) =\u003e { // some logic will reuse return ( \u003cdiv\u003e // ... other component \u003cComponentB {...props} /\u003e \u003c/div\u003e ); }; }; const BWithA = withA(\u003cB /\u003e); const App = () =\u003e { return \u003cBWithA args={...}\u003e; }; ","date":"2019-10-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react/:8:1","tags":["web","react"],"title":"React overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/react/"},{"categories":["Overview"],"content":"Render props Concretely, a render prop is a function prop that a component uses to know what to render. const A = ({ render }) =\u003e { // some logic will reuse const [state, setState] = useState(1); return ( \u003cdiv\u003e // ... other component {render(state)} \u003c/div\u003e ); }; const App = () =\u003e { return \u003cA render={(args) =\u003e \u003cB args={args} /\u003e} /\u003e; }; ","date":"2019-10-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react/:8:2","tags":["web","react"],"title":"React overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/react/"},{"categories":["Overview"],"content":"Customize Hooks Concretely, A custom Hook is a JavaScript function whose name starts with ”use” and that may call other Hooks. const useA = () =\u003e { // some logic calculation return [reuseLogicResult]; }; const App = () =\u003e { const [reuseLogicRes] = useA() return \u003cB args={reuseLogicRes} /\u003e} /\u003e; }; ","date":"2019-10-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react/:8:3","tags":["web","react"],"title":"React overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/react/"},{"categories":["Overview"],"content":"Common Pitfall ","date":"2019-10-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react/:9:0","tags":["web","react"],"title":"React overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/react/"},{"categories":["Overview"],"content":"Performance difference (SnapShot vs Current value) When React introduce hooks for functional component, closure problem will be brought in as well. This will cause different performance between class component and function component with same logic. These two component have same logic: import React, { useState } from 'react'; import ReactDOM from 'react-dom'; export class ClassProfilePage extends React.Component { showMessage = () =\u003e { alert('Followed ' + this.props.user); }; handleClick = () =\u003e { setTimeout(this.showMessage, 3000); }; render() { return ( \u003cbutton onClick={this.handleClick}\u003e Get Current value (class component) \u003c/button\u003e ); } } export function FunctionProfilePage(props) { const showMessage = () =\u003e { alert('Followed ' + props.user); }; const handleClick = () =\u003e { setTimeout(showMessage, 3000); }; return ( \u003cbutton onClick={handleClick}\u003e Get Snapshot (functional component) \u003c/button\u003e ); } function App() { const [state, setState] = useState(1); return ( \u003cdiv className=\"App\"\u003e \u003cbutton onClick={() =\u003e { setState((x) =\u003e x + x); }} \u003e double \u003c/button\u003e \u003cdiv\u003estate:{state}\u003c/div\u003e {/* snapshot */} \u003cFunctionProfilePage user={state} /\u003e {/* current value */} \u003cClassProfilePage user={state} /\u003e \u003c/div\u003e ); } Play with this example: Link Click Get button first and then click double. Class component will alert current value, however function component will alert snapshot. This is not a bug. This is a common question in Javascript due to the fact that every time you passing same reference or not. See another example: closure loop problem In React, Because props is immutable(assign a new obj when you want to change it) in functional component, each rendering has different props. Every click will generate a new props and setTimeout() display the value when you click. However, in Class component. After class generated, props is associated with class itself. Every rendering in class component have same this.props and this.props.user change overtime. Therefore, setTimeout() use same this.props and access this.props.user which is current value. This flowing code simulate this problem let props = { count: 10 }; const fnA = ({ count }) =\u003e { click = setTimeout(() =\u003e { console.log(count); }, 1000); click; }; class fnB { constructor(input) { this.props = input; } click = setTimeout(() =\u003e { console.log(this.props.count); }, 1000); } fnA(props); let res2 = new fnB(props); res2.click; props.count--; props.count--; props.count--; Solution Since we know different props display snapshot and same reference display current value. To get snapshot in class component, just assign the data that will alert to a new variable. (give several different value) To get current value in functional component, add a ref(react) / create a value outside the component and store value to it. (give a same reference) ","date":"2019-10-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react/:9:1","tags":["web","react"],"title":"React overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/react/"},{"categories":["Overview"],"content":"Initial state from props Ref: https://reactjs.org/docs/react-component.html#constructor It is NOT RECOMMEND that initialized state from props directly. Update props won’t be reflected in the state. Only use this pattern if you intentionally want to ignore prop updates. Class Base: constructor(props) { super(props); // Don't do this! this.state = { color: props.color }; } Functional Base: // Don't do this! const [state, setState] = useState(props.color); The correct way is: Class Base: constructor(props) { super(props); this.state = {}; } componentDidMount(){ this.setState({color: props.color}) } Functional Base: const { color } = props; const [state, setState] = useState(null); useEffect(() =\u003e { setState(color); }, [color]); ","date":"2019-10-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react/:9:2","tags":["web","react"],"title":"React overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/react/"},{"categories":["Overview"],"content":"React Posts Archive See my other post ","date":"2019-10-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react/:10:0","tags":["web","react"],"title":"React overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/react/"},{"categories":["Overview"],"content":"Structure ","date":"2019-10-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react/:11:0","tags":["web","react"],"title":"React overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/react/"},{"categories":["Overview"],"content":"package.json react \u0026 react-dom is necessary for web app. For mobile app need react-native instead of react-dom. ","date":"2019-10-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react/:11:1","tags":["web","react"],"title":"React overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/react/"},{"categories":["Overview"],"content":"public/index.html signal page application which is index.html Everything your do will inside \u003cdiv id=\"root\"\u003e\u003c/div\u003e ","date":"2019-10-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react/:11:2","tags":["web","react"],"title":"React overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/react/"},{"categories":["Overview"],"content":"src/index.js Entry point for react ","date":"2019-10-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react/:11:3","tags":["web","react"],"title":"React overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/react/"},{"categories":["Overview"],"content":"src/App.js All the component. Inside the class, the render() method is called life cycle method and to render the page. In JSX, you cannot use HTML class attribute. you have to use className. ","date":"2019-10-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react/:11:4","tags":["web","react"],"title":"React overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/react/"},{"categories":["Overview"],"content":"16.3 \u0026\u0026 before 16.3 link ","date":"2019-10-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/react/:12:0","tags":["web","react"],"title":"React overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/react/"},{"categories":["Concurrent-programming"],"content":"Monitor signal condition –\u003e waiting monitor –\u003e signaling ","date":"2019-09-25","objectID":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-4/:1:0","tags":["concurrent","course note"],"title":"Concurrent Programming Course note 4","uri":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-4/"},{"categories":["Concurrent-programming"],"content":"producer and consumer with a buffer whose size is one monitor PC { Object buffer; void produce(Object o){ if(buffer != null){ // while empty.wait(); } buffer = o; full.signal(); } Object consume() { if(buffer == null) // while full.wait(); Object temp = buffer; empty.signal(); return temp; } } ","date":"2019-09-25","objectID":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-4/:1:1","tags":["concurrent","course note"],"title":"Concurrent Programming Course note 4","uri":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-4/"},{"categories":["Concurrent-programming"],"content":"Semaphore // Assumption: E \u003c S \u003c W (Signal and urgent wait) monitor Semaphore { int permit; void acquire() { if(permit == 0){ permitsAvailable.wait(); } else { permit--; } } void release(){ if(!permitAvailable.isEmpty()){ permitsAvailable.signal(); } else{ permit++; } } } ","date":"2019-09-25","objectID":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-4/:2:0","tags":["concurrent","course note"],"title":"Concurrent Programming Course note 4","uri":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-4/"},{"categories":["Concurrent-programming"],"content":"readers and writers assume start first and stop monitor RW { int readers=0; int writers=0; void start_read(){ if (writer!=0 || !okToWrite.isEmpty()) okToRead.wait(); readers++; okToRead.signal(); // cascade signaling } void stop_read(){ readers--; if(readers == 0) okToWrite.signal(); } void start_write(){ if(writers!=0 || readers!=0) okToWrite.wait(); writers++; } void stop_write(){ writers--; if(okToRead.isEmpty()) okToWrite.signal(); else okToRead.signal(); } } ","date":"2019-09-25","objectID":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-4/:3:0","tags":["concurrent","course note"],"title":"Concurrent Programming Course note 4","uri":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-4/"},{"categories":["Concurrent-programming"],"content":"3 way sequence (booklet q4) monitor 3WS{ int state = 1; condition first, second, third; void first(){ while(state != 1) first.wait(); state = 2; second.signal(); } void second(){ while(state != 2) second.wait(); state = 3; third.signal(); } void third(){ while(state != 3) third.wait(); state = 1; first.signal(); } } ","date":"2019-09-25","objectID":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-4/:4:0","tags":["concurrent","course note"],"title":"Concurrent Programming Course note 4","uri":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-4/"},{"categories":["Concurrent-programming"],"content":"Booklet6 q5 monitor myBarrier{ final static int N = 3; int barrierCounter = 0; condition stop; // thread run before synchronize(); this.synchronize(); // thread run after synchronize(); synchronize(){ barrierCounter++; while(barrierCounter \u003c N) stop.wait(); stop.signal(); } } ","date":"2019-09-25","objectID":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-4/:5:0","tags":["concurrent","course note"],"title":"Concurrent Programming Course note 4","uri":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-4/"},{"categories":["Concurrent-programming"],"content":"Pizza question E = W \u003c S monitor Pizzeria{ int small, large; condition smallAvail, largeAvail; purchaseLargePizza(){ while(large == 0 \u0026\u0026 small \u003c 2){ largeAvail.wait(); } if(large \u003e 0){ large -- ; } else { small = small - 2; } } purchaseLargePizza(){ while(small == 0){ smallAvail.wait(); } small--; } bakeSmallPizza(){ small++; smallAvail.signal(); largeAvail.signal(); } bakeLargePizza(){ large++; largeAvail.signal(); } } ","date":"2019-09-25","objectID":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-4/:6:0","tags":["concurrent","course note"],"title":"Concurrent Programming Course note 4","uri":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-4/"},{"categories":["Concurrent-programming"],"content":" public class BarrierExample{ public static class Barrier{ private final Lock lock = new ReentrantLock(); private final Condition door1 = lock.newCondition(); private final Condition door2 = lock.newCondition(); private boolean d1 = false; private boolean d2 = true; private int c = 0; private final int n = 3; void synch(){ lock.lock(); try { while(d1){ door1.await(); } c++; if(c == n){ d2 = false; d1 = true; door2.signalAll(); } while(d2){ door2.await(); } c--; if(c == 0){ d1 = false; d2 = true; door1.signalAll(); } }catch (InterruptedException e) { e.printStackTrace(); } lock.unlock(); } public static void main(String[] args) { Barrier b1 = new Barrier(); Barrier b2 = new Barrier(); Thread t1 = new Thread(new p(\"a\",\"1\",b1, b2)); Thread t2 = new Thread(new p(\"b\",\"2\",b1, b2)); Thread t3 = new Thread(new p(\"c\",\"3\",b1, b2)); t1.start(); t2.start(); t3.start(); try { t1.join(); t2.join(); t3.join(); } catch (InterruptedException e) { e.printStackTrace(); } } } public static class P implements Runnable{ private String pres,post; Barrier barrier1, barrier2; public P(String pres, String post, Barrier barrier1, Barrier barrier2) { this.pres = pres; this.post = post; this.barrier1 = barrier1; this.barrier2 = barrier2; } public void run(){ for (int i = 0; i \u003c 100; i++) { System.out.println(pre); barrier1.synch(); System.out.println(post); barrier2.synch(); } } } } ","date":"2019-09-25","objectID":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-4/:7:0","tags":["concurrent","course note"],"title":"Concurrent Programming Course note 4","uri":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-4/"},{"categories":["STL-study-note"],"content":"Content Content Algorithm Overview Copy For each Generation Heap Merge Move Number Partition Permutation Remove Replace Reverse rotate Search Set Shuffle Sort Swap Test range Unique ","date":"2019-09-20","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/:1:0","tags":["c++","STL","algorithm"],"title":"All algorithm in C++","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/"},{"categories":["STL-study-note"],"content":"Algorithm Overview * –\u003e new feature from C++11 Algorithm Name Usage Mutating? Head File Complexity accumulate Accumulate values in range N numeric O(n) adjacent_difference Compute adjacent difference of range and return to another place N numeric O(n) adjacent_find Find first equal adjacent elements in range N algorithm O(n) all_of* Test condition on all elements in range N algorithm O(n) any_of* Test if any element in range fulfills condition N algorithm O(n) binary_search Test if value exists in sorted sequence N algorithm On average O(logn + 2). On non-random-access iterator is O(n) copy Copy range of elements N(copy) algorithm O(n) copy_backward Copy range of elements backward N(copy) algorithm O(n) copy_if* Copy certain elements of range N(copy) algorithm O(n) copy_n* Copies the first n elements from the range beginning N(copy) algorithm O(n) count Count appearances of value in range N algorithm O(n) count_if Return number of elements in range satisfying condition N algorithm O(n) equal Test whether the elements in two ranges are equal N algorithm O(n) equal_range Get sub range of equal elements N algorithm O(2logn + 1) for random access iterator, otherwise O(n) fill Fill range with value Y algorithm O(n) fill_n Assigns val to the first n elements of the sequence pointed by first Y algorithm O(n) find Find the first element in range N algorithm O(n) find_end Find last subsequence in range N algorithm O(m*(1+n-m)) find_first_of Returns an iterator to the first element in the range [first1,last1) that matches any of the elements in [first2,last2) N algorithm O(nm) find_if Find the first element in range in some condition N algorithm O(n) find_if_not* Find the first element in range in some condition N algorithm O(n) for_each Apply function to range N algorithm O(n) generate Assigns the value returned by successive calls to gen to the elements in the range [first,last) Y algorithm O(n) generate_n Assigns the value returned by successive calls to gen to the first n elements of the sequence pointed by first Y algorithm O(n) includes Test whether sorted range includes another sorted range N algorithm O(n) inner_product Compute cumulative inner product of range N numeric O(n) inplace_merge Merge consecutive sorted ranges Y algorithm O(n) if extra memory is available, otherwise is O(nlogn) iota Store increasing sequence Y numeric O(n) is_heap* Test if range is heap N algorithm O(n) is_heap_until* Find first element not in heap order. N algorithm O(n) is_partitioned* Test whether range is partitioned Y algorithm O(n) is_permutation* Compares the elements in the range [first1,last1) with those in the range beginning at first2, and returns true if they just different permutation N algorithm O(n) is_sorted* Check whether range is sorted N algorithm O(n) is_sorted_until* Find first unsorted element in range N algorithm O(n) iter_swap Swaps the elements pointed to by a and b Y algorithm O(1) lexicographical_compare Compare two range lexicographically. N algorithm O(n) lower_bond Return iterator to lower bound N algorithm O(logn + 1) for random access iterator, otherwise O(n) make_heap Make heap from range Y algorithm O(3n) max Returns the largest of a and b. If both are equivalent, a is returned. N algorithm O(1) max_element Return largest element in range N algorithm O(n) merge Merge sorted ranges Y algorithm O(n) min Returns the smallest of a and b. If both are equivalent, a is returned. N algorithm O(1) minmax* Return smallest and largest elements from give 2 value or initializer N algorithm O(1) minmax_element* Return smallest and largest elements in range N algorithm O(n) min_element Return smallest element in range N algorithm O(n) mismatch Return first position where two ranges differ N algorithm O(n) move* Move range of elements Y algorithm O(n) move_backward* Move range of elements backward Y algorithm O(n) next_permutation Rearranges the elements in the range [first,last) into the next lexicographically greater permutation Y ","date":"2019-09-20","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/:2:0","tags":["c++","STL","algorithm"],"title":"All algorithm in C++","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/"},{"categories":["STL-study-note"],"content":"Copy #include \u003ciostream\u003e#include \u003cvector\u003e#include \u003calgorithm\u003eusing namespace std; int main(int argc, char const *argv[]) { vector\u003cint\u003e iv = {1,2,3,4,5,6}; vector\u003cint\u003e iv2(6); copy(iv.begin(), iv.end(), iv2.begin()); // iv2: 1 2 3 4 5 6 vector\u003cint\u003e iv3(3); copy_if(iv.begin(), iv.end(), iv3.begin(), [](int a){return a % 2 == 0;}); // iv3: 2 4 6 vector\u003cint\u003e iv4(5); copy_n(iv.begin(), 5, iv4.begin()); // iv4: 1 2 3 4 5 6 vector\u003cint\u003e iv5(6); copy_backward(iv.begin(), iv.end(), iv5.end()); // iv5: 1 2 3 4 5 6 return 0; } Back to top ","date":"2019-09-20","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/:3:0","tags":["c++","STL","algorithm"],"title":"All algorithm in C++","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/"},{"categories":["STL-study-note"],"content":"For each #include \u003ciostream\u003e#include \u003cvector\u003e#include \u003calgorithm\u003eusing namespace std; int main(int argc, char const *argv[]) { vector\u003cint\u003e iv = {1,2,3,4,5,6}; for_each(iv.begin(), iv.end(), [](int x){cout \u003c\u003c x \u003c\u003c \" \";}); // cout:1 2 3 4 5 6 return 0; } Back to top ","date":"2019-09-20","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/:4:0","tags":["c++","STL","algorithm"],"title":"All algorithm in C++","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/"},{"categories":["STL-study-note"],"content":"Generation fill fill_n generate generate_n #include \u003ciostream\u003e#include \u003calgorithm\u003e#include \u003cvector\u003eusing namespace std; struct StartFrom { int start; StartFrom(int s):start(s){}; int operator() (){return start++;}; }; int main(int argc, char const *argv[]) { vector\u003cint\u003e iv1(8); //iv1: 0 0 0 0 0 0 0 0 fill(iv1.begin(), iv1.begin()+4, 1); //iv1: 1 1 1 1 0 0 0 0 fill_n(iv1.begin()+4, 3, 2); //iv1: 1 1 1 1 2 2 2 0 vector\u003cint\u003e iv2(8); //iv2: 0 0 0 0 0 0 0 0 StartFrom s1(5); generate(iv2.begin(), iv2.begin()+4, s1); //iv2: 5 6 7 8 0 0 0 0 StartFrom s2(10); generate_n(iv2.begin()+4, 2, s2); //iv2: 5 6 7 8 10 11 0 0 return 0; } Back to top ","date":"2019-09-20","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/:5:0","tags":["c++","STL","algorithm"],"title":"All algorithm in C++","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/"},{"categories":["STL-study-note"],"content":"Heap Heap algorithm need to cooperate with other container usually vector or array. More detail about heap: Here #include \u003ciostream\u003e#include \u003cvector\u003e#include \u003calgorithm\u003e // heap#include \u003cfunctional\u003eusing namespace std; int main(int argc, char const *argv[]){ int ia[10] = {0,1,2,3,4,5,6,7,8,9}; vector\u003cint\u003e iv(ia, ia+10); //is_heap cout \u003c\u003c boolalpha; cout \u003c\u003c is_heap(iv.begin(), iv.end()) \u003c\u003c endl; // false // make_heap make_heap(iv.begin(), iv.end(), greater\u003cint\u003e()); // 0 1 2 3 4 5 6 7 8 9 cout \u003c\u003c is_heap(iv.begin(), iv.end(), greater\u003cint\u003e()) \u003c\u003c endl; // true make_heap(iv.begin(), iv.end()); // 9 8 6 7 4 5 2 0 3 1 cout \u003c\u003c is_heap(iv.begin(), iv.end()) \u003c\u003c endl; // true // pop_heap pop_heap(iv.begin(), iv.end()); // 8 7 6 3 4 5 2 0 1 9 cout \u003c\u003c iv.back() \u003c\u003c endl; // 9 iv.pop_back(); // push_heap iv.push_back(99); push_heap(iv.begin(), iv.end()); // 99 8 6 3 7 5 2 0 1 4 // sort_heap sort_heap(iv.begin(), iv.end()); // 0 1 2 3 4 5 6 7 8 99 // Base on array make_heap(ia, ia + 10); // 9 8 6 7 4 5 2 0 3 1 pop_heap(ia, ia + 10); // is_heap_until // ia: 8 7 6 3 4 5 2 0 1 9 auto iter = is_heap_until(ia, ia + 10); cout \u003c\u003c *iter \u003c\u003c endl; // 9 return 0; } Back to top ","date":"2019-09-20","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/:6:0","tags":["c++","STL","algorithm"],"title":"All algorithm in C++","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/"},{"categories":["STL-study-note"],"content":"Merge Sort first!! #include \u003ciostream\u003e#include \u003cvector\u003e#include \u003calgorithm\u003eusing namespace std; int main(int argc, char const *argv[]) { // merge vector\u003cint\u003e iv1 = {5,10,15,20,25}; vector\u003cint\u003e iv2 = {50,40,30,20,10}; vector\u003cint\u003e res1(10); sort(iv1.begin(), iv1.end()); sort(iv2.begin(), iv2.end()); merge(iv1.begin(), iv1.end(), iv2.begin(), iv2.end(), res1.begin()); // res: 5 10 10 15 20 20 25 30 40 50 // inplace_merge vector\u003cint\u003e res2(10); auto it = copy(iv1.begin(), iv1.end(), res2.begin()); copy(iv2.begin(), iv2.end(), it); // res2: 5 10 15 20 25 10 20 30 40 50 inplace_merge(res2.begin(), res2.begin() + 5, res2.end()); // res2: 5 10 10 15 20 20 25 30 40 50 return 0; } Back to top ","date":"2019-09-20","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/:7:0","tags":["c++","STL","algorithm"],"title":"All algorithm in C++","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/"},{"categories":["STL-study-note"],"content":"Move #include \u003ciostream\u003e#include \u003cvector\u003e#include \u003calgorithm\u003e#include \u003cstring\u003eusing namespace std; int main(int argc, char const *argv[]) { vector\u003cstring\u003e foo = {\"air\",\"water\",\"fire\",\"earth\"}; vector\u003cstring\u003e bar (4); // move move(foo.begin(), foo.end(), bar.begin()); // foo: // (for empty string) // bar: air water fire earth foo = move(bar); // foo: air water fire earth // bar: // nothing here. // move_backward bar.resize(4); move_backward(foo.begin(), foo.end(), bar.end()); // foo: // (for empty string) // bar: air water fire earth // transform vector\u003cint\u003e iv1 = {10,20,30,40,50,60}; vector\u003cint\u003e iv2 = {1,2,3,4,5,6}; transform(iv1.begin(), iv1.end(), iv2.begin(), [](int a){return ++a;}); // iv1 + 1 and copy to iv2 // iv1: 10 20 30 40 50 60 // iv2: 11 21 31 41 51 61 transform(iv1.begin(), iv1.end(), iv2.begin(), iv2.begin(), plus\u003cint\u003e()); // range: ^ .... ^; opStart: ^; tansform to: ^ // iv1: 10 20 30 40 50 60 // iv2: 21 41 61 81 101 121 return 0; } Back to top ","date":"2019-09-20","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/:8:0","tags":["c++","STL","algorithm"],"title":"All algorithm in C++","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/"},{"categories":["STL-study-note"],"content":"Number \u003cnumberic\u003e: iota accumulate inner_product partial_sum adjacent_differenet \u003calgorithm\u003e: max min max_element min_element minmax count count_if iota just make a increasing sequence start from a given number. #include \u003ciostream\u003e#include \u003cvector\u003e#include \u003cnumeric\u003e#include \u003calgorithm\u003e#include \u003cfunctional\u003e#include \u003cutility\u003eusing namespace std; int main(int argc, char const *argv[]) { vector\u003cint\u003e iv(5); // iota iota(iv.begin(), iv.end(), 1); // 1 2 3 4 5 // count cout \u003c\u003c count(iv.begin(), iv.end(), 2) \u003c\u003c endl; // 1 // count_if cout \u003c\u003c count_if(iv.begin(), iv.end(), [](int a){return a % 2 == 1;}) \u003c\u003c endl; // 3 // accumulate cout \u003c\u003c accumulate(iv.begin(), iv.end(), 0) \u003c\u003c endl; // 15 // init + *iv + *(iv+1) + ... cout \u003c\u003c accumulate(iv.begin(), iv.end(), 0, minus\u003cint\u003e()) \u003c\u003c endl; // -15 // init - *iv - *(iv+1) - ... // inner_product vector\u003cint\u003e iv1 = {10, 20, 30}; vector\u003cint\u003e iv2 = {1, 2, 3}; cout \u003c\u003c inner_product(iv1.begin(), iv1.end(), iv2.begin(), 0) \u003c\u003c endl; // 0 + 10 * 1 + 20 * 2 + 30 * 3 = 140 cout \u003c\u003c inner_product(iv1.begin(), iv1.end(), iv2.begin(), 0, minus\u003cint\u003e(), divides\u003cint\u003e()) \u003c\u003c endl; // 0 - 10 / 1 - 20 / 2 - 30 / 3 = -30 // partial_sum vector\u003cint\u003e res(5); partial_sum(iv.begin(), iv.end(), res.begin()); // iv: 1 2 3 4 5 // res: 1 3 6 10 15 partial_sum(iv.begin(), iv.end(),res.begin(), minus\u003cint\u003e()); // iv: 1 2 3 4 5 // res: 1 -1 -4 -8 -13 adjacent_difference(iv.begin(), iv.end(), res.begin()); // iv: 1 2 3 4 5 // res: 1 1 1 1 1 adjacent_difference(iv.begin(), iv.end(), res.begin(), multiplies\u003cint\u003e()); // iv: 1 2 3 4 5 // res: 1 2 6 12 20 // adjacent_difference calculate every two adjacent elements // y0 = x0 // y1 = x1 - x0 // y2 = x2 - x1 // y3 = x3 - x2 // y4 = x4 - x3 ... // partial_sum calculate all elements b // y0 = x0 // y1 = x0 + x1 // y2 = x0 + x1 + x2 // y3 = x0 + x1 + x2 + x3 // y4 = x0 + x1 + x2 + x3 + x4 ... // max cout \u003c\u003c max(1, 3) \u003c\u003c endl; // 3 cout \u003c\u003c max(2, 2) \u003c\u003c endl; // 2 // max element auto max_e = max_element(iv.begin(), iv.end()); cout \u003c\u003c *max_e \u003c\u003c endl; // 5 // min cout \u003c\u003c min(1, 3) \u003c\u003c endl; // 1 cout \u003c\u003c min(2, 2) \u003c\u003c endl; // 2 // min element auto min_e = min_element(iv.begin(), iv.end()); cout \u003c\u003c *min_e \u003c\u003c endl; // 1 // minmax pair\u003cint, int\u003e min_max = minmax({5,2,3,1,4}); min_max = minmax(1,5); cout \u003c\u003c min_max.first \u003c\u003c \" \" \u003c\u003c min_max.second \u003c\u003c endl; // 1 5 // minmax_element pair\u003cvector\u003cint\u003e::iterator, vector\u003cint\u003e::iterator\u003e min_max_element = minmax_element(iv.begin(), iv.end()); cout \u003c\u003c \"max= \"\u003c\u003c *min_max_element.first \u003c\u003c \" at position \" \u003c\u003c min_max_element.first - iv.begin() \u003c\u003c endl; // max= 1 at position 0 cout \u003c\u003c \"min= \"\u003c\u003c *min_max_element.first \u003c\u003c \" at position \" \u003c\u003c min_max_element.second - iv.begin() \u003c\u003c endl; // min= 1 at position 4 return 0; } Back to top ","date":"2019-09-20","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/:9:0","tags":["c++","STL","algorithm"],"title":"All algorithm in C++","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/"},{"categories":["STL-study-note"],"content":"Partition is_partitioned partition stable_partition partition_copy partition_point #include \u003ciostream\u003e#include \u003cvector\u003e#include \u003calgorithm\u003e#include \u003cnumeric\u003eusing namespace std; bool isOdd(int n){return (n % 2 == 1);} int main(int argc, char const *argv[]) { vector\u003cint\u003e iv(8); iota(iv.begin(), iv.end(), 1); vector\u003cint\u003e::iterator bond; // partition bond = partition(iv.begin(), iv.end(), isOdd); // iv: 1 7 3 5 4 6 2 8 cout \u003c\u003c *bond \u003c\u003c endl; // 4 for (vector\u003cint\u003e::iterator i = iv.begin(); i != bond; ++i){ cout \u003c\u003c *i \u003c\u003c \" \"; } cout \u003c\u003c endl; // 1 7 3 5 for (vector\u003cint\u003e::iterator i = bond; i != iv.end(); ++i){ cout \u003c\u003c *i \u003c\u003c \" \"; } cout \u003c\u003c endl; // 4 6 2 8 // stable_partition iota(iv.begin(), iv.end(), 1); // iv: 1 2 3 4 5 6 7 8 bond = stable_partition(iv.begin(), iv.end(), isOdd); // iv: 1 3 5 7 2 4 6 8 cout \u003c\u003c *bond \u003c\u003c endl; // 2 for (vector\u003cint\u003e::iterator i = iv.begin(); i != bond; ++i){ cout \u003c\u003c *i \u003c\u003c \" \"; } cout \u003c\u003c endl; // 1 3 5 7 for (vector\u003cint\u003e::iterator i = bond; i != iv.end(); ++i){ cout \u003c\u003c *i \u003c\u003c \" \"; } cout \u003c\u003c endl; // 2 4 6 8 // is_partitioned cout \u003c\u003c boolalpha; // iv: 1 3 5 7 2 4 6 8 cout \u003c\u003c is_partitioned(iv.begin(), iv.end(), isOdd) \u003c\u003c endl; // true iota(iv.begin(), iv.end(), 1); // iv: 1 2 3 4 5 6 7 8 cout \u003c\u003c is_partitioned(iv.begin(), iv.end(), isOdd) \u003c\u003c endl; // false // partition_copy // iv: 1 2 3 4 5 6 7 8 vector\u003cint\u003e even, odd; odd.resize(4); even.resize(4); partition_copy(iv.begin(), iv.end(), odd.begin(), even.begin(), isOdd); for (vector\u003cint\u003e::iterator i = odd.begin(); i != odd.end(); ++i){ cout \u003c\u003c *i \u003c\u003c \" \"; } cout \u003c\u003c endl; // 1 3 5 7 for (vector\u003cint\u003e::iterator i = even.begin(); i != even.end(); ++i){ cout \u003c\u003c *i \u003c\u003c \" \"; } cout \u003c\u003c endl; // 2 4 6 8 // partition_point partition(iv.begin(), iv.end(), isOdd); // iv: 1 7 3 5 4 6 2 8 bond = partition_point(iv.begin(), iv.end(), isOdd); cout \u003c\u003c *bond \u003c\u003c endl; // 4 return 0; } Back to top ","date":"2019-09-20","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/:10:0","tags":["c++","STL","algorithm"],"title":"All algorithm in C++","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/"},{"categories":["STL-study-note"],"content":"Permutation lexicographical_compare: Returns true if the range [first1,last1) compares lexicographically less than the range [first2,last2). next_permutation: next lexicographically-ordered permutation. Return false when input is already the greatest lexicographic permutation. prev_permutation: previous lexicographically-ordered permutation. Return false when input is already a ascending permutation. THis code explain how to find next permutation(prev_permutation with same logic). template\u003cclass BidirIt\u003e //BidirIt binary direction iterator bool next_permutation(BidirIt first, BidirIt last) // [first, last) { if (first == last) return false; //0 element BidirIt i = last; if (first == --i) return false; //one element while (true) { BidirIt i1, i2; i1 = i; // i1 is last element of ascending sequence if (*--i \u003c *i1) { // i is prev of i1. i2 = last; while (*i \u003e *--i2) // i ≤ i1 ≥ i2 // i2 will be last number bigger than i ; std::iter_swap(i, i2); // i2 should at i's position in the next permutation. std::reverse(i1, last); // make sure seq behind i1 become ascending. return true; } if (i == first) { // the whole sequence is descending. std::reverse(first, last); return false; } } } If you want go over all permutation, sort first. #include \u003ciostream\u003e // std::cout#include \u003calgorithm\u003e // std::next_permutation, std::sort#include \u003cstring\u003e#include \u003cvector\u003eusing namespace std; int main () { // next_permutation vector\u003cint\u003e myints = {1,2,3}; sort(myints.begin(), myints.end()); // 1 2 3 do { std::cout \u003c\u003c myints[0] \u003c\u003c ' ' \u003c\u003c myints[1] \u003c\u003c ' ' \u003c\u003c myints[2] \u003c\u003c '\\n'; } while ( next_permutation(myints.begin(), myints.end()) ); std::cout \u003c\u003c \"After loop: \" \u003c\u003c myints[0] \u003c\u003c ' ' \u003c\u003c myints[1] \u003c\u003c ' ' \u003c\u003c myints[2] \u003c\u003c '\\n'; // prev_permutation reverse(myints.begin(), myints.end()); // 3 2 1 do { std::cout \u003c\u003c myints[0] \u003c\u003c ' ' \u003c\u003c myints[1] \u003c\u003c ' ' \u003c\u003c myints[2] \u003c\u003c '\\n'; } while ( prev_permutation(myints.begin(), myints.end()) ); std::cout \u003c\u003c \"After loop: \" \u003c\u003c myints[0] \u003c\u003c ' ' \u003c\u003c myints[1] \u003c\u003c ' ' \u003c\u003c myints[2] \u003c\u003c '\\n'; // lexicographical_compare string myStr = \"abc\"; // string is also work next_permutation(myStr.begin(), myStr.end()); cout \u003c\u003c myStr \u003c\u003c endl; // acb string myStr2 = \"cba\"; cout \u003c\u003c boolalpha; cout \u003c\u003c lexicographical_compare(myStr.begin(), myStr.end(), myStr2.begin(), myStr2.end()) \u003c\u003c endl; // acb \u003c cba // true // is_permutation cout \u003c\u003c is_permutation(myStr.begin(), myStr.end(), myStr2.begin()) \u003c\u003c endl; // true return 0; } Back to top ","date":"2019-09-20","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/:11:0","tags":["c++","STL","algorithm"],"title":"All algorithm in C++","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/"},{"categories":["STL-study-note"],"content":"Remove #include \u003ciostream\u003e#include \u003calgorithm\u003e#include \u003cvector\u003eusing namespace std; int main(int argc, char const *argv[]) { vector\u003cint\u003e iv = {10,20,30,30,20,10,10,20}; //remove vector\u003cint\u003e::iterator newEnd = remove(iv.begin(), iv.end(), 20); //iv: 10 30 30 10 10 10 10 20 // newEnd: ^ for (vector\u003cint\u003e::iterator i = iv.begin(); i != newEnd; ++i) { cout \u003c\u003c *i \u003c\u003c \" \"; }cout \u003c\u003c endl; // res: 10 30 30 10 10 vector\u003cint\u003e iv2 = {10,20,30,30,20,10,10,20}; vector\u003cint\u003e iv3(5); // remove_copy remove_copy(iv2.begin(), iv2.end(), iv3.begin(), 20); // iv3: 10 30 30 10 10 // remove_if vector\u003cint\u003e iv4 = {1,2,3,4,5,6,7,8,9}; newEnd = remove_if(iv4.begin(), iv4.end(), [](int a){ return a % 2 == 0;}); for (vector\u003cint\u003e::iterator i = iv4.begin(); i != newEnd; ++i) { cout \u003c\u003c *i \u003c\u003c \" \"; }cout \u003c\u003c endl; // res: 1 3 5 7 9 // iv4: 1 3 5 7 9 6 7 8 9 // remove_copy_if vector\u003cint\u003e iv5 = {1,2,3,4,5,6,7,8,9}; vector\u003cint\u003e iv6(5); remove_copy_if(iv4.begin(), iv4.end(), iv6.begin() , [](int a){ return a % 2 == 0;}); // iv6: 1 3 5 7 9 return 0; } Back to top ","date":"2019-09-20","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/:12:0","tags":["c++","STL","algorithm"],"title":"All algorithm in C++","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/"},{"categories":["STL-study-note"],"content":"Replace #include \u003ciostream\u003e#include \u003calgorithm\u003e#include \u003cvector\u003eusing namespace std; int main(int argc, char const *argv[]) { vector\u003cint\u003e iv = {10, 20, 30, 30, 20, 10, 10, 20}; // replace replace(iv.begin(), iv.end(), 20, 99); // iv: 10 99 30 30 99 10 10 99 // replace_copy vector\u003cint\u003e iv2(8); replace_copy(iv.begin(), iv.end(), iv2.begin(), 99, 1); // iv2: 10 99 30 30 99 10 10 99 // replace_if replace_if(iv.begin(), iv.end(), [](int a){return a % 2 == 0;}, 0); // iv: 0 99 0 0 99 0 0 99 // replace_copy_if vector\u003cint\u003e iv3(8); replace_copy_if(iv.begin(), iv.end(), iv3.begin(), [](int a){return a % 2 == 0;}, 1); // iv3: 1 99 1 1 99 1 1 99 return 0; } Back to top ","date":"2019-09-20","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/:13:0","tags":["c++","STL","algorithm"],"title":"All algorithm in C++","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/"},{"categories":["STL-study-note"],"content":"Reverse #include \u003ciostream\u003e#include \u003calgorithm\u003e#include \u003cvector\u003eusing namespace std; int main(int argc, char const *argv[]) { vector\u003cint\u003e iv = {0,1,2,3,4,5,6,7}; vector\u003cint\u003e iv2(8); // reverse reverse(iv.begin(), iv.end()); // iv: 7 6 5 4 3 2 1 0 // reverse_copy reverse_copy(iv.begin(), iv.end(), iv2.begin()); // iv: 7 6 5 4 3 2 1 0 // iv2: 0 1 2 3 4 5 6 7 return 0; } Back to top ","date":"2019-09-20","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/:14:0","tags":["c++","STL","algorithm"],"title":"All algorithm in C++","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/"},{"categories":["STL-study-note"],"content":"rotate Here is how rotate achieve: template \u003cclass ForwardIterator\u003e void rotate (ForwardIterator first, ForwardIterator middle, ForwardIterator last) { ForwardIterator next = middle; while (first!=next) { swap (*first++,*next++); if (next==last) next=middle; else if (first==middle) middle=next; } } The idea is move a part to the end and adjust it 1 2 3 4 5 6 7 -\u003e 4 5 6 1 2 3 7 -\u003e 4 5 6 7 2 3 1 -\u003e 4 5 6 7 1 3 2 -\u003e 4 5 6 7 1 2 3 ^ ^ ^ ^ ^ ^ ^ ^ #include \u003ciostream\u003e#include \u003calgorithm\u003e#include \u003cvector\u003eusing namespace std; int main(int argc, char const *argv[]) { vector\u003cint\u003e iv = {0,1,2,3,4,5,6,7,8,9}; vector\u003cint\u003e iv2(10); rotate(iv.begin(), iv.begin()+3, iv.end()); // iv: 3 4 5 6 7 8 9 0 1 2 rotate_copy(iv.begin(), iv.begin()+3, iv.end(), iv2.begin()); // iv: [3 4 5] 6 7 8 9 0 1 2 // iv2: 6 7 8 9 0 1 2 [3 4 5] return 0; } Back to top ","date":"2019-09-20","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/:15:0","tags":["c++","STL","algorithm"],"title":"All algorithm in C++","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/"},{"categories":["STL-study-note"],"content":"Search lower_bound upper_bound equal_range. These 3 method design like binary search. For example: template \u003cclass ForwardIterator, class T\u003e ForwardIterator lower_bound (ForwardIterator first, ForwardIterator last, const T\u0026 val) { ForwardIterator it; iterator_traits\u003cForwardIterator\u003e::difference_type count, step; count = distance(first,last); while (count\u003e0) { it = first; step=count/2; advance (it,step); if (*it\u003cval) {// or: if (comp(*it,val)), for version (2) first=++it; count-=step+1; } else count=step; } return first; } template \u003cclass ForwardIterator, class T\u003e pair\u003cForwardIterator,ForwardIterator\u003e equal_range (ForwardIterator first, ForwardIterator last, const T\u0026 val) { ForwardIterator it = std::lower_bound (first,last,val); return std::make_pair ( it, std::upper_bound(it,last,val) ); } lower_bound is more like a binary search binary_search search one element and return a boolean. find search one element and return the first one position. search is searching a pattern and return the first position. find_end is searching a pattern and return the last one (compare with search). find_first_of find the first element that pattern have. #include \u003ciostream\u003e#include \u003cvector\u003e#include \u003calgorithm\u003e#include \u003cnumeric\u003e#include \u003cutility\u003e // pair#include \u003cfunctional\u003e // greater\u003cint\u003eusing namespace std; int main(int argc, char const *argv[]) { vector\u003cint\u003e iv = {10,20,30,30,20,10,10,20}; sort(iv.begin(), iv.end()); // 10 10 10 20 20 20 30 30 // lower_bound \u0026 upper_bound vector\u003cint\u003e::iterator low, up; low = lower_bound(iv.begin(), iv.end(), 20); up = upper_bound(iv.begin(), iv.end(), 20); cout \u003c\u003c \"lower bound position: \" \u003c\u003c low - iv.begin() \u003c\u003c endl; // lower bound position: 3 cout \u003c\u003c \"upper bound position: \" \u003c\u003c up - iv.begin() \u003c\u003c endl; // upper bound position: 6 vector\u003cint\u003e test = {1,2,3,0,0,0}; // low ^ low = lower_bound(iv.begin(), iv.end(), 0, greater\u003cint\u003e()); // equal_range pair\u003cvector\u003cint\u003e::iterator, vector\u003cint\u003e::iterator\u003e bounds; bounds = equal_range(iv.begin(), iv.end(), 20); cout \u003c\u003c \"bounds at positions \" \u003c\u003c (bounds.first - iv.begin()); cout \u003c\u003c \" and \" \u003c\u003c (bounds.second - iv.begin()) \u003c\u003c endl; // 10 10 10 20 20 20 30 30 // ^ ^ // bounds at positions 3 and 6 // mismatch vector\u003cint\u003e mis = {10,10,10,20,20,30,30,40}; pair\u003cvector\u003cint\u003e::iterator, vector\u003cint\u003e::iterator\u003e myPair; myPair = mismatch(iv.begin(), iv.end(), mis.begin()); // iv: 10 10 10 20 20 20 30 30 // first: ^ // mis: 10 10 10 20 20 30 30 40 // second: ^ cout \u003c\u003c \"First mismacth is: \" \u003c\u003c *myPair.first \u003c\u003c \" \"; cout \u003c\u003c \"and \" \u003c\u003c *myPair.second \u003c\u003c endl; // First mismacth is: 20 and 30 ++myPair.first; ++myPair.second; myPair = mismatch(myPair.first, iv.end(), myPair.second); cout \u003c\u003c \"First mismacth is: \" \u003c\u003c *myPair.first \u003c\u003c \" \"; cout \u003c\u003c \"and \" \u003c\u003c *myPair.second \u003c\u003c endl; // First mismacth is: 30 and 40 // binary_search cout \u003c\u003c boolalpha; cout \u003c\u003c binary_search(iv.begin(), iv.end(), 20) \u003c\u003c endl; // true; // search vector\u003cint\u003e searchV; for (int i = 0; i \u003c 10; ++i) { searchV.push_back(i*10); } vector\u003cint\u003e patternV1 = {30,40,50}; vector\u003cint\u003e patternV2 = {30,50}; vector\u003cint\u003e::iterator it = search(searchV.begin(), searchV.end(), patternV1.begin(), patternV1.end()); // searchV: 0 10 20 30 40 50 60 70 80 90 // pattern1 = 30 40 50 if(it != searchV.end()) cout \u003c\u003c \"Pattern is find and position is start from: \" \u003c\u003c it - searchV.begin() \u003c\u003c endl; else cout \u003c\u003c \"Pattern not find.\" \u003c\u003c endl; // Pattern is find and position is start from: 3 it = search(searchV.begin(), searchV.end(), patternV2.begin(), patternV2.end()); // searchV: 0 10 20 30 40 50 60 70 80 90 // pattern1 = 30 50 if(it != searchV.end()) cout \u003c\u003c \"Pattern is find and position is start from: \" \u003c\u003c it - searchV.begin() \u003c\u003c endl; else cout \u003c\u003c \"Pattern not find.\" \u003c\u003c endl; // Pattern not find. // search_n it = search_n(iv.begin(), iv.end(), 3, 20); // iv: 10 10 10 20 20 20 30 30 // {20 20 20} if(it != iv.end()) cout \u003c\u003c \"Pattern is find and position is start from: \" \u003c\u003c it - iv.begin() \u003c\u003c endl; else cout \u003c\u003c \"Pattern not find.\" \u003c\u003c endl; // Pattern is f","date":"2019-09-20","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/:16:0","tags":["c++","STL","algorithm"],"title":"All algorithm in C++","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/"},{"categories":["STL-study-note"],"content":"Set Container must be sorted first. Set is ordered in this code. #include \u003ciostream\u003e#include \u003cvector\u003e#include \u003calgorithm\u003e#include \u003cset\u003eusing namespace std; int main(int argc, char const *argv[]) { set\u003cint\u003e is1 = { 5,10,15,20,25}; set\u003cint\u003e is2 = { 50,40,30,20,10}; // set_union vector\u003cint\u003e iv_union(10); vector\u003cint\u003e::iterator it; it = set_union(is1.begin(), is1.end(), is2.begin(), is2.end(), iv_union.begin()); iv_union.resize(it - iv_union.begin()); // iv_union: 5 10 15 20 25 30 40 50 // set_intersection vector\u003cint\u003e iv_intersection(10); it = set_intersection(is1.begin(), is1.end(), is2.begin(), is2.end(), iv_intersection.begin()); iv_intersection.resize(it - iv_intersection.begin()); // iv_intersection: 10 20 // set_difference vector\u003cint\u003e iv_difference(10); it = set_difference(is1.begin(), is1.end(), is2.begin(), is2.end(), iv_difference.begin()); iv_difference.resize(it - iv_difference.begin()); // iv_difference: 5 15 25 // difference only in first container // set_symmetric_difference vector\u003cint\u003e iv_symmetric_difference(10); it = set_symmetric_difference(is1.begin(), is1.end(), is2.begin(), is2.end(), iv_symmetric_difference.begin()); iv_symmetric_difference.resize(it - iv_symmetric_difference.begin()); // iv_symmetric_difference: 5 15 25 30 40 50 // difference only in both containers return 0; } Back to top ","date":"2019-09-20","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/:17:0","tags":["c++","STL","algorithm"],"title":"All algorithm in C++","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/"},{"categories":["STL-study-note"],"content":"Shuffle The only difference is that randomshuffle uses _rand() function to randomize the items, while the shuffle uses urng which is a better random generator, though with the particular overload of random_shuffle, we can get the same behavior (as with the shuffle). shuffle is an improvement over random_shuffle, and we should prefer using the former for better results. But shuffle supported from C++11. reference #include \u003ciostream\u003e#include \u003cvector\u003e#include \u003calgorithm\u003e // random_shuffle shuffle#include \u003cnumeric\u003e // iota#include \u003cctime\u003e // std::time#include \u003ccstdlib\u003e // rand, srand#include \u003crandom\u003e // std::default_random_engine#include \u003cchrono\u003e // std::chrono::system_clockusing namespace std; int myrandom(int i) { return rand()%i; } int main(int argc, char const *argv[]) { srand(unsigned(time(0))); vector\u003cint\u003e iv(10); iota(iv.begin(), iv.end(), 0); // iv: 0 1 2 3 4 5 6 7 8 9 random_shuffle(iv.begin(), iv.end()); // 6 0 3 5 7 8 4 1 2 9 random_shuffle(iv.begin(), iv.end(), myrandom); // It is random, since srand set by time. iota(iv.begin(), iv.end(), 0); // iv: 0 1 2 3 4 5 6 7 8 9 unsigned seed = std::chrono::system_clock::now().time_since_epoch().count(); shuffle(iv.begin(), iv.end(), std::default_random_engine(seed)); // It is random return 0; } Back to top ","date":"2019-09-20","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/:18:0","tags":["c++","STL","algorithm"],"title":"All algorithm in C++","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/"},{"categories":["STL-study-note"],"content":"Sort sort() in c++ using intro sort which is combine quicksort and heap sort. stable_sort() using merge sort. When space is enough, the complexity is O(nlogn). Otherwise, it is O(nlognlogn) since many swapping occur in algorithm. partial_sort using heapsort. nth_element: Rearranges the elements in the range [first,last), in such a way that the element at the nth position is the element that would be in that position in a sorted sequence. nth_element is quick selection. Find the nth element and put it the exact place. On the right part is smaller than nth element and bigger on the left without specific sequence. Something different in java. You can see: Here #include \u003ciostream\u003e#include \u003calgorithm\u003e#include \u003cfunctional\u003e#include \u003cvector\u003e#include \u003cutility\u003e //pairusing namespace std; struct less{ bool operator() (pair\u003cint,int\u003e i, pair\u003cint,int\u003e j){return( i.first \u003c j.first);} } less_pair; int main(int argc, char const *argv[]) { int myints[] = {32,71,12,45,26,80,53,33}; vector\u003cint\u003e iv (myints, myints+8); // is_sort cout \u003c\u003c boolalpha; cout \u003c\u003c is_sorted(iv.begin(), iv.end()) \u003c\u003c endl; // sort sort(myints, myints+8); // 12 26 32 33 45 53 71 80 cout \u003c\u003c is_sorted(myints, myints+8) \u003c\u003c endl; // true sort(iv.begin(), iv.begin() + 4, greater\u003cint\u003e()); // (71 45 32 12) 26 80 53 33 // is_sorted_until auto iter1 = is_sorted_until(myints, myints+8); auto iter2 = is_sorted_until(iv.begin(), iv.end(), greater\u003cint\u003e()); cout \u003c\u003c *iter1 \u003c\u003c endl; // ??? cout \u003c\u003c *iter2 \u003c\u003c endl; // 26 // partial_sort vector\u003cint\u003e iv2 = {32,71,12,45,26,80,53,33}; partial_sort(iv2.begin(), iv2.begin() + 4, iv2.end()); // (12 26 32 33) 71 80 53 45 partial_sort(iv2.begin(), iv2.begin() + 4, iv2.end(), greater\u003cint\u003e()); // (80 71 53 45) 12 26 32 33 // partial_sort_copy vector\u003cint\u003e res_copy(6); partial_sort_copy(iv2.begin(), iv2.end(), res_copy.begin(), res_copy.end()); // iv2 --\u003e 12 26 32 33 71 80 53 45 // res_copy --\u003e 12 26 32 33 45 53 // stable_sort pair\u003cint, int\u003e p1(4, 1); pair\u003cint, int\u003e p2(2, 1); pair\u003cint, int\u003e p3(3, 1); pair\u003cint, int\u003e p4(2, 2); pair\u003cint, int\u003e p5(1, 1); pair\u003cint, int\u003e p6(2, 3); vector\u003cpair\u003cint, int\u003e\u003e iv3 = {p1, p2, p3, p4, p5, p6}; stable_sort(iv3.begin(), iv3.end(), less_pair); //(1 1) (2 1) (2 2) (2 3) (3 1) (4 1) // nth_element vector\u003cint\u003e iv4 = {32,71,12,45,26,80,53,33}; nth_element(iv4.begin(), iv4.begin()+4 , iv4.end()); // 26 12 32 33 45 53 71 80 // n is ^ return 0; } Back to top ","date":"2019-09-20","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/:19:0","tags":["c++","STL","algorithm"],"title":"All algorithm in C++","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/"},{"categories":["STL-study-note"],"content":"Swap iter_swap: Swap the value of two iterators. swap: Only use for swap two variable swap_ranges: Exchanges the values of each of the elements in the range [first1,last1) with those of their respective elements in the range beginning at first2. #include \u003ciostream\u003e#include \u003calgorithm\u003e#include \u003cvector\u003eusing namespace std; int main(int argc, char const *argv[]) { int a = 1, b = 2; swap(a, b); // b = 2, a = 1 vector\u003cint\u003e iv = {1,2,3,4,5,6}; int myints[] = {10,20,30,40,50,60}; iter_swap(iv.begin(), iv.begin()+3); // 4 2 3 1 5 6 iter_swap(myints, myints + 3); // 40 20 30 10 50 60 iter_swap(iv.begin(), myints); // iv: 40 2 3 1 5 6 // myints: 4 20 30 10 50 60 // iv: 40 [2 3 1 5] 6 // myints: [4 20 30 10] 50 60 std::swap_ranges(iv.begin()+1, iv.end()-1, myints); // iv: 40 [4 20 30 10] 6 // myints: [2 3 1 5] 50 60 } Back to top ","date":"2019-09-20","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/:20:0","tags":["c++","STL","algorithm"],"title":"All algorithm in C++","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/"},{"categories":["STL-study-note"],"content":"Test range #include \u003ciostream\u003e#include \u003cvector\u003e#include \u003calgorithm\u003e#include \u003cstring\u003eusing namespace std; int main(int argc, char const *argv[]) { cout \u003c\u003c boolalpha; // all_of vector\u003cint\u003e iv = {1,2,3,4,5,6}; cout \u003c\u003c all_of(iv.begin(), iv.end(), [](int a){return a\u003c10;}) \u003c\u003c endl; //true // any_of cout \u003c\u003c any_of(iv.begin(), iv.end(), [](int a){return a\u003e10;}) \u003c\u003c endl; // false // none_of cout \u003c\u003c none_of(iv.begin(), iv.end(), [](int a){return a\u003e10;}) \u003c\u003c endl; // true // equal vector\u003cint\u003e iv2 = {1,2,3,4,5,6}; vector\u003cint\u003e iv3 = {1,2,3,4,5}; cout \u003c\u003c equal(iv.begin(), iv.end(), iv2.begin()) \u003c\u003c endl; // true cout \u003c\u003c equal(iv.begin(), iv.end(), iv3.begin()) \u003c\u003c endl; // false // includes cout \u003c\u003c includes(iv2.begin(), iv2.end(), iv3.begin(), iv3.end()) \u003c\u003c endl; // true return 0; } Back to top ","date":"2019-09-20","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/:21:0","tags":["c++","STL","algorithm"],"title":"All algorithm in C++","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/"},{"categories":["STL-study-note"],"content":"Unique #include \u003ciostream\u003e#include \u003cvector\u003e#include \u003calgorithm\u003eusing namespace std; int main(int argc, char const *argv[]) { vector\u003cint\u003e iv1 = {10,20,20,20,30,30,20,20,10}; vector\u003cint\u003e::iterator it; // it point to the new end. it = unique(iv1.begin(), iv1.end()); for (vector\u003cint\u003e::iterator i = iv1.begin(); i != it; ++i) { cout \u003c\u003c *i \u003c\u003c \" \"; } cout \u003c\u003c endl; // 10 20 30 20 10 vector\u003cint\u003e iv2 = {10,20,20,20,30,30,20,20,10}; vector\u003cint\u003e iv3(5); it = unique_copy(iv2.begin(), iv2.end(), iv3.begin()); for (vector\u003cint\u003e::iterator i = iv3.begin(); i != it; ++i) { cout \u003c\u003c *i \u003c\u003c \" \"; } cout \u003c\u003c endl; // 10 20 30 20 10 return 0; } Back to top ","date":"2019-09-20","objectID":"https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/:22:0","tags":["c++","STL","algorithm"],"title":"All algorithm in C++","uri":"https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/"},{"categories":["Note"],"content":"SCSS features ","date":"2019-09-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/sass/:1:0","tags":["css","course note"],"title":"SASS (SCSS) features","uri":"https://tyrangyang.github.io/TyrangYang_blog/sass/"},{"categories":["Note"],"content":"Variables $font-stack: Helvetica, sans-serif; $primary-color: #333; body { font: 100% $font-stack; color: $primary-color; } ","date":"2019-09-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/sass/:1:1","tags":["css","course note"],"title":"SASS (SCSS) features","uri":"https://tyrangyang.github.io/TyrangYang_blog/sass/"},{"categories":["Note"],"content":"Operator .container { width: 100%; } article[role='main'] { float: left; width: 600px / 960px * 100%; } article[role='complementary'] { float: right; width: 300px / 960px * 100%; } ","date":"2019-09-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/sass/:1:2","tags":["css","course note"],"title":"SASS (SCSS) features","uri":"https://tyrangyang.github.io/TyrangYang_blog/sass/"},{"categories":["Note"],"content":"String interpolation $name: foo; $attr: border; p.#{$name} { #{$attr}-color: blue; } This is compile to: p.foo { border-color: blue; } ","date":"2019-09-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/sass/:1:3","tags":["css","course note"],"title":"SASS (SCSS) features","uri":"https://tyrangyang.github.io/TyrangYang_blog/sass/"},{"categories":["Note"],"content":"Nesting #main p { color: #00ff00; width: 90%; .redbod { background-color: #ff0000; color: #000000; } } This is compile to: #main p { color: #00ff00; width: 90%; } #main p .redbod { background-color: #ff0000; color: #000000; } ","date":"2019-09-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/sass/:1:4","tags":["css","course note"],"title":"SASS (SCSS) features","uri":"https://tyrangyang.github.io/TyrangYang_blog/sass/"},{"categories":["Note"],"content":"The parent selector We can use the \u0026 symbol to state “for the selector I am nested inside with these other selectors” or “with this selector than the current selector” a { font-weight: bold; text-decoration: none; \u0026:hover { text-decoration: underline; } body.firebox \u0026 { font-weight: normal; } } This is compile to: a { font-weight: bold; text-decoration: none; } a:hover { text-decoration: underline; } body.firebox a { font-weight: normal; } ","date":"2019-09-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/sass/:1:5","tags":["css","course note"],"title":"SASS (SCSS) features","uri":"https://tyrangyang.github.io/TyrangYang_blog/sass/"},{"categories":["Note"],"content":"Imports @import ’filename.scss’; ","date":"2019-09-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/sass/:1:6","tags":["css","course note"],"title":"SASS (SCSS) features","uri":"https://tyrangyang.github.io/TyrangYang_blog/sass/"},{"categories":["Note"],"content":"Nested Media Queries .sidebar { width: 300px; @media screen and (orientation: landscape) { width: 500px; } } This is compile to: .sidebar { width: 300px; } @media screen and (orientation: landscape) { .sidebar { width: 500px; } } ","date":"2019-09-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/sass/:1:7","tags":["css","course note"],"title":"SASS (SCSS) features","uri":"https://tyrangyang.github.io/TyrangYang_blog/sass/"},{"categories":["Note"],"content":"General control $type: monster; p { @if $type == ocean { color: blue; } @else if $type == matador { color: red; } @else if $type == monster { color: green; } @else { color: black; } } @for $i from 1 through 3 { .item-#{$i} { width: 2em * $i; } } @each $animal in puma, sea-slug, egret, salamander { .#{$animal}-icon { background-image: url('/image/#{$animal}.png'); } } ","date":"2019-09-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/sass/:1:8","tags":["css","course note"],"title":"SASS (SCSS) features","uri":"https://tyrangyang.github.io/TyrangYang_blog/sass/"},{"categories":["Note"],"content":"Mixins @mixinbox-shadow($shadows...) { -moz-box-shadow: $shadows; -webkit-box-shadow: $shadows; box-shadow: $shadows; } .shadows { @includebox-shadow(0px 4px 5px #666, 2px 6px 10px #999); } This is compile to: box-shadow { -moz-box-shadow: 0px 4px 5px #666, 2px 6px 10px #999; -webkit-box-shadow: 0px 4px 5px #666, 2px 6px 10px #999; box-shadow: 0px 4px 5px #666, 2px 6px 10px #999; } ","date":"2019-09-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/sass/:1:9","tags":["css","course note"],"title":"SASS (SCSS) features","uri":"https://tyrangyang.github.io/TyrangYang_blog/sass/"},{"categories":["Note"],"content":"Functions $grid-width: 40px; $gutter-width: 10px; @functiongrid-width($n) { @return $n * $grid-width + ($n - 1) * $gutter-width; } #sidebar { width: grid-width(5); } This is compile to: #sidebar { width: 240px; } ","date":"2019-09-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/sass/:1:10","tags":["css","course note"],"title":"SASS (SCSS) features","uri":"https://tyrangyang.github.io/TyrangYang_blog/sass/"},{"categories":["Note"],"content":"Extending .error { border: 1px #f00; background-color: #fdd; } .seriousError { @extend .error; border-width: 3px; } ","date":"2019-09-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/sass/:1:11","tags":["css","course note"],"title":"SASS (SCSS) features","uri":"https://tyrangyang.github.io/TyrangYang_blog/sass/"},{"categories":["Note"],"content":"Placeholders #context a%extreme { color: blue; font-weight: bold; font-size: 2em; } .notice { @extend %extreme; } ","date":"2019-09-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/sass/:1:12","tags":["css","course note"],"title":"SASS (SCSS) features","uri":"https://tyrangyang.github.io/TyrangYang_blog/sass/"},{"categories":["Concurrent-programming"],"content":"Semaphore Initialize how many permissions you will use. acquire() will add one permission. release() will remove one permission. Permission must ≥ 0. ","date":"2019-09-16","objectID":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-3/:1:0","tags":["concurrent","course note"],"title":"Concurrent Programming Course note 3","uri":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-3/"},{"categories":["Concurrent-programming"],"content":"Semaphore solution for the MEP #criticalSection + permissions = 1 #criticalSection = #acquires − #releases Mutual exclusion: #criticalSection ≤ 1 since #permission ≥ 0. Absence of deadlock: It never happens that #permission = 0 and #criticalSection = 0 ","date":"2019-09-16","objectID":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-3/:1:1","tags":["concurrent","course note"],"title":"Concurrent Programming Course note 3","uri":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-3/"},{"categories":["Concurrent-programming"],"content":"Java public class Turnstile extends Thread { static volatile int counter = 0; // keyword is recommended for variables that are shared static Semaphore mutex = new Semaphore (1); public void run() { for(int i = 0; i \u003c 50; i++){ mutex.acquire(); counter ++; mutex.release(); System.out.println(id+\"- In comes: \"+i ); } } public static void main(String args[]) { try{ Thread m1 = new Turnstile (1); m1.start(); Thread m2 = new Turnstile (2); m2.start(); } catch(Exception e){} } } Strong semaphore Possibility of starvation is caused by the fact that blocked processes are placed in a set of processes. But this can be remedied by changing the set to be a queue. Semaphore(int permits , boolean fair) When fairness is set to true, the semaphore gives permits to access mutual resources in the order the threads have asked for it (FIFO). ","date":"2019-09-16","objectID":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-3/:1:2","tags":["concurrent","course note"],"title":"Concurrent Programming Course note 3","uri":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-3/"},{"categories":["Concurrent-programming"],"content":"Dining Philosophers semaphore[] forks = [1,1,1,1,1]; // N = 5; semaphore chairs = new semaphore(4); // N-1 // if all get the left fork, it is deadlock. Therefore, // At least one can get both forks when only four sit in table thread Philosopher(i) { left = i; right = (i+1) % 5 while(true){ chairs.acquire(); fork(left).acquire(); fork(right).acquire(); //eat fork(left).release(); fork(right).release(); chairs.release(); //think } } ","date":"2019-09-16","objectID":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-3/:2:0","tags":["concurrent","course note"],"title":"Concurrent Programming Course note 3","uri":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-3/"},{"categories":["Concurrent-programming"],"content":"Producer \u0026 Consumer Object[] buffer = new Object[N]; //size N Semaphore prem_to_produce = new Semaphore(N); Semaphore prem_to_consume = new Semaphore(0); // 0 means you want produce first. Semaphore mutexP = new Semaphore(1); Semaphore mutexC = new Semaphore(1); thread Producer: { while(true){ prem_to_produce.acquire(); mutexP.acquire(); // critical section. Protect multiple producers will affect front. buffer[front] = produce(); front = (front + 1) % N; prem_to_consume.release(); mutexP.release(); } } thread Consumer: { while(true) { prem_to_consume.acquire(); mutexC.acquire(); // Protect rear from multiple consumers. consume(buffer[rear]); rear = (rear + 1) % N; prem_to_produce.release(); mutexC.release(); } } ","date":"2019-09-16","objectID":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-3/:3:0","tags":["concurrent","course note"],"title":"Concurrent Programming Course note 3","uri":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-3/"},{"categories":["Concurrent-programming"],"content":"Reader \u0026 Writer Multiple reader could read. No reader can read when writer writing The first one grab the resource and the last one release it. Semaphore resource = new Semaphore(1); Semaphore mutexR = new Semaphore(1); int readers = 0; thread Writer: { // while(true){ resource.acquire(); // write resource.release(); // } } thread Reader: { // while(true){ mutexR.acquire(); reader++; if(readers == 1) resource.acquire(); mutexR.release(); // read mutexR.acquire(); reader--; if(readers == 0) resource.release(); mutexR.release(); // } } ","date":"2019-09-16","objectID":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-3/:4:0","tags":["concurrent","course note"],"title":"Concurrent Programming Course note 3","uri":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-3/"},{"categories":["Concurrent-programming"],"content":"Man \u0026 Woman Bar ","date":"2019-09-16","objectID":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-3/:5:0","tags":["concurrent","course note"],"title":"Concurrent Programming Course note 3","uri":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-3/"},{"categories":["Concurrent-programming"],"content":"Quiz 3 Semaphore permToLoad = new Semaphore(0); Semaphore doneLoading = new Semaphore(0); Semaphore track[] = {new Semaphore(1); new Semaphore(1)}; Semaphore freight = new Semaphore(1); thread PassengerTrain(i) { track[i].acquire(); track[i].release(); } thread FreightTrain(i) { freight.acquire(); track[i].acquire(); track[1-i].acquire(); freight.release(); permToLoad.release(); doneLoading.acquire(); track[i].release(); track[1-i].release(); } thread LoadingMachine: { while (true) { permToLoad.acquire(); // process vehicle doneLoading.release(); } } ","date":"2019-09-16","objectID":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-3/:6:0","tags":["concurrent","course note"],"title":"Concurrent Programming Course note 3","uri":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-3/"},{"categories":["Concurrent-programming"],"content":"Car Semaphore permToProcess = {new Semaphore(0), new Semaphore(0), new Semaphore(0)}; Semaphore doneProcessing = {new Semaphore(0), new Semaphore(0), new Semaphore(0)}; Semaphore station0 = new Semaphore(1); Semaphore station1 = new Semaphore(1); Semaphore station2 = new Semaphore(1); thread car{ station0.acquire(); permToProcess[0].release(); doneProcessing[0].acquire(); station1.acquire(); station0.release(); permToProcess[1].release(); doneProcessing[1].acquire(); station2.acquire(); station1.release(); permToProcess[2].release(); doneProcessing[2].acquire(); station2.release(); } thread MachineAtStation(i) { while(true){ permToProcess[i].acquire(); doneProcessing[i].release(); } } ## bl5 q3 ```java Semaphore[] aboard = {new Semaphore(0), new Semaphore(0)}; thread passenger(j){ // ticket_East.acquire(); aboard[0].acquire(); ticket.release(); // permitToExit[1-i].acquire(); okToBoard.release(); } thread ferry(i){ i = 0; while(true){ repeat(n){ aboard[i].release() } repeat(n){ // receive n ticket ticket.acquire() } i = 1 - i; repeat(n){ permitToExit[i].release(); } repeat(n){ okToBoard.acquire(); } } } ","date":"2019-09-16","objectID":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-3/:7:0","tags":["concurrent","course note"],"title":"Concurrent Programming Course note 3","uri":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-3/"},{"categories":["Concurrent-programming"],"content":"Race condition Multiple thread access one same variables of object concurrently and at least one does update. Bad situation. ","date":"2019-09-04","objectID":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-2/:1:0","tags":["concurrent","course note"],"title":"Concurrent Programming Course note 2","uri":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-2/"},{"categories":["Concurrent-programming"],"content":"Atomic operation An operation is atomic if it execute until it completion without interruption ","date":"2019-09-04","objectID":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-2/:2:0","tags":["concurrent","course note"],"title":"Concurrent Programming Course note 2","uri":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-2/"},{"categories":["Concurrent-programming"],"content":"Critical section A part of program that accesses shared memory and which we which to execute automatically. ","date":"2019-09-04","objectID":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-2/:3:0","tags":["concurrent","course note"],"title":"Concurrent Programming Course note 2","uri":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-2/"},{"categories":["Concurrent-programming"],"content":"mutual exclusion problem (MEP) Mutex: at and point in time, there is at most one thread in the critical section Absence of livelock: If various of threads try to entry the critical section, at lease one of them will succeed. Free from starvation: A thread trying to enter its critical section will eventually be able to do so. Deadlock is not exit for a interleaving in a transition system. no shared variables between critical and non critical section nor with the entry/exit protocol. critical section must be end it is meaningless that while(true) loop not exist. while(!flag){ flag = true; // ..... flag = false; } await !flag no (p4,q4) which two thread in critical section at same time. if process could block when trying to access the critical section, it is deadlock. Starvation is due to the fact that both processes test and set a single global variable. ","date":"2019-09-04","objectID":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-2/:3:1","tags":["concurrent","course note"],"title":"Concurrent Programming Course note 2","uri":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-2/"},{"categories":["Concurrent-programming"],"content":"Dekker’s Algorithm global int turn = 1; global boolean wantP = false; global boolean wantQ = false; thread p:{ while(true){ wantP = true; while wantQ{ if(turn == 2){ wantP = false; await (turn == 1); wantP = true; } } turn = 2; wantP = false; } } thread p:{ while(true){ wantQ = true; while wantP{ if(turn == 1){ wantQ = false; await (turn == 2); wantQ = true; } } turn = 2; wantQ = false; } } ","date":"2019-09-04","objectID":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-2/:4:0","tags":["concurrent","course note"],"title":"Concurrent Programming Course note 2","uri":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-2/"},{"categories":["Concurrent-programming"],"content":"Peterson’s Algorithm global int last = 1; global boolean wantP = false; global boolean wantQ = false; thread p:{ while(true){ wantP = true; last = 1; await (!wantQ || last == 2); wantP = false; } while(true){ wantQ = true; last = 2; await (!wantP || last == 1); wantQ = false; } } ","date":"2019-09-04","objectID":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-2/:5:0","tags":["concurrent","course note"],"title":"Concurrent Programming Course note 2","uri":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-2/"},{"categories":["Software-development"],"content":"Agile Vs Traditional SDLC Models Agile is based on the adaptive software development methods, whereas the traditional SDLC models like the waterfall model is based on a predictive approach. Predictive teams in the traditional SDLC models usually work with detailed planning and have a complete forecast of the exact tasks and features to be delivered in the next few months or during the product life cycle. Predictive methods entirely depend on the requirement analysis and planning done in the beginning of cycle. Any changes to be incorporated go through a strict change control management and prioritization. Agile uses an adaptive approach where there is no detailed planning and there is clarity on future tasks only in respect of what features need to be developed. There is feature driven development and the team adapts to the changing product requirements dynamically. The product is tested very frequently, through the release iterations, minimizing the risk of any major failures in future. Customer Interaction is the backbone of this Agile methodology, and open communication with minimum documentation are the typical features of Agile development environment. The agile teams work in close collaboration with each other and are most often located in the same geographical location. reference ","date":"2019-09-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/software-development-1/:1:0","tags":["ssw","course note"],"title":"Software Development Course note","uri":"https://tyrangyang.github.io/TyrangYang_blog/software-development-1/"},{"categories":["Software-development"],"content":"Rational unified process (RUP) Develop iteratively Manage requirement Use component-base architecture Model software visually Continuously verify software quality Control changes ","date":"2019-09-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/software-development-1/:2:0","tags":["ssw","course note"],"title":"Software Development Course note","uri":"https://tyrangyang.github.io/TyrangYang_blog/software-development-1/"},{"categories":["Software-development"],"content":"Boehm’s risk exposure comparison Time and effort invested in plans↑ –\u003e risk↓ ; lost of market share↑ ","date":"2019-09-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/software-development-1/:3:0","tags":["ssw","course note"],"title":"Software Development Course note","uri":"https://tyrangyang.github.io/TyrangYang_blog/software-development-1/"},{"categories":["Software-development"],"content":"Extreme programming The planning game Small release Metaphor - a simple explanation of project Simple design Testing Refactoring - Not changing the behavior and update the code Pair Programming Collective ownership - Everyone not knows everything but knows something about every part Continuous integration - integrate and test frequently. Reduce problem and easy to find who break the code Sustainable pace - not work too hard Whole team - customer is member of team Coding standard RUP where you most focus on the biggest risk first contrast with XP. XP release frequently. ","date":"2019-09-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/software-development-1/:4:0","tags":["ssw","course note"],"title":"Software Development Course note","uri":"https://tyrangyang.github.io/TyrangYang_blog/software-development-1/"},{"categories":["Software-development"],"content":"Corporate Culture Agile is self organizing teams. Frequently delivering and feedback. Manager help team to self organize, ask question. ","date":"2019-09-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/software-development-1/:5:0","tags":["ssw","course note"],"title":"Software Development Course note","uri":"https://tyrangyang.github.io/TyrangYang_blog/software-development-1/"},{"categories":["Software-development"],"content":"Today’s Topic Requirements: Plan driven Use Cases: RUP approach User Story: Agile approach ","date":"2019-09-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/software-development-1/:6:0","tags":["ssw","course note"],"title":"Software Development Course note","uri":"https://tyrangyang.github.io/TyrangYang_blog/software-development-1/"},{"categories":["Software-development"],"content":"User story Template: As a (role) I want (something) so that (benefit). ","date":"2019-09-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/software-development-1/:7:0","tags":["ssw","course note"],"title":"Software Development Course note","uri":"https://tyrangyang.github.io/TyrangYang_blog/software-development-1/"},{"categories":["Software-development"],"content":"User Story Components Title – a short handle for the story. Present tense verb in active voice is desirable Acceptance test - the name of a method to test the story How to determine if the functionality is provided? Acceptance test helps to flesh out the details of the user story Priority – decided by the customer (1 to 10. 1 is higher) Story points – estimated time to implement expressed in relative units (Use Fibonacci number) Description – one to three sentences describing the story ","date":"2019-09-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/software-development-1/:7:1","tags":["ssw","course note"],"title":"Software Development Course note","uri":"https://tyrangyang.github.io/TyrangYang_blog/software-development-1/"},{"categories":["Software-development"],"content":"Planning Poker Goal: estimate relative effort for each user story Participants Developers estimate effort Scrum Master optimizes the process Product owner answers questions Process Describe the user story Each developer assigns effort Continue until consensus ","date":"2019-09-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/software-development-1/:7:2","tags":["ssw","course note"],"title":"Software Development Course note","uri":"https://tyrangyang.github.io/TyrangYang_blog/software-development-1/"},{"categories":["Software-development"],"content":"INVEST Independent in context and scheduling Negotiable between customer and developers Valuable to the customer Estimable value to customer \u0026 effort for developers Small in scope Testable include sufficient details to allow testing ","date":"2019-09-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/software-development-1/:7:3","tags":["ssw","course note"],"title":"Software Development Course note","uri":"https://tyrangyang.github.io/TyrangYang_blog/software-development-1/"},{"categories":["Software-development"],"content":"limitation may lack of look-ahead –\u003e Developers need quick responses from customers may lack of context –\u003e statement is terse/too concise may lack of completeness –\u003e Gaps may arise as the user stories and product evolve ","date":"2019-09-03","objectID":"https://tyrangyang.github.io/TyrangYang_blog/software-development-1/:7:4","tags":["ssw","course note"],"title":"Software Development Course note","uri":"https://tyrangyang.github.io/TyrangYang_blog/software-development-1/"},{"categories":["Note"],"content":"MathJax.Hub.Config({ jax: [\"input/TeX\", \"output/HTML-CSS\"], tex2jax: { inlineMath: [ ['$', '$'] ], displayMath: [ ['$$', '$$']], processEscapes: true, skipTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code'] }, messageStyle: \"none\", \"HTML-CSS\": { preferredFont: \"TeX\", availableFonts: [\"STIX\",\"TeX\"] } }); ","date":"2019-08-29","objectID":"https://tyrangyang.github.io/TyrangYang_blog/web-develop-review/:0:0","tags":["web","nodejs","express","javascript"],"title":"Web development review","uri":"https://tyrangyang.github.io/TyrangYang_blog/web-develop-review/"},{"categories":["Note"],"content":"Document constructor $$f(x) = sin(x)$$ ","date":"2019-08-29","objectID":"https://tyrangyang.github.io/TyrangYang_blog/web-develop-review/:1:0","tags":["web","nodejs","express","javascript"],"title":"Web development review","uri":"https://tyrangyang.github.io/TyrangYang_blog/web-develop-review/"},{"categories":["Concurrent-programming"],"content":"What is concurrency Systems of interacting computer programs which share resource and run concurrently. ","date":"2019-08-28","objectID":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-1/:1:0","tags":["concurrent","course note"],"title":"Concurrent Programming Course note 1","uri":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-1/"},{"categories":["Concurrent-programming"],"content":"parallelism and concurrency Parallelism: Occurring physically at the same time. Concurrency: Occurring logically at the same time. ","date":"2019-08-28","objectID":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-1/:1:1","tags":["concurrent","course note"],"title":"Concurrent Programming Course note 1","uri":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-1/"},{"categories":["Concurrent-programming"],"content":"synchronization Process synchronization: Ensure the instructions are executed in certain order. Synchronization is irrelevant if processes do not interact with each other. Concurrency, and hence process synchronized, is useful only when processes interact with each other. ","date":"2019-08-28","objectID":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-1/:1:2","tags":["concurrent","course note"],"title":"Concurrent Programming Course note 1","uri":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-1/"},{"categories":["Concurrent-programming"],"content":"interaction Share memory is kind of interact. Two kind of interaction: Shared memory - variable is visible for each thread. : java Message passing - communicate other thread, I’m using this resource. ","date":"2019-08-28","objectID":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-1/:1:3","tags":["concurrent","course note"],"title":"Concurrent Programming Course note 1","uri":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-1/"},{"categories":["Concurrent-programming"],"content":"Process scheduling error Deadlock: Each thread take a resource and wait for next one which is hold by other thread. Livelock: Each thread take a resource and see other thread take next one. Therefore, each thread return it back. But this process will keep repeating. Starvation: One thread always take resource before other thread. ","date":"2019-08-28","objectID":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-1/:2:0","tags":["concurrent","course note"],"title":"Concurrent Programming Course note 1","uri":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-1/"},{"categories":["Concurrent-programming"],"content":"Modelling program execution If the program is: thread p:{ print(\"a\"); print(\"b\"); } thread q:{ print(\"c\"); print(\"d\"); } If P has m instructions and Q has n instructions, then there are: interleaving. For this one. m = n = 2. That will have 4!/2!2! = 24 / 4 = 6. There are 6 interleaving. All 6 interleaving are called transition system. ","date":"2019-08-28","objectID":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-1/:3:0","tags":["concurrent","course note"],"title":"Concurrent Programming Course note 1","uri":"https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-1/"},{"categories":["STL-study-note"],"content":"See all algorithm click here ","date":"2019-08-25","objectID":"https://tyrangyang.github.io/TyrangYang_blog/algorithm-feature/:0:0","tags":["c++","STL","algorithm"],"title":"Algorithm feature in c++ STL","uri":"https://tyrangyang.github.io/TyrangYang_blog/algorithm-feature/"},{"categories":["STL-study-note"],"content":"Mutating and Non-mutating algorithms ","date":"2019-08-25","objectID":"https://tyrangyang.github.io/TyrangYang_blog/algorithm-feature/:1:0","tags":["c++","STL","algorithm"],"title":"Algorithm feature in c++ STL","uri":"https://tyrangyang.github.io/TyrangYang_blog/algorithm-feature/"},{"categories":["STL-study-note"],"content":"Mutating algorithms Mutating algorithms means this algorithm will change the content that iterator pointed to. Like copy, swap, replace, fill, remove, permutation, partition, random shuffling and sort. If your give these algorithms a const iterator, only error will be returned. #include \u003ciostream\u003e#include \u003cvector\u003eusing namespace std; int main(int argc, char const *argv[]) { std::vector\u003cint\u003e iv = {22,30,30,17,33,40,17,23,22,12,20}; vector\u003cint\u003e::iterator ib = iv.begin(); vector\u003cint\u003e::iterator ie = iv.end(); sort(ib,ie); //works for (std::vector\u003cint\u003e::iterator i = iv.begin(); i != iv.end(); ++i) { cout \u003c\u003c *i \u003c\u003c ' '; } cout \u003c\u003c endl; // vector\u003cint\u003e::const_iterator ib = iv.begin(); // vector\u003cint\u003e::const_iterator ie = iv.end(); // sort(ib,ie); // error return 0; } ","date":"2019-08-25","objectID":"https://tyrangyang.github.io/TyrangYang_blog/algorithm-feature/:1:1","tags":["c++","STL","algorithm"],"title":"Algorithm feature in c++ STL","uri":"https://tyrangyang.github.io/TyrangYang_blog/algorithm-feature/"},{"categories":["STL-study-note"],"content":"Non-mutating algorithm Algorithm not change any element that iterator pointed to. Like: find, search, for_each, count, equal_mismatch, max, min. Some algorithms have functor like for_each to change element. #include \u003ciostream\u003e#include \u003cvector\u003eusing namespace std; template \u003ctypename T\u003e struct add { int temp = 0; add(){}; add(int t): temp(t){}; void operator () (T\u0026 x) const{ x += temp; } }; int main(int argc, char const *argv[]) { std::vector\u003cint\u003e iv = {22,30,30,17,33,40,17,23,22,12,20}; for_each(iv.begin(), iv.end(), add\u003cint\u003e(100)); for (std::vector\u003cint\u003e::iterator i = iv.begin(); i != iv.end(); ++i) { cout \u003c\u003c *i \u003c\u003c ' '; } cout \u003c\u003c endl; } ","date":"2019-08-25","objectID":"https://tyrangyang.github.io/TyrangYang_blog/algorithm-feature/:1:2","tags":["c++","STL","algorithm"],"title":"Algorithm feature in c++ STL","uri":"https://tyrangyang.github.io/TyrangYang_blog/algorithm-feature/"},{"categories":["STL-study-note"],"content":"General form in STL algorithm ","date":"2019-08-25","objectID":"https://tyrangyang.github.io/TyrangYang_blog/algorithm-feature/:2:0","tags":["c++","STL","algorithm"],"title":"Algorithm feature in c++ STL","uri":"https://tyrangyang.github.io/TyrangYang_blog/algorithm-feature/"},{"categories":["STL-study-note"],"content":"[first, last) STL usually use open-close range which is [first, last). The range is from first to last(not include last). The benefit is that if function stop at last position, you this function is end. For example, find() return a iterator which point to last position, that means not find the target value. You don’t need null to represent without finding. ","date":"2019-08-25","objectID":"https://tyrangyang.github.io/TyrangYang_blog/algorithm-feature/:2:1","tags":["c++","STL","algorithm"],"title":"Algorithm feature in c++ STL","uri":"https://tyrangyang.github.io/TyrangYang_blog/algorithm-feature/"},{"categories":["STL-study-note"],"content":"iterator Each algorithm need different type and is Backward compatible. ","date":"2019-08-25","objectID":"https://tyrangyang.github.io/TyrangYang_blog/algorithm-feature/:2:2","tags":["c++","STL","algorithm"],"title":"Algorithm feature in c++ STL","uri":"https://tyrangyang.github.io/TyrangYang_blog/algorithm-feature/"},{"categories":["STL-study-note"],"content":"different type That may have some different version for one function. Some may need a functor. like, find and find_if. Usually, it appear on some function which need comparison. For mutating algorithm, normally have two version. One is in-place and another is copy. like replace and replace_if. ","date":"2019-08-25","objectID":"https://tyrangyang.github.io/TyrangYang_blog/algorithm-feature/:2:3","tags":["c++","STL","algorithm"],"title":"Algorithm feature in c++ STL","uri":"https://tyrangyang.github.io/TyrangYang_blog/algorithm-feature/"},{"categories":["STL-study-note"],"content":"Bit operator operator function example « left shift 0001 –\u003e 0010 » right shift 0010 –\u003e 0001 \u0026 and (bit by bit) 1100 \u0026 1010 = 1000 | or (bit by bit) 1010 | 0101 = 1111 ~ reverse ~0000 = 1111 ^ XOR 0110 ^ 1100 = 1010 ","date":"2019-08-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/cpp-bit-operation/:1:0","tags":["c++","bit"],"title":"Bit operation in C++","uri":"https://tyrangyang.github.io/TyrangYang_blog/cpp-bit-operation/"},{"categories":["STL-study-note"],"content":"Operator: \u0026 x is a bit x \u0026 1 = x x \u0026 0 = 0 Usually use \u0026 as a filter. Suppose we have a number is X, X \u0026 0011 will get the last two bits of X. #include \u003ciostream\u003eusing namespace std; int main(int argc, char const *argv[]) { int testInt = 123; cout \u003c\u003c \"The test integer is: \" \u003c\u003c testInt \u003c\u003c endl; cout \u003c\u003c \"The binary number is: \" \u003c\u003c endl; for (int i = 31; i \u003e= 0; --i) { int tmp = testInt \u0026 (1 \u003c\u003c i); if(tmp == 0) cout \u003c\u003c '0'; else cout \u003c\u003c '1'; if(i % 4 == 0) cout \u003c\u003c ' '; } cout \u003c\u003c endl; return 0; } ","date":"2019-08-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/cpp-bit-operation/:1:1","tags":["c++","bit"],"title":"Bit operation in C++","uri":"https://tyrangyang.github.io/TyrangYang_blog/cpp-bit-operation/"},{"categories":["STL-study-note"],"content":"Operator: | Wave Adder. One is 1 result will be 1. #include \u003ciostream\u003e#include \u003cbitset\u003eusing namespace std; int main(int argc, char const *argv[]) { // we want a wave like 111000 int begin = 1 \u003c\u003c 3; // 1000 for(int i = 0 ; i \u003c 2; ++i){ begin = begin | begin \u003c\u003c 1; } bitset\u003c8\u003e test(begin); cout \u003c\u003c test \u003c\u003c endl; cout \u003c\u003c begin \u003c\u003c endl; } ","date":"2019-08-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/cpp-bit-operation/:1:2","tags":["c++","bit"],"title":"Bit operation in C++","uri":"https://tyrangyang.github.io/TyrangYang_blog/cpp-bit-operation/"},{"categories":["STL-study-note"],"content":"Operator: ^ Canceller. Same is 0 otherwise is 1. a ^ b = c —\u003e b = c ^ a ","date":"2019-08-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/cpp-bit-operation/:1:3","tags":["c++","bit"],"title":"Bit operation in C++","uri":"https://tyrangyang.github.io/TyrangYang_blog/cpp-bit-operation/"},{"categories":["STL-study-note"],"content":"bitset Official Doc bitset is stable structure that boolean value in only one bit. It need prefix the size. The defect of bitset is that it cannot extend. vector\u003cbool\u003e don’t need to array about the size however that is defective at design level. Instead, we can use vector\u003cchar\u003e. (char is 4 bits in c++) bitset use for a huge mount of boolean data. Bitset need 8 bytes at beginning(64 bit memory). If the array of boolean data is small( \u003c8 bytes), you better use a integer or long integer to store and use bit operator to manipulate. Definitely, bitset is more easy to use. #include \u003ciostream\u003e#include \u003cbitset\u003e#include \u003cstring\u003eusing namespace std; int main(int argc, char const *argv[]) { int val = 9; bitset\u003c4\u003e foo(val); // 1001 bitset\u003c4\u003e bar(\"0011\"); // 0011 bitset\u003c4\u003e baz(0xf); // 1111 cout \u003c\u003c foo \u003c\u003c endl; cout \u003c\u003c bar \u003c\u003c endl; cout \u003c\u003c baz \u003c\u003c endl; cout \u003c\u003c \"calculation\" \u003c\u003c endl; cout \u003c\u003c (foo \u0026 bar) \u003c\u003c endl; // 0001 cout \u003c\u003c (foo | bar) \u003c\u003c endl; // 1011 cout \u003c\u003c (foo ^ bar) \u003c\u003c endl; // 1010 cout \u003c\u003c \"foo = \" \u003c\u003c (foo |= bar) \u003c\u003c endl; // foo = 1011 // foo = 1011 // foo[0] = 1; foo[2] = 1; foo[3] = 0; foo[4] = 1; for (int i = 0; i \u003c 4; ++i) { cout \u003c\u003c foo[i] \u003c\u003c ' '; } cout \u003c\u003c endl; } ","date":"2019-08-18","objectID":"https://tyrangyang.github.io/TyrangYang_blog/cpp-bit-operation/:2:0","tags":["c++","bit"],"title":"Bit operation in C++","uri":"https://tyrangyang.github.io/TyrangYang_blog/cpp-bit-operation/"},{"categories":["Alg\u0026DataStr"],"content":"2-3 tree \u0026 2-4 tree 2-node: 1 key and 2 children 3-node: 2 keys and 3 children 4-node: 3 keys and 4 children A (2,4) tree (also called 2-4 tree or 2-3-4 tree) is a multi-way search with the following properties: Node-Size Property: every internal node has at most four children Depth Property: all the external nodes have the same depth ","date":"2019-08-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/rb-tree/:1:0","tags":["c++","java","binary tree"],"title":"RB tree","uri":"https://tyrangyang.github.io/TyrangYang_blog/rb-tree/"},{"categories":["Alg\u0026DataStr"],"content":"insertion ","date":"2019-08-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/rb-tree/:1:1","tags":["c++","java","binary tree"],"title":"RB tree","uri":"https://tyrangyang.github.io/TyrangYang_blog/rb-tree/"},{"categories":["Alg\u0026DataStr"],"content":"deletion ","date":"2019-08-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/rb-tree/:1:2","tags":["c++","java","binary tree"],"title":"RB tree","uri":"https://tyrangyang.github.io/TyrangYang_blog/rb-tree/"},{"categories":["Alg\u0026DataStr"],"content":"2-4 tree ==\u003e RB tree If break down 3-node and 4-node, 2-4 tree will become RB tree. 2-node ==\u003e black node 3-node ==\u003e left/right side red node and black node 4-node ==\u003e two red node and a black node RB tree represent a 2-4 tree in binary by providing a special balance strategy. ","date":"2019-08-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/rb-tree/:2:0","tags":["c++","java","binary tree"],"title":"RB tree","uri":"https://tyrangyang.github.io/TyrangYang_blog/rb-tree/"},{"categories":["Alg\u0026DataStr"],"content":"RB tree rotate * New node --\u003e X * Parent --\u003e P * Grandparent --\u003e G * Parent sibling --\u003e S X must be red while loop: P is red P is on the left of G S is red Change P and S to black Change G to red Let G become X and back to while loop S is Black or Null IF: X on the right of P. Then: Rotate_left() Change P to black Change G to red Rotate_right() P is on the right of G S is red Change P and S to black Change G to red Let G become X and back to while loop S is Black or Null IF: X on the left of P. Then: Rotate_right() Change P to black Change G to red Rotate_left() ROOT = black // In case change root. ","date":"2019-08-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/rb-tree/:3:0","tags":["c++","java","binary tree"],"title":"RB tree","uri":"https://tyrangyang.github.io/TyrangYang_blog/rb-tree/"},{"categories":["Alg\u0026DataStr"],"content":"RB tree structure ","date":"2019-08-17","objectID":"https://tyrangyang.github.io/TyrangYang_blog/rb-tree/:4:0","tags":["c++","java","binary tree"],"title":"RB tree","uri":"https://tyrangyang.github.io/TyrangYang_blog/rb-tree/"},{"categories":["STL-study-note"],"content":"Example increment and decrement operator #include \u003ciostream\u003eusing namespace std; class INT { private: int m_i; public: INT(int i):m_i(i){}; friend bool operator==(INT\u0026 test1, INT\u0026 test2){ return test1.m_i == test2.m_i; } friend bool operator!=(INT\u0026 test1, INT\u0026 test2){ return test1.m_i != test2.m_i; } friend INT operator+(INT\u0026 test1, INT\u0026 test2){ int temp = test1.m_i + test2.m_i; INT res(temp); return res; } INT\u0026 operator=(INT\u0026 test){ this-\u003em_i = test.m_i; return *this; } int\u0026 operator*() const{ return (int\u0026)this-\u003em_i; } // int a() const {}; This means a() cannot change any member in class. INT\u0026 operator++(){ //prefix. ++test; this-\u003em_i += 1; return *this; } // Why prefix is not const. Because it always return original class and actually it support ++++test. const INT operator++(int){ //postfix. test++; INT temp = *this; // ++(*this); this-\u003em_i += 1; return temp; } // Postfix must be const. Because it return a temporary variable and it not support test++++. // You can try int i = 1; i++++; // This is invalid. friend ostream\u0026 operator\u003c\u003c(ostream\u0026 s, const INT\u0026 i){ s \u003c\u003c '[' \u003c\u003c i.m_i \u003c\u003c ']'; return s; } }; int main(int argc, char const *argv[]) { INT test(1); INT test1(10); INT test2(3); cout \u003c\u003c ++test \u003c\u003c endl; //[2] cout \u003c\u003c test++ \u003c\u003c endl; //[2] cout \u003c\u003c test \u003c\u003c endl; //[3] cout \u003c\u003c *test \u003c\u003c endl; //3 cout \u003c\u003c (test + test2) \u003c\u003c endl; //[6] cout \u003c\u003c boolalpha \u003c\u003c (test == test2) \u003c\u003c endl; //true test = test1; cout \u003c\u003c test \u003c\u003c endl; //[10] return 0; } ","date":"2019-08-13","objectID":"https://tyrangyang.github.io/TyrangYang_blog/operator-overwrite/:1:0","tags":["c++","operator"],"title":"Operator overwrite in c++","uri":"https://tyrangyang.github.io/TyrangYang_blog/operator-overwrite/"},{"categories":["STL-study-note"],"content":"Second Example convert operator class Rational { int _n; int _d; public: Rational(int numerator = 0, int denominator = 1) : _n(numerator), _d(denominator){}; Rational(const Rational \u0026rhs) // copy constructor { _n = rhs._n; _d = rhs._d; } ~Rational(){}; Rational operator+(const Rational \u0026rhs) const { return Rational((_n * rhs._d) + (_d * rhs._n), _d * rhs._d); } Rational operator-(const Rational \u0026rhs) const { return Rational((_n * rhs._d) - (_d * rhs._n), _d * rhs._d); } Rational operator*(const Rational \u0026rhs) const { return Rational(_n * rhs._n, _d * rhs._d); } Rational operator/(const Rational \u0026rhs) const { return Rational(_n * rhs._d, _d * rhs._n); } Rational \u0026operator=(const Rational \u0026rhs) { if (this != \u0026rhs) { _n = rhs._n; _d = rhs._d; } return *this; } operator std::string() const { // convert operator if (_d == 1) return std::to_string(_n); else return std::to_string(_n) + \"/\" + std::to_string(_d); } int getNomernator() const { return _n; }; int getDenomerator() const { return _d; }; }; ostream \u0026operator\u003c\u003c(ostream \u0026o, const Rational \u0026rhs) { return o \u003c\u003c (string)rhs; } int main(int argc, char const *argv[]) { Rational t1; // default constructor cout \u003c\u003c t1 \u003c\u003c endl; Rational t2(5, 3); // constructor cout \u003c\u003c t2 \u003c\u003c endl; Rational t3 = t2; // copy constructor cout \u003c\u003c t3 \u003c\u003c endl; t1 = t3 + 2; cout \u003c\u003c t1 \u003c\u003c endl; cout \u003c\u003c t1 * t2 \u003c\u003c endl; string b = \"Rational t3 = \"; b += t3; cout \u003c\u003c b \u003c\u003c endl; Rational *t = new (nothrow) Rational[5]; // new operator // nothrow is not throw error when allocate memory fail. if (t == nullptr) return 1; // error delete[] t; // delete operator return 0; } ","date":"2019-08-13","objectID":"https://tyrangyang.github.io/TyrangYang_blog/operator-overwrite/:2:0","tags":["c++","operator"],"title":"Operator overwrite in c++","uri":"https://tyrangyang.github.io/TyrangYang_blog/operator-overwrite/"},{"categories":["STL-study-note"],"content":"Classification Sequence container array (build in) vector heap priority queue list slist (not standard) deque stack (adopter) queue (adopter) Associative container RB-tree (not public) set map multiset multemap hashtable (not standard) hash_set (not standard) hash_map (not standard) hash_multimap (not standard) hash_multiset (not standard) Associative container have a key-value pair. It do not have back and front so they never have push_back, pop_back. ","date":"2019-07-31","objectID":"https://tyrangyang.github.io/TyrangYang_blog/containers/:1:0","tags":["c++","STL","container"],"title":"Container in c++","uri":"https://tyrangyang.github.io/TyrangYang_blog/containers/"},{"categories":["STL-study-note"],"content":"Vector This is similar with grow array. Vector use sequential space. ","date":"2019-07-31","objectID":"https://tyrangyang.github.io/TyrangYang_blog/containers/:2:0","tags":["c++","STL","container"],"title":"Container in c++","uri":"https://tyrangyang.github.io/TyrangYang_blog/containers/"},{"categories":["STL-study-note"],"content":"insert(position, n, x) When the number of element from position to end is bigger than the number of new element, move directly may cause overlap. ","date":"2019-07-31","objectID":"https://tyrangyang.github.io/TyrangYang_blog/containers/:2:1","tags":["c++","STL","container"],"title":"Container in c++","uri":"https://tyrangyang.github.io/TyrangYang_blog/containers/"},{"categories":["STL-study-note"],"content":"vector\u003cbool\u003e vector\u003cbool\u003e is not array of boolean type data. It actually convert to bit array. Each bit will represent a bool value. ","date":"2019-07-31","objectID":"https://tyrangyang.github.io/TyrangYang_blog/containers/:2:2","tags":["c++","STL","container"],"title":"Container in c++","uri":"https://tyrangyang.github.io/TyrangYang_blog/containers/"},{"categories":["STL-study-note"],"content":"List Actually, list is a circular double linked list. Here is proof that list have a circular: #include \u003ciostream\u003e#include \u003clist\u003eusing namespace std; int main(int argc, char const *argv[]) { list\u003cint\u003e ml = {1,2,3,4,5}; cout \u003c\u003c boolalpha; cout \u003c\u003c ((++ml.end()) == (ml.begin())) \u003c\u003c endl; // true // the next of end is begin. return 0; } List have an empty node which end() point to. The next of this empty node is begin and the previous of begin is the empty node. ","date":"2019-07-31","objectID":"https://tyrangyang.github.io/TyrangYang_blog/containers/:3:0","tags":["c++","STL","container"],"title":"Container in c++","uri":"https://tyrangyang.github.io/TyrangYang_blog/containers/"},{"categories":["STL-study-note"],"content":"transfer() transfer() can move some element in specific range*( [first, last) )* to a specific location. It is a basic function to move element in list and foundation of other complicated function like sort(), reverse(), splice(). void transfer(iterator position, iterator first, iterator last) { if (position != last) { (*(link_type((*last.node).prev))).next = position.node; // (1) (*(link_type((*first.node).prev))).next = last.node; // (2) (*(link_type((*position.node).prev))).next = first.node; // (3) link_type tmp = link_type((*position.node).prev); // (4) (*position.node).prev = (*last.node).prev; // (5) (*last.node).prev = (*first.node).prev; // (6) (*first.node).prev = tmp; // (7) } } ","date":"2019-07-31","objectID":"https://tyrangyang.github.io/TyrangYang_blog/containers/:3:1","tags":["c++","STL","container"],"title":"Container in c++","uri":"https://tyrangyang.github.io/TyrangYang_blog/containers/"},{"categories":["STL-study-note"],"content":"sort() list have it own sort algorithm. List cannot use std::sort() because this function need RandomAccessIterator instead of BidirectionalIterator. This algorithm is O(nlogn). It roughly a merge sort. This website has a sample show the algorithm step by step. But STL sort algorithm is better. ","date":"2019-07-31","objectID":"https://tyrangyang.github.io/TyrangYang_blog/containers/:3:2","tags":["c++","STL","container"],"title":"Container in c++","uri":"https://tyrangyang.github.io/TyrangYang_blog/containers/"},{"categories":["STL-study-note"],"content":"Deque Deque is a continuous linear space. Deque can insert and remove element at begin and end. Technically, vector has same function but is inefficient. Deque do not have capacity, therefore push and pop on back and front in constant time. Deque provide Random Access Iterator but it iterator is not same with vector and very complicated. If want sort deque, copy to vector, sort and copy back. When deque space has been filled, it will connect a continuous space. Therefore, deque use separate continuous linear space. Deque structure: If 20 integer in a deque, the iterator is: ","date":"2019-07-31","objectID":"https://tyrangyang.github.io/TyrangYang_blog/containers/:4:0","tags":["c++","STL","container"],"title":"Container in c++","uri":"https://tyrangyang.github.io/TyrangYang_blog/containers/"},{"categories":["STL-study-note"],"content":"Stack Stack is deque which close one end. STL design stack base on deque, therefore stack is not classified as container but classified as adopter. FILO NO iterator Can be implemented by list. ","date":"2019-07-31","objectID":"https://tyrangyang.github.io/TyrangYang_blog/containers/:5:0","tags":["c++","STL","container"],"title":"Container in c++","uri":"https://tyrangyang.github.io/TyrangYang_blog/containers/"},{"categories":["STL-study-note"],"content":"Queue Similar thing with stack. FIFO. NO iterator Can be implemented by list. ","date":"2019-07-31","objectID":"https://tyrangyang.github.io/TyrangYang_blog/containers/:6:0","tags":["c++","STL","container"],"title":"Container in c++","uri":"https://tyrangyang.github.io/TyrangYang_blog/containers/"},{"categories":["STL-study-note"],"content":"Heap Heap is not a container in STL but it is the basement of priority_queue. Heap is a complete binary tree and array can store all elements in heap. However, we want to change the capacity of array. We can use a vector and some algorithm to make up a heap. No iterator ","date":"2019-07-31","objectID":"https://tyrangyang.github.io/TyrangYang_blog/containers/:7:0","tags":["c++","STL","container"],"title":"Container in c++","uri":"https://tyrangyang.github.io/TyrangYang_blog/containers/"},{"categories":["STL-study-note"],"content":"push_heap Add one element in heap ","date":"2019-07-31","objectID":"https://tyrangyang.github.io/TyrangYang_blog/containers/:7:1","tags":["c++","STL","container"],"title":"Container in c++","uri":"https://tyrangyang.github.io/TyrangYang_blog/containers/"},{"categories":["STL-study-note"],"content":"pop_heap Pop one element push and pop is not swap element. It actually manipulate the location. Because pop the an element and put it at the end of array, you can adjust the rest of elements by make_heap. template \u003cclass RandomAccessIterator, class Distance, class T\u003e void __adjust_heap(RandomAccessIterator first, Distance holeIndex, Distance len, T value) { Distance topIndex = holeIndex; Distance secondChild = 2 * holeIndex + 2; // 洞節點之右子節點 while (secondChild \u003c len) { // 比較洞節點之左右兩個子值，然後以 secondChild 代表較大子節點。 if (*(first + secondChild) \u003c *(first + (secondChild - 1))) secondChild--; // Percolate down:令較大子值為洞值，再令洞號下移至較大子節點處。 *(first + holeIndex) = *(first + secondChild); holeIndex = secondChild; // 找出新洞節點的右子節點 secondChild = 2 * (secondChild + 1); } if (secondChild == len) { // 沒有右子節點，只有左子節點 // Percolate down:令左子值為洞值，再令洞號下移至左子節點處。 *(first + holeIndex) = *(first + (secondChild - 1)); holeIndex = secondChild - 1; } // 將欲調整值填入目前的洞號內。注意，此時肯定滿足次序特性。 // 依侯捷之見，下面直接改為 *(first + holeIndex) = value; 應該可以。 __push_heap(first, holeIndex, topIndex, value); } ","date":"2019-07-31","objectID":"https://tyrangyang.github.io/TyrangYang_blog/containers/:7:2","tags":["c++","STL","container"],"title":"Container in c++","uri":"https://tyrangyang.github.io/TyrangYang_blog/containers/"},{"categories":["STL-study-note"],"content":"sort_heap After pop a element, will stay at the end of array. After pop all element, heap must empty and array is sorted. ","date":"2019-07-31","objectID":"https://tyrangyang.github.io/TyrangYang_blog/containers/:7:3","tags":["c++","STL","container"],"title":"Container in c++","uri":"https://tyrangyang.github.io/TyrangYang_blog/containers/"},{"categories":["STL-study-note"],"content":"make_heap Make a range of elements into heap. ","date":"2019-07-31","objectID":"https://tyrangyang.github.io/TyrangYang_blog/containers/:7:4","tags":["c++","STL","container"],"title":"Container in c++","uri":"https://tyrangyang.github.io/TyrangYang_blog/containers/"},{"categories":["STL-study-note"],"content":"usage #include \u003ciostream\u003e#include \u003cvector\u003e#include \u003calgorithm\u003e // heapusing namespace std; int main(int argc, char const *argv[]) { int ia[10] = {0,1,2,3,4,5,6,7,8,9}; vector\u003cint\u003e iv(ia, ia+10); make_heap(iv.begin(), iv.end()); // 9 8 6 7 4 5 2 0 3 1 pop_heap(iv.begin(), iv.end()); // 8 7 6 3 4 5 2 0 1 9 sort_heap(iv.begin(), iv.end()-1); // 0 1 2 3 4 5 6 7 8 9 for(int i: iv){ cout \u003c\u003c ' ' \u003c\u003c i; } cout \u003c\u003c endl; // Base on array make_heap(ia, ia + 10); // 9 8 6 7 4 5 2 0 3 1 for(int i: ia){ cout \u003c\u003c ' ' \u003c\u003c i; } cout \u003c\u003c endl; return 0; } ","date":"2019-07-31","objectID":"https://tyrangyang.github.io/TyrangYang_blog/containers/:7:5","tags":["c++","STL","container"],"title":"Container in c++","uri":"https://tyrangyang.github.io/TyrangYang_blog/containers/"},{"categories":["STL-study-note"],"content":"Priority_queue priority_queue is adopter with heap algorithm. No iterator Vector + make_heap ","date":"2019-07-31","objectID":"https://tyrangyang.github.io/TyrangYang_blog/containers/:8:0","tags":["c++","STL","container"],"title":"Container in c++","uri":"https://tyrangyang.github.io/TyrangYang_blog/containers/"},{"categories":["STL-study-note"],"content":"Forward_list Forward_list is a single linked list. Forward iterator ","date":"2019-07-31","objectID":"https://tyrangyang.github.io/TyrangYang_blog/containers/:9:0","tags":["c++","STL","container"],"title":"Container in c++","uri":"https://tyrangyang.github.io/TyrangYang_blog/containers/"},{"categories":["STL-study-note"],"content":"insert_after() \u0026 erase_after() In c++, insert() and erase() will add or remove element before the position your given. But it is more cost that insert or erase in a single linked list. Therefore, forward_list only provide insert_after() and erase_after() which you can add or remove element after the position your provided. ","date":"2019-07-31","objectID":"https://tyrangyang.github.io/TyrangYang_blog/containers/:9:1","tags":["c++","STL","container"],"title":"Container in c++","uri":"https://tyrangyang.github.io/TyrangYang_blog/containers/"},{"categories":["STL-study-note"],"content":"push_front() \u0026 pop_front() Unlike queue and priority_queue only provide push and pop at end, forward_list just allow you push and pop at beginning because it is a single linked list. ","date":"2019-07-31","objectID":"https://tyrangyang.github.io/TyrangYang_blog/containers/:9:2","tags":["c++","STL","container"],"title":"Container in c++","uri":"https://tyrangyang.github.io/TyrangYang_blog/containers/"},{"categories":["STL-study-note"],"content":"No size() Forward_list not provide size(). ","date":"2019-07-31","objectID":"https://tyrangyang.github.io/TyrangYang_blog/containers/:9:3","tags":["c++","STL","container"],"title":"Container in c++","uri":"https://tyrangyang.github.io/TyrangYang_blog/containers/"},{"categories":["STL-study-note"],"content":"RB tree See another post: RB Tree ","date":"2019-07-31","objectID":"https://tyrangyang.github.io/TyrangYang_blog/containers/:10:0","tags":["c++","STL","container"],"title":"Container in c++","uri":"https://tyrangyang.github.io/TyrangYang_blog/containers/"},{"categories":["STL-study-note"],"content":"Set Set only have key.(Or key and value is same.) Set not allow duplication. Set are base on RB tree. The iterator of set is const_iterator. You cannot modify any element through iterator. STL::find() is work. But better using set::find(). ","date":"2019-07-31","objectID":"https://tyrangyang.github.io/TyrangYang_blog/containers/:11:0","tags":["c++","STL","container"],"title":"Container in c++","uri":"https://tyrangyang.github.io/TyrangYang_blog/containers/"},{"categories":["STL-study-note"],"content":"Map Map have key-value pair. Map not allow duplication on key. Map are base on RB tree. You can modify the value by iterator bu not the key. Therefore, it neither a const_iterator nor mutable_iterator. STL::find() is work. But better using map::find(). Map could use operator[] to access by providing a key. But the problem is that if the key your provided not exist in map, that will insert this key. Therefore, if you want to modify value but not add new key-value pair, you can use map.at(). If you just want to know this exist or not, you can use map.count() which will return 1 or 0. #include \u003ciostream\u003e#include \u003cmap\u003eusing namespace std; int main(int argc, char const *argv[]) { map\u003cchar, int\u003e my_map; my_map['b'] = 100; my_map['a'] = 200; my_map['c'] = 300; my_map['d'] == 100 ? cout \u003c\u003c \"find\" \u003c\u003c endl : cout \u003c\u003c \"not find\" \u003c\u003c endl; my_map.count('e') ? cout \u003c\u003c \"find\" \u003c\u003c endl : cout \u003c\u003c \"not find\" \u003c\u003c endl; for(auto i: my_map){ cout \u003c\u003c i.first \u003c\u003c \" \" \u003c\u003c i.second \u003c\u003c endl; } } ","date":"2019-07-31","objectID":"https://tyrangyang.github.io/TyrangYang_blog/containers/:12:0","tags":["c++","STL","container"],"title":"Container in c++","uri":"https://tyrangyang.github.io/TyrangYang_blog/containers/"},{"categories":["STL-study-note"],"content":"multimap \u0026 multiset Could have several key. ","date":"2019-07-31","objectID":"https://tyrangyang.github.io/TyrangYang_blog/containers/:13:0","tags":["c++","STL","container"],"title":"Container in c++","uri":"https://tyrangyang.github.io/TyrangYang_blog/containers/"},{"categories":["STL-study-note"],"content":"HashTable ","date":"2019-07-31","objectID":"https://tyrangyang.github.io/TyrangYang_blog/containers/:14:0","tags":["c++","STL","container"],"title":"Container in c++","uri":"https://tyrangyang.github.io/TyrangYang_blog/containers/"},{"categories":["STL-study-note"],"content":"Linear probing ","date":"2019-07-31","objectID":"https://tyrangyang.github.io/TyrangYang_blog/containers/:14:1","tags":["c++","STL","container"],"title":"Container in c++","uri":"https://tyrangyang.github.io/TyrangYang_blog/containers/"},{"categories":["STL-study-note"],"content":"Quadratic probing After find a collision, Change the hash function. Multiplication is not good, especially i power 2. Hi = H0 + i2(mod M) Hi+1 = H0 + (i+1)2(mod M) But we can do: Hi+1 - Hi = (i+1)2(mod M) - i2(mod M) Hi+1 - Hi = (i+1)2 - i2(mod M) Hi+1 - Hi = 2i + 1 (mod M) Hi+1 = Hi + 2i + 1 (mod M) We can use left shift to multiple 2 which is a acceptable method. ","date":"2019-07-31","objectID":"https://tyrangyang.github.io/TyrangYang_blog/containers/:14:2","tags":["c++","STL","container"],"title":"Container in c++","uri":"https://tyrangyang.github.io/TyrangYang_blog/containers/"},{"categories":["STL-study-note"],"content":"Separate chaining C++ use separate chaining to achieve hash table. In STL, hash table use a vector and linked-list (not list in STL). ","date":"2019-07-31","objectID":"https://tyrangyang.github.io/TyrangYang_blog/containers/:14:3","tags":["c++","STL","container"],"title":"Container in c++","uri":"https://tyrangyang.github.io/TyrangYang_blog/containers/"},{"categories":["C++"],"content":"explicit and implicit In C++, constructor can be explicit and implicit. The reserve word explicit affect constructor with only one parameter or only one parameter without given initial value. #include \u003ciostream\u003eusing namespace std; class test1 { int data; public: test1(int t = 0):data(t){}; ~test1(){}; test1 operator + (const test1 \u0026a) const{ return test1(data + a.data); } test1\u0026 operator = (const test1 \u0026a) { this-\u003edata = a.data; return *this; } int getData(){return data;}; }; class test2 { int data; public: // explicit test2(int t):data(t){}; explicit test2(int t, int a = 0):data(t){}; ~test2(){}; int getData(){return data;}; }; int main(int argc, char const *argv[]) { test1 t1(1); //explicit constructor cout \u003c\u003c t1.getData() \u003c\u003c endl; // 1 test1 t2 = 1; //implicit constructor cout \u003c\u003c t2.getData() \u003c\u003c endl; // 1 test1 t3 = 'a'; //implicit convert integer into char and call implicit constructor cout \u003c\u003c t3.getData() \u003c\u003c endl; // 97 test1 t4; t4 = t2 + 3; // + operation will take 3 and call implicit constructor t4 = 3 + t2; // ERROR! + operater belongs the integer and it doesn't know how to convert t2 test2 t5('a');// explicit constructor is OK cout \u003c\u003c t5.getData() \u003c\u003c endl; // 97 test2 t6 = 'a'; //error. Must be explicit. return 0; } t1(1) -\u003e explicit t1 = 1 -\u003e implicit ","date":"2019-07-25","objectID":"https://tyrangyang.github.io/TyrangYang_blog/explicit-and-implicit/:1:0","tags":["c++"],"title":"explicit and implicit in c++","uri":"https://tyrangyang.github.io/TyrangYang_blog/explicit-and-implicit/"},{"categories":["STL-study-note"],"content":"Iterator 设计思维 STL 中 container 和 algorithm 是相对独立的，本身设计也是泛型化的。Iterator 就是用来将这两者联系在一起的。 ","date":"2019-07-24","objectID":"https://tyrangyang.github.io/TyrangYang_blog/iterators/:1:0","tags":["c++","STL"],"title":"Iterator in c++","uri":"https://tyrangyang.github.io/TyrangYang_blog/iterators/"},{"categories":["STL-study-note"],"content":"Iterator 是一种 smart pointer 可以不用 delete ","date":"2019-07-24","objectID":"https://tyrangyang.github.io/TyrangYang_blog/iterators/:2:0","tags":["c++","STL"],"title":"Iterator in c++","uri":"https://tyrangyang.github.io/TyrangYang_blog/iterators/"},{"categories":["STL-study-note"],"content":"Iterator 属性 iterator_traits 是用来抽取 iterator 中的类型(特指 value type)的。 这是 iterator 中常见的五种属性。 template \u003cclass I\u003e struct iterator_traits { typedef typename I::iterator_category iterator_category; //category typedef typename I::value_type value_type; // type typedef typename I::difference_type difference_type; // typedef typename I::pointer pointer; // T* typedef typename I::reference reference; // T\u0026 }; #include \u003ciostream\u003e // std::cout#include \u003citerator\u003e // std::iterator_traits#include \u003ctypeinfo\u003e // typeidusing namespace std; int main() { typedef std::iterator_traits\u003cdouble*\u003e traits; cout \u003c\u003c typeid(traits::iterator_category).name() \u003c\u003c endl; cout \u003c\u003c typeid(traits::value_type).name() \u003c\u003c endl; cout \u003c\u003c typeid(traits::difference_type).name() \u003c\u003c endl; cout \u003c\u003c typeid(traits::pointer).name() \u003c\u003c endl; cout \u003c\u003c typeid(traits::reference).name() \u003c\u003c endl; return 0; } NSt3__126random_access_iterator_tagE d l Pd d yanghaoli ","date":"2019-07-24","objectID":"https://tyrangyang.github.io/TyrangYang_blog/iterators/:3:0","tags":["c++","STL"],"title":"Iterator in c++","uri":"https://tyrangyang.github.io/TyrangYang_blog/iterators/"},{"categories":["STL-study-note"],"content":"iterator_category Input iterator: Read only. Cannot be change. Output iterator: Write only. Forward iterator: Allow write and only one direction.(only operator++). Some algorithms use one direction enough.(like replace()) Bidirectional iterator: For some algorithm will move both direction. Support operator++ and operator–. Random access iterator: Support more operator. p+n, p-n, p[n], p1-p2, p1 \u003c p2. ","date":"2019-07-24","objectID":"https://tyrangyang.github.io/TyrangYang_blog/iterators/:4:0","tags":["c++","STL"],"title":"Iterator in c++","uri":"https://tyrangyang.github.io/TyrangYang_blog/iterators/"},{"categories":["STL-study-note"],"content":"iterator \u0026 const_iterator const_iterator is read only. #include \u003ciostream\u003e#include \u003cvector\u003e using namespace std; int main(int argc, char const *argv[]) { vector\u003cint\u003e iv = {1,2,3,4,5}; vector\u003cint\u003e::iterator a = iv.begin(); vector\u003cint\u003e::const_iterator b = iv.begin(); *a = 12; cout \u003c\u003c *a \u003c\u003c endl; // *b = 100; // NOT WORK cout \u003c\u003c *b \u003c\u003c endl; } ","date":"2019-07-24","objectID":"https://tyrangyang.github.io/TyrangYang_blog/iterators/:5:0","tags":["c++","STL"],"title":"Iterator in c++","uri":"https://tyrangyang.github.io/TyrangYang_blog/iterators/"},{"categories":["STL-study-note"],"content":"Allocator is for memory 配置内存空间 -\u003e 构建(constructor) -\u003e 解构(destructor) -\u003e 释放内存空间 ","date":"2019-07-21","objectID":"https://tyrangyang.github.io/TyrangYang_blog/allocator/:1:0","tags":["c++","STL"],"title":"Allocator in c++","uri":"https://tyrangyang.github.io/TyrangYang_blog/allocator/"},{"categories":["STL-study-note"],"content":"construct() and destroy() 用于建构和解构 ","date":"2019-07-21","objectID":"https://tyrangyang.github.io/TyrangYang_blog/allocator/:2:0","tags":["c++","STL"],"title":"Allocator in c++","uri":"https://tyrangyang.github.io/TyrangYang_blog/allocator/"},{"categories":["STL-study-note"],"content":"Memory allocate and release 双层配置器。第一级是区块大于 128 bytes 的，使用 malloc()和 free()。第二级是区块小于 128 bytes 的，使用 memory pool 和 freelist。 ","date":"2019-07-21","objectID":"https://tyrangyang.github.io/TyrangYang_blog/allocator/:3:0","tags":["c++","STL"],"title":"Allocator in c++","uri":"https://tyrangyang.github.io/TyrangYang_blog/allocator/"},{"categories":["STL-study-note"],"content":"第一級配置器 第一級配置器以 malloc(), free(), realloc() 等 C 函式執行實際的記憶體配置、釋放、重配置動作，並實作出類似 C++ new-handler7 機制。是的，它不能直接運用 C++ new-handler 機制，因為它並非使用 ::operator new 來配置記 憶體。 所謂 C++ new handler 機制是，你可以要求系統在記憶體配置需求無法被滿足時， 喚起一個你所指定的函式。換句話說一旦 ::operator new 無法達成任務，在丟出 std::bad_alloc 異常狀態之前，會先呼叫由客端指定的處理常式。此處理常式 通常即被稱為 new-handler。new-handler 解決記憶體不足的作法有特定的模式。 注意，SGI 以 malloc 而非 ::operator new 來配置記憶體(我所能夠想像的一 個原因是歷史因素，另一個原因是 C++ 並未提供相應於 realloc() 的記憶體配 置動作)，因此 SGI 不能直接使用 C++ 的 set_new_handler()，必須模擬一個 類似的 set_malloc_handler()。 請注意，SGI 第一級配置器的 allocate()和 realloc() 都是在呼叫 malloc() 和 realloc() 不成功後，改呼叫 oom_malloc() 和 oom_realloc()。後兩者都 有內迴圈，不斷呼叫「記憶體不足處理常式」，期望在某次呼叫之後，獲得足夠 的記憶體而圓滿達成任務。但如果「記憶體不足處理常式」並未被客端設定， oom_malloc() 和 oom_realloc() 便老實不客氣地呼叫 __THROW_BAD_ALLOC， 丟出 bad_alloc 異常訊息，或利用 exit(1) 硬生生中止程式。 記住，設計「記憶體不足處理常式」是客端的責任，設定「記憶體不足處理常式」 也是客端的責任。再一次提醒你，「記憶體不足處理常式」解決問題的作法有著 特定的模式，請參考 [Meyers98] 條款 7。 ","date":"2019-07-21","objectID":"https://tyrangyang.github.io/TyrangYang_blog/allocator/:3:1","tags":["c++","STL"],"title":"Allocator in c++","uri":"https://tyrangyang.github.io/TyrangYang_blog/allocator/"},{"categories":["STL-study-note"],"content":"第二級配置器 SGI 第二級配置器的作法是，如果區塊夠大，超過 128 bytes，就移交第一級配置 器處理。當區塊小於 128 bytes，則以記憶池(memory pool)管理，此法又稱為次 層配置(sub-allocation):每次配置一大塊記憶體，並維護對應之自由串列(free- list)。下次若再有相同大小的記憶體需求，就直接從 free-lists 中撥出。如果客端 釋還小額區塊，就由配置器回收到 free-lists 中 — 是的，別忘了，配置器除了負 責配置，也負責回收。為了方便管理，SGI 第二級配置器會主動將任何小額區塊 的記憶體需求量上調至 8 的倍數(例如客端要求 30 bytes，就自動調整為 32 bytes)，並維護 16 個 free-lists，各自管理大小分別為 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 128 bytes 的小額區塊。 union obj { union obj * free_list_link; char client_data[1]; /* The client sees this. */ }; union 是说明 free_list_link 这个指针和用户数据共用一段内存空间。 这样当在 list 中时，其中储存的是下一个的地址。如果不在 list 中被释放出来给用户使用， 那么存储的用户数据就会把 list 指针覆盖掉。 总之这是一个非常有意思的技巧。专门适合这种在两种类型之间切换同时可以节省空间不用同时维护两种信息。这个只能用于 c++。对于像是 java 这种强类型的语言，这种技巧不存在。 當它發現 free list 中沒有可用區塊了，就呼叫 refill()準備為 free list 重新填充空間。新的空間將取自記憶池(經由 chunk_alloc() 完成)。預設取得 20 個新節點(新區塊)，但萬一記憶池空間 不足，獲得的節點數(區塊數)可能小於 20 從記憶池中取空間給 free list 使用，是 chunk_alloc() 的工作 上述的 chunk_alloc() 函式以 end_free - start_free 來判斷記憶池的水量。 如果水量充足，就直接撥出 20 個區塊傳回給 free list。如果水量不足以提供 20 個 區塊，但還足夠供應一個以上的區塊，就撥出這不足 20 個區塊的空間出去。這時 候其 pass by reference 的 nobjs 參數將被修改為實際能夠供應的區塊數。如果記 憶池連一個區塊空間都無法供應，對客端顯然無法交待，此時便需利用 malloc() 從 heap 中配置記憶體，為記憶池注入活水源頭以應付需求。新水量的大小為需求 量的兩倍，再加上一個隨著配置次數增加而愈來愈大的附加量。 萬一山窮水盡，整個 system heap 空間都不夠了(以至無法為記憶池注入活水源 頭)，malloc() 行動失敗，chunk_alloc() 就四處尋找有無「尚有未用區塊， 且區塊夠大」之 free lists。找到的話就挖一塊交出，找不到的話就呼叫第一級配 置器。第一級配置器其實也是使用 malloc() 來配置記憶體，但它有 out-of-memory 處理機制(類似 new-handler 機制)，或許有機會釋放其他的記憶體拿來此處使用。 如果可以，就成功，否則發出 bad_alloc 異常。 ","date":"2019-07-21","objectID":"https://tyrangyang.github.io/TyrangYang_blog/allocator/:3:2","tags":["c++","STL"],"title":"Allocator in c++","uri":"https://tyrangyang.github.io/TyrangYang_blog/allocator/"},{"categories":["STL-study-note"],"content":"Memory basic processing function STL 定义了五个全域式函数，用作于内存未被初始化的空间上。construct(), destroy(),uninitialized_copy(),uninitialized_fill(),uninitialized_fill_n(). construct(), destroy()是用来构造和解构对象的。 uninitialized_copy(),uninitialized_fill(),uninitialized_fill_n()是对三个 non-POD 类型(non-Plain Old Data).内存算法。对于 POD(像是基本类型)会调用高级函数(copy(),fill(),fill_n()) ","date":"2019-07-21","objectID":"https://tyrangyang.github.io/TyrangYang_blog/allocator/:4:0","tags":["c++","STL"],"title":"Allocator in c++","uri":"https://tyrangyang.github.io/TyrangYang_blog/allocator/"},{"categories":["STL-study-note"],"content":"uninitialized_copy(begin,end,begin2) 将迭代器 begin1~end(尾后迭代器)所代表的输入范围 copy 到 begin2 开始的内存,begin2 所指向的内存必须大于 begin~end 所需的； ","date":"2019-07-21","objectID":"https://tyrangyang.github.io/TyrangYang_blog/allocator/:4:1","tags":["c++","STL"],"title":"Allocator in c++","uri":"https://tyrangyang.github.io/TyrangYang_blog/allocator/"},{"categories":["STL-study-note"],"content":"uninitialized_fill(begin,end,t) 在迭代器 begin~end 范围内构建 t 的拷贝； ","date":"2019-07-21","objectID":"https://tyrangyang.github.io/TyrangYang_blog/allocator/:4:2","tags":["c++","STL"],"title":"Allocator in c++","uri":"https://tyrangyang.github.io/TyrangYang_blog/allocator/"},{"categories":["STL-study-note"],"content":"uninitialized_fill_n(begin,n,t) 从 begin 开始的内存构建 n 个 t 的拷贝； ","date":"2019-07-21","objectID":"https://tyrangyang.github.io/TyrangYang_blog/allocator/:4:3","tags":["c++","STL"],"title":"Allocator in c++","uri":"https://tyrangyang.github.io/TyrangYang_blog/allocator/"},{"categories":["STL-study-note"],"content":"Summary allocator 是用来开辟空间的。 construct 和 destroy 是用来构建对象。剩下的三个函数是算法。对一段空间的拷贝。对一个对象的重复拷贝。 ","date":"2019-07-21","objectID":"https://tyrangyang.github.io/TyrangYang_blog/allocator/:5:0","tags":["c++","STL"],"title":"Allocator in c++","uri":"https://tyrangyang.github.io/TyrangYang_blog/allocator/"},{"categories":["STL-study-note"],"content":"Basically, Functor have same functionality with interface in java. Think about this code. You want count all string whose length is less than 5. #include \u003ciostream\u003e#include \u003calgorithm\u003e#include \u003cvector\u003e#include \u003cstring\u003eusing namespace std; bool lenLessThanFive(const string\u0026 str){ return str.size() \u003c 5; } int main(int argc, char const *argv[]) { string ia[5] = {\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\"}; vector\u003cstring\u003e iv(ia, ia+5); int res = count_if(iv.begin(), iv.end(), lenLessThanFive); cout \u003c\u003c \"res= \" \u003c\u003c res \u003c\u003c endl; return 0; } lenLessThanFive is a function pointer here. It is work right, but it lack scalability. We cannot change the threshold in the function every time. Meanwhile, Function need to be unary(only one parameter). Therefore, we can consider the Functor. template \u003ctypename T\u003e class LenLessThan { private: const int lenThreshold; public: bool operator () (const T\u0026 str){ return str.size() \u003c lenThreshold; } explicit LenLessThan(int len):lenThreshold(len){}; }; int main(int argc, char const *argv[]) { string ia[5] = {\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\"}; vector\u003cstring\u003e iv(ia, ia+5); int res = count_if(iv.begin(), iv.end(), LenLessThan\u003cstring\u003e(4)); cout \u003c\u003c \"res = \" \u003c\u003c res \u003c\u003c endl; return 0; } Class LenLessThan is a functor and you can solve this problem. A amount of functor used in STL. ","date":"2019-07-20","objectID":"https://tyrangyang.github.io/TyrangYang_blog/functor/:0:0","tags":["c++","STL"],"title":"Functor in C++","uri":"https://tyrangyang.github.io/TyrangYang_blog/functor/"},{"categories":["Language-comparison"],"content":"Sort ","date":"2019-07-12","objectID":"https://tyrangyang.github.io/TyrangYang_blog/language-comparison-common-method/:1:0","tags":["c++","java"],"title":"Common method comparison - c++ \u0026 java","uri":"https://tyrangyang.github.io/TyrangYang_blog/language-comparison-common-method/"},{"categories":["Language-comparison"],"content":"C++ For c++, here is official document sort() This method sorts elements in the range [first, last). Result is in ascending order by deflaut. Introsort. // sort algorithm example #include \u003ciostream\u003e // std::cout#include \u003calgorithm\u003e // std::sort#include \u003cvector\u003e // std::vector bool myfunction (int i,int j) { return (i\u003ej); } int main () { int myints[] = {32,71,12,45,26,80,53,33}; std::vector\u003cint\u003e myvector (myints, myints+8); // 32 71 12 45 26 80 53 33 // using default comparison (operator \u003c): std::sort (myvector.begin(), myvector.begin()+4); //(12 32 45 71)26 80 53 33 // using function as comp std::sort (myvector.begin(), myvector.end(), myfunction); //80 71 53 45 33 32 26 12 // print out content: std::cout \u003c\u003c \"myvector contains:\"; for (std::vector\u003cint\u003e::iterator it=myvector.begin(); it!=myvector.end(); ++it) std::cout \u003c\u003c ' ' \u003c\u003c *it; std::cout \u003c\u003c '\\n'; return 0; } On average, linearithmic in the distance between first and last: Performs approximately N*log2N stable_sort() sort() is unstable. However, stable_sort() preserves the relative order of the elements with equivalent value. If enough extra memory is available, linearithmic in the distance between first and last: Performs up to N*log2(N) element comparisons (where N is this distance), and up to that many element moves. Otherwise, polyloglinear in that distance: Performs up to N*log22(N) element comparisons, and up to that many element swaps. partial_sort() partial_sort() sort first several elements while the remaining elements are left without any specific order. int main(int argc, char const *argv[]) { vector\u003cint\u003e myvector = {32,71,12,45,26,80,53,33}; partial_sort(myvector.begin(), myvector.begin() + 4, myvector.end()); //(12 26 32 33 71) 80 53 45 for(int i : myvector){ cout \u003c\u003c i \u003c\u003c \" \"; } cout \u003c\u003c endl; } ","date":"2019-07-12","objectID":"https://tyrangyang.github.io/TyrangYang_blog/language-comparison-common-method/:1:1","tags":["c++","java"],"title":"Common method comparison - c++ \u0026 java","uri":"https://tyrangyang.github.io/TyrangYang_blog/language-comparison-common-method/"},{"categories":["Language-comparison"],"content":"Java sort(), primitive type and object type. parallelSort().collection.sort() Summary from CSDN Array.sort() Package: java.util.Arrays; Sorts the specified array into ascending numerical order. For primitive type, The sorting algorithm is a Dual-Pivot Quicksort(Orignal source) by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm offers O(n log(n)) performance on many data sets that cause other quicksorts to degrade to quadratic performance, and is typically faster than traditional (one-pivot) Quicksort implementations. This quicksort is unstable. For object type, the sorting algorithm is Timsort which is combined character of merge sort and selection sort(wiki). This is a stable sort algorithm. Primitive type public static void sort​(int[] a); import java.util.Arrays; public class test{ public static void main(String[] args) { int[] test1 = {6,5,4,3,2,1}; int[] test2 = {6,5,4,3,2,1}; Arrays.sort(test1); Arrays.sort(test2, 0, 3); for (int i : test1) { System.out.print(i + \" \"); } System.out.println(); //1 2 3 4 5 6 for (int i : test2) { System.out.print(i + \" \"); } System.out.println(); //(4 5 6) 3 2 1 } } Object type public static void sort​(Object[] a) public static void sort​(Object[] a, int fromIndex, int toIndex) public static \u003cT\u003e void sort​(T[] a, Comparator\u003c? super T\u003e c) public static \u003cT\u003e void sort​(T[] a, int fromIndex, int toIndex, Comparator\u003c? super T\u003e c) Arrays.parallelSort() This is a stable sort algorithm. Only if the size of array is larger than MIN_ARRAY_SORT_GRAN, algorithm can use multi-thread. (MIN_ARRAY_SORT_GRAN is 1«13, that is 8192, in source code.) *The sorting algorithm is a parallel sort-merge that breaks the array into sub-arrays that are themselves sorted and then merged.(JavaDoc) Container import java.util.Collections; import java.util.Comparator; import java.util.ArrayList; public class test{ public static void main(String[] args) { ArrayList\u003cInteger\u003e test1 = new ArrayList\u003cInteger\u003e(Arrays.asList(9,3,2,1,8,7,6,5,4)); Comparator\u003cInteger\u003e reverseComparator = Collections.reverseOrder(); Collections.sort(test1,reverseComparator); for (int i : test1) { System.out.print(i + \" \"); } System.out.println(); //9 8 7 6 5 4 3 2 1 } } ","date":"2019-07-12","objectID":"https://tyrangyang.github.io/TyrangYang_blog/language-comparison-common-method/:1:2","tags":["c++","java"],"title":"Common method comparison - c++ \u0026 java","uri":"https://tyrangyang.github.io/TyrangYang_blog/language-comparison-common-method/"},{"categories":["Language-comparison"],"content":"Container comparison C++ version is c++11. Java version is java se8. C++ JAVA Description array / [ ] [ ] 固定大小的数组 vector ArrayList 可变长度的数组 Vector 可变长度的数组，支持同步操作，效率比 ArrayList 略差 list LinkedList 双链表，便于增删 forward_list 单链表，c++没有给他提供 size()的方法 deque ArrayDeque 双向队列 stack Stack 栈，先进后出 queue Queue 队，先进先出 priority_queue PriorityQueue 支持优先级的队列 set TreeSet 集合，数据有序，红黑树 unordered_set HashSet 集合，数据无序，hash map TreeMap key-value 映射，key 有序，红黑树 unordered_map HashMap map, 无序，hash multiset 集合，允许重复元素 multimap map，允许重复的 key unordered_multiset 无序允许重复元素集合 unordered_multimap 无序允许重复 key 的 map LinkedHashSet 按照插入顺序，支持 hash 查找 LinkedHashMap 按照插入顺序，支持 hash 查找 HashTable 类似 HashMap，效率略低 bitset BitSet 位操作 ","date":"2019-07-11","objectID":"https://tyrangyang.github.io/TyrangYang_blog/language-comparison-containor/:1:0","tags":["c++","java","container"],"title":"Container comparison - c++ \u0026 java","uri":"https://tyrangyang.github.io/TyrangYang_blog/language-comparison-containor/"},{"categories":["Language-comparison"],"content":"HashTable \u0026 HashMap The HashMap class is roughly equivalent to Hashtable, except that it is asynchronized and permits nulls. 有两个不同： HashTable 是 synchronized 的 HashTable 不支持 key 或 value 为 null。 同时由于 HashTable 是 synchronized 的，效率自然降低 ","date":"2019-07-11","objectID":"https://tyrangyang.github.io/TyrangYang_blog/language-comparison-containor/:1:1","tags":["c++","java","container"],"title":"Container comparison - c++ \u0026 java","uri":"https://tyrangyang.github.io/TyrangYang_blog/language-comparison-containor/"},{"categories":["Java"],"content":"Declaring an array Both are allow string argc[]; string[] argc; ","date":"2019-07-10","objectID":"https://tyrangyang.github.io/TyrangYang_blog/java-review-array/:1:0","tags":["review","java"],"title":"Review java - Array","uri":"https://tyrangyang.github.io/TyrangYang_blog/java-review-array/"},{"categories":["Java"],"content":"Int array int[] nums = new int[7]; nums[0] = 10; Rabbit[] racers = new Rabbit[10];//10 empty rabbit array; racers[0] = new Rabbit(\"B\",\"F\"); ","date":"2019-07-10","objectID":"https://tyrangyang.github.io/TyrangYang_blog/java-review-array/:1:1","tags":["review","java"],"title":"Review java - Array","uri":"https://tyrangyang.github.io/TyrangYang_blog/java-review-array/"},{"categories":["Java"],"content":"arraycopy() System.arraycopy(nums, 0, nums, 0, nums.length); ","date":"2019-07-10","objectID":"https://tyrangyang.github.io/TyrangYang_blog/java-review-array/:2:0","tags":["review","java"],"title":"Review java - Array","uri":"https://tyrangyang.github.io/TyrangYang_blog/java-review-array/"},{"categories":["Java"],"content":"Array vs ArrayList An array needs to know its size at the time of creation, arrayList does not. To assign an object in array you must assign it to a specific index. Array use array syntax ([]). ArrayList is parameterized. ArrayList\u003cstring\u003e ","date":"2019-07-10","objectID":"https://tyrangyang.github.io/TyrangYang_blog/java-review-array/:3:0","tags":["review","java"],"title":"Review java - Array","uri":"https://tyrangyang.github.io/TyrangYang_blog/java-review-array/"},{"categories":["Java"],"content":"ArrayList ArrayList\u003cFlower\u003e flowerList = new ArrayList\u003cFlower\u003e();// \u003c- ArrayList constructor Flower f = new Flower(); Flower m = new Flower(); flowerList.add(f); flowerList.add(m); ","date":"2019-07-10","objectID":"https://tyrangyang.github.io/TyrangYang_blog/java-review-array/:4:0","tags":["review","java"],"title":"Review java - Array","uri":"https://tyrangyang.github.io/TyrangYang_blog/java-review-array/"},{"categories":["Java"],"content":"JavaDocs JavaDocs is able to easily generate a code “maintenance manual” A doc comment is made up of two parts – a description and two or more tag. /** * Here is description * * @tag Comment for tag */ ","date":"2019-07-09","objectID":"https://tyrangyang.github.io/TyrangYang_blog/java-review-javadoc/:1:0","tags":["review","java"],"title":"Review java - javadoc","uri":"https://tyrangyang.github.io/TyrangYang_blog/java-review-javadoc/"},{"categories":["Java"],"content":"Tags @author (classes and interfaces only, required) @version (classes and interfaces only, required) @param (methods and constructors only) @return (methods only) @exception @see @since @serial (or @serialField or @serialData) @deprecated ","date":"2019-07-09","objectID":"https://tyrangyang.github.io/TyrangYang_blog/java-review-javadoc/:1:1","tags":["review","java"],"title":"Review java - javadoc","uri":"https://tyrangyang.github.io/TyrangYang_blog/java-review-javadoc/"},{"categories":["Java"],"content":"JDK Docs External documentation can be created with javadoc javadoc -d docs file.java -d docs create a directory store all javadoc html file. ","date":"2019-07-09","objectID":"https://tyrangyang.github.io/TyrangYang_blog/java-review-javadoc/:2:0","tags":["review","java"],"title":"Review java - javadoc","uri":"https://tyrangyang.github.io/TyrangYang_blog/java-review-javadoc/"},{"categories":["Java"],"content":"Class \u0026 Object A class only exists at compile time; An object only exists at runtime. ","date":"2019-07-05","objectID":"https://tyrangyang.github.io/TyrangYang_blog/java-review-oo/:1:0","tags":["review","java"],"title":"Review java - OO","uri":"https://tyrangyang.github.io/TyrangYang_blog/java-review-oo/"},{"categories":["Java"],"content":"Data Encapsulation Data Encapsulation/information hiding: where the internal state and operation are hidden from others. The more information Class A knows about Class B, the greater the possibility that changing Class A will adversely affect Class B. In an ideal world, making internal changes to Class A should have no, or very little, effect on other classes. Access control allows for encapsulation ","date":"2019-07-05","objectID":"https://tyrangyang.github.io/TyrangYang_blog/java-review-oo/:2:0","tags":["review","java"],"title":"Review java - OO","uri":"https://tyrangyang.github.io/TyrangYang_blog/java-review-oo/"},{"categories":["Java"],"content":"Access modifiers Qualifier class package subclass outside the package public √ √ √ √ protected √ √ √ X default √ √ X X private √ X X X ","date":"2019-07-05","objectID":"https://tyrangyang.github.io/TyrangYang_blog/java-review-oo/:3:0","tags":["review","java"],"title":"Review java - OO","uri":"https://tyrangyang.github.io/TyrangYang_blog/java-review-oo/"},{"categories":["Java"],"content":"Instance variable \u0026 Local variable Instance variable is declared inside a class but not inside a method. Local variable is declared within a method. ","date":"2019-07-05","objectID":"https://tyrangyang.github.io/TyrangYang_blog/java-review-oo/:4:0","tags":["review","java"],"title":"Review java - OO","uri":"https://tyrangyang.github.io/TyrangYang_blog/java-review-oo/"},{"categories":["Java"],"content":"Getter \u0026 Setter If a instance variable is private, constructor should use the setter of that variable. Wrong code public class Flower { private String color; private int height; public Flower(){ } public Flower(String c, int h){ this.color = c; this.height = h; } public void setColor(String c){ this.color = c; } public String getColor(){ return this.color; } public void setHeight(int h){ if(h \u003c 0 || h \u003e 10){ System.out.println(\"ERROR\"); } else{ this.height = h; } } public int getColor(){ return this.color; } } Test code: public class FlowerTest(){ public static void main(String[] args) { Flower f1 = new Flower(); f1.setColor = \"red\"; f1.setHeight = 11; // wrong f1.setHeight = 10; // OK Flower f2 = new Flower(\"red\",11) // Should print error. BUT it pass. } } Change constructor into: ... public Flower(String c, int h){ this.setColor(c); this.setHeight(h); } ... ","date":"2019-07-05","objectID":"https://tyrangyang.github.io/TyrangYang_blog/java-review-oo/:5:0","tags":["review","java"],"title":"Review java - OO","uri":"https://tyrangyang.github.io/TyrangYang_blog/java-review-oo/"},{"categories":["Java"],"content":"Method overloading Whenever two or more methods have the same name but different input parameters. ","date":"2019-07-05","objectID":"https://tyrangyang.github.io/TyrangYang_blog/java-review-oo/:6:0","tags":["review","java"],"title":"Review java - OO","uri":"https://tyrangyang.github.io/TyrangYang_blog/java-review-oo/"},{"categories":["Java"],"content":"Write a java class Instance variable Constructors Accessors(getter) Mutator(setter) Service Methods toString() method With the toString() method, the object can be printed with a user-defined format. public string toString(){ return \"\u003c user-defined format\"; } A test class ","date":"2019-07-05","objectID":"https://tyrangyang.github.io/TyrangYang_blog/java-review-oo/:7:0","tags":["review","java"],"title":"Review java - OO","uri":"https://tyrangyang.github.io/TyrangYang_blog/java-review-oo/"},{"categories":["Java"],"content":"Basic types Every type have a default value: Type Representation Initial value Storage Max. value byte singed integer 0 8 bits 127 short singed integer 0 16 bits 32767 int singed integer 0 32 bits 2147483647 long singed integer 0 64 bits over 10^18 float floating point 0.0 32 bits over 10^38 double floating point 0.0 64 bits over 10^308 boolean true or false false 1 bit char UNICODE (not ASCII) u0000 16 bits uFFFF ","date":"2019-07-01","objectID":"https://tyrangyang.github.io/TyrangYang_blog/java-review-variable/:1:0","tags":["review","java"],"title":"Review java - Variable","uri":"https://tyrangyang.github.io/TyrangYang_blog/java-review-variable/"},{"categories":["Java"],"content":"Difference between i++ and ++i b = 1; a = b++; // a = 1; b = 2 b = 1; a = ++b; // a = 2; b = 2 int a = 1; int res = a++ + a; // res = 3 ; a = 2. int a = 1; int res = a + a++; // res = 2; a = 2. int a = 1; int res = ++a + a; // res = 4; a = 2. int a = 1; int res = a + ++a; // res = 3; a = 2. ","date":"2019-07-01","objectID":"https://tyrangyang.github.io/TyrangYang_blog/java-review-variable/:2:0","tags":["review","java"],"title":"Review java - Variable","uri":"https://tyrangyang.github.io/TyrangYang_blog/java-review-variable/"},{"categories":["Java"],"content":"For loop for(int i=0; i \u003c n ; i++) ","date":"2019-07-01","objectID":"https://tyrangyang.github.io/TyrangYang_blog/java-review-variable/:3:0","tags":["review","java"],"title":"Review java - Variable","uri":"https://tyrangyang.github.io/TyrangYang_blog/java-review-variable/"},{"categories":["Java"],"content":"Break or continue the outer loop class TestContinueLabel{ public static void main (String args[]){ outer: for(int i = 1; i \u003c 5; i++){ System.out.println(\"Begin outer for i=\"+i);inner: for (int j = 1; j \u003c 5; j++){ if (j == i) continue outer; System.out.println(\"inner: i=\" + i + \" j=\"+j ); } System.out.println(\"End outer for i=\"+i); } System.out.println(\"Finished.\"); } } Result: Begin outer for i=1 Begin outer for i=2 inner: i=2 j=1 Begin outer for i=3 inner: i=3 j=1 inner: i=3 j=2 Begin outer for i=4 inner: i=4 j=1 inner: i=4 j=2 inner: i=4 j=3 Finished. class TestBreakLabel{ public static void main (String args[]){ outer: for(int i = 1; i \u003c 5; i++){ System.out.println(\"Begin outer for i=\"+i); inner: for (int j = 1; j \u003c 5; j++){ if (j == i) break outer; System.out.println(\"inner: i=\" + i + \" j=\"+j ); } System.out.println(\"End outer for i=\"+i); } System.out.println(\"Finished.\"); } } Result: Begin outer for i=1 Finished. C++ only use goto to achieve this feature void TestContinueLabel(){ for (int i = 1; i \u003c 5; ++i) { cout \u003c\u003c \"Begin outer for i=\" \u003c\u003c i \u003c\u003c endl; for (int j = 1; j \u003c 5; ++j) { if(i == j) goto ContinueTry; cout \u003c\u003c \"inner: i=\" \u003c\u003c i \u003c\u003c \" j=\" \u003c\u003c j \u003c\u003c endl; } cout \u003c\u003c \"End outer for i=\" \u003c\u003c i \u003c\u003c endl; ContinueTry:; } cout \u003c\u003c \"Finished.\" \u003c\u003c endl; } void TestBreakLabel(){ for (int i = 1; i \u003c 5; ++i) { cout \u003c\u003c \"Begin outer for i=\" \u003c\u003c i \u003c\u003c endl; for (int j = 1; j \u003c 5; ++j) { if(i == j) goto BreakTry; cout \u003c\u003c \"inner: i=\" \u003c\u003c i \u003c\u003c \" j=\" \u003c\u003c j \u003c\u003c endl; } cout \u003c\u003c \"End outer for i=\" \u003c\u003c i \u003c\u003c endl; } BreakTry: cout \u003c\u003c \"Finished.\" \u003c\u003c endl; } ","date":"2019-07-01","objectID":"https://tyrangyang.github.io/TyrangYang_blog/java-review-variable/:4:0","tags":["review","java"],"title":"Review java - Variable","uri":"https://tyrangyang.github.io/TyrangYang_blog/java-review-variable/"},{"categories":["Overview"],"content":"This is learning note for MarkDown Heading 1 or Heading 1 ","date":"2019-06-16","objectID":"https://tyrangyang.github.io/TyrangYang_blog/markdowntutorial/:0:0","tags":["markdown","html"],"title":"MarkDown overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/markdowntutorial/"},{"categories":["Overview"],"content":"Heading 2 or ","date":"2019-06-16","objectID":"https://tyrangyang.github.io/TyrangYang_blog/markdowntutorial/:1:0","tags":["markdown","html"],"title":"MarkDown overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/markdowntutorial/"},{"categories":["Overview"],"content":"Heading 2 ","date":"2019-06-16","objectID":"https://tyrangyang.github.io/TyrangYang_blog/markdowntutorial/:2:0","tags":["markdown","html"],"title":"MarkDown overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/markdowntutorial/"},{"categories":["Overview"],"content":"Italic and bold italic or italic bold or bold italic and bold or italic and bold ","date":"2019-06-16","objectID":"https://tyrangyang.github.io/TyrangYang_blog/markdowntutorial/:3:0","tags":["markdown","html"],"title":"MarkDown overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/markdowntutorial/"},{"categories":["Overview"],"content":"Unordered list line 1 line 2 line 3 sub 1 sub 2 or line 1 line 2 line 3 sub 1 sub 2 ","date":"2019-06-16","objectID":"https://tyrangyang.github.io/TyrangYang_blog/markdowntutorial/:4:0","tags":["markdown","html"],"title":"MarkDown overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/markdowntutorial/"},{"categories":["Overview"],"content":"Ordered list line 1 line 2 sub 1 sub 2 line 3 ","date":"2019-06-16","objectID":"https://tyrangyang.github.io/TyrangYang_blog/markdowntutorial/:5:0","tags":["markdown","html"],"title":"MarkDown overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/markdowntutorial/"},{"categories":["Overview"],"content":"BlockQuotes Use ‘\u003e’ for a quotes This is a quote. All other syntax can use in quote This is a nested quote Use ‘»’ ","date":"2019-06-16","objectID":"https://tyrangyang.github.io/TyrangYang_blog/markdowntutorial/:6:0","tags":["markdown","html"],"title":"MarkDown overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/markdowntutorial/"},{"categories":["Overview"],"content":"Code block Just on tab \u003chtml\u003e \u003chead\u003e \u003c/head\u003e \u003c/html\u003e ","date":"2019-06-16","objectID":"https://tyrangyang.github.io/TyrangYang_blog/markdowntutorial/:7:0","tags":["markdown","html"],"title":"MarkDown overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/markdowntutorial/"},{"categories":["Overview"],"content":"Code This is a code part function foo() Escaping Tick Marks `function foo()` int add(int a, int b){ return a+b; } function add(a, b) { return a + b; } def add(self, a, b): return a+b ","date":"2019-06-16","objectID":"https://tyrangyang.github.io/TyrangYang_blog/markdowntutorial/:8:0","tags":["markdown","html"],"title":"MarkDown overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/markdowntutorial/"},{"categories":["Overview"],"content":"Table (For github) a pdf fed afd 2 adf sda pdf 1 3 fads pdf 1 1 3 fast 1 1 2 3 Here is the markdown table generator ","date":"2019-06-16","objectID":"https://tyrangyang.github.io/TyrangYang_blog/markdowntutorial/:9:0","tags":["markdown","html"],"title":"MarkDown overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/markdowntutorial/"},{"categories":["Overview"],"content":"Url and Email haolinyang95@sina.com https://www.markdownguide.org/basic-syntax/ ","date":"2019-06-16","objectID":"https://tyrangyang.github.io/TyrangYang_blog/markdowntutorial/:10:0","tags":["markdown","html"],"title":"MarkDown overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/markdowntutorial/"},{"categories":["Overview"],"content":"Links This the official guide ","date":"2019-06-16","objectID":"https://tyrangyang.github.io/TyrangYang_blog/markdowntutorial/:11:0","tags":["markdown","html"],"title":"MarkDown overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/markdowntutorial/"},{"categories":["Overview"],"content":"Horizontal rule --- === ","date":"2019-06-16","objectID":"https://tyrangyang.github.io/TyrangYang_blog/markdowntutorial/:12:0","tags":["markdown","html"],"title":"MarkDown overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/markdowntutorial/"},{"categories":["Overview"],"content":"Subscript element H2O ","date":"2019-06-16","objectID":"https://tyrangyang.github.io/TyrangYang_blog/markdowntutorial/:13:0","tags":["markdown","html"],"title":"MarkDown overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/markdowntutorial/"},{"categories":["Overview"],"content":"Superscript element E=MC2 ","date":"2019-06-16","objectID":"https://tyrangyang.github.io/TyrangYang_blog/markdowntutorial/:14:0","tags":["markdown","html"],"title":"MarkDown overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/markdowntutorial/"},{"categories":["Overview"],"content":"Special sign using HTML (HTML symbol entity) Website for all symbol entity Blog for HTML ± ± √ ⇒ ⇔ space: Website ","date":"2019-06-16","objectID":"https://tyrangyang.github.io/TyrangYang_blog/markdowntutorial/:15:0","tags":["markdown","html"],"title":"MarkDown overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/markdowntutorial/"},{"categories":["Overview"],"content":"Image Logo Title Text 1what is here \" Logo Title Text 1 Logo Title Text 2anything? \" Logo Title Text 2 Write by Haolin Yang ","date":"2019-06-16","objectID":"https://tyrangyang.github.io/TyrangYang_blog/markdowntutorial/:16:0","tags":["markdown","html"],"title":"MarkDown overview","uri":"https://tyrangyang.github.io/TyrangYang_blog/markdowntutorial/"},{"categories":["Posts"],"content":"You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated. To add new posts, simply add a file in the _posts directory that follows the convention YYYY-MM-DD-name-of-post.ext and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works. Jekyll also offers powerful support for code snippets: {% highlight ruby %} def print_hi(name) puts “Hi, #{name}” end print_hi(‘Tom’) #=\u003e prints ‘Hi, Tom’ to STDOUT. {% endhighlight %} Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk. ","date":"2019-06-11","objectID":"https://tyrangyang.github.io/TyrangYang_blog/welcome-to-jekyll/:0:0","tags":null,"title":"Welcome to Jekyll!","uri":"https://tyrangyang.github.io/TyrangYang_blog/welcome-to-jekyll/"}]