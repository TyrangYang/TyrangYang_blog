<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Language-comparison - Category - TyrangYang_Blog</title><link>https://tyrangyang.github.io/TyrangYang_blog/categories/language-comparison/</link><description>Language-comparison - Category - TyrangYang_Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 12 Jul 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://tyrangyang.github.io/TyrangYang_blog/categories/language-comparison/" rel="self" type="application/rss+xml"/><item><title>Common method comparison - c++ &amp; java</title><link>https://tyrangyang.github.io/TyrangYang_blog/language-comparison-common-method/</link><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><author>Author</author><guid>https://tyrangyang.github.io/TyrangYang_blog/language-comparison-common-method/</guid><description><![CDATA[Sort C++ For c++, here is official document
sort() This method sorts elements in the range [first, last).
Result is in ascending order by deflaut.
Introsort.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 // sort algorithm example #include &lt;iostream&gt; // std::cout #include &lt;algorithm&gt; // std::sort #include &lt;vector&gt; // std::vector bool myfunction (int i,int j) { return (i&gt;j); } int main () { int myints[] = {32,71,12,45,26,80,53,33}; std::vector&lt;int&gt; myvector (myints, myints+8); // 32 71 12 45 26 80 53 33 // using default comparison (operator &lt;): std::sort (myvector.]]></description></item><item><title>Container comparison - c++ &amp; java</title><link>https://tyrangyang.github.io/TyrangYang_blog/language-comparison-containor/</link><pubDate>Thu, 11 Jul 2019 00:00:00 +0000</pubDate><author>Author</author><guid>https://tyrangyang.github.io/TyrangYang_blog/language-comparison-containor/</guid><description>Container comparison C++ version is c++11. Java version is java se8.
C++ JAVA Description array / [ ] [ ] 固定大小的数组 vector ArrayList 可变长度的数组 Vector 可变长度的数组，支持同步操作，效率比 ArrayList 略差 list LinkedList 双链表，便于增删 forward_list 单链表，c++没有给他提供 size()的方法 deque ArrayDeque 双向队列 stack Stack 栈，先进后出 queue Queue 队，先进先出 priority_queue PriorityQueue 支持优先级的队列 set TreeSet 集合，数据有序，红黑树 unordered_set HashSet 集合，数据无序，hash map TreeMap key-value 映射，key 有序，红黑树 unordered_map HashMap map, 无序，hash multiset 集合，允许重复元素 multimap map，允许重复的 key unordered_multiset 无序允许重复元素集合 unordered_multimap 无序允许重复 key 的 map LinkedHashSet 按照插入顺序，支持 hash 查找 LinkedHashMap 按照插入顺序，支持 hash 查找 HashTable 类似 HashMap，效率略低 bitset BitSet 位操作 HashTable &amp;amp; HashMap The HashMap class is roughly equivalent to Hashtable, except that it is asynchronized and permits nulls.</description></item></channel></rss>