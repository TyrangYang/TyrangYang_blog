<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Note - Category - TyrangYang_Blog</title><link>https://tyrangyang.github.io/TyrangYang_blog/categories/note/</link><description>Note - Category - TyrangYang_Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 26 Feb 2024 14:29:08 -0800</lastBuildDate><atom:link href="https://tyrangyang.github.io/TyrangYang_blog/categories/note/" rel="self" type="application/rss+xml"/><item><title>HTML/Document Trick</title><link>https://tyrangyang.github.io/TyrangYang_blog/html-trick/</link><pubDate>Mon, 26 Feb 2024 14:29:08 -0800</pubDate><author>xxxx</author><guid>https://tyrangyang.github.io/TyrangYang_blog/html-trick/</guid><description><![CDATA[Understanding offsetWidth, clientWidth, scrollWidth Note All these property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect(). Get Scrollbar width Reference: https://www.30secondsofcode.org/js/s/get-scrollbar-width/
Get window scroll bar width const getScrollbarWidth = () =&gt; window.innerWidth - document.documentElement.clientWidth; getScrollbarWidth(); Get a element scroll bar width const getScrollbarWidth = (el) =&gt; { const leftBorder = parseInt( getComputedStyle(el).getPropertyValue(&#39;border-left-width&#39;), 10 ); const rightBorder = parseInt( getComputedStyle(el).getPropertyValue(&#39;border-right-width&#39;), 10 ); return el.offsetWidth - el.]]></description></item><item><title>Typescript Trick</title><link>https://tyrangyang.github.io/TyrangYang_blog/typescript-trick/</link><pubDate>Mon, 26 Feb 2024 14:11:05 -0800</pubDate><author>xxxx</author><guid>https://tyrangyang.github.io/TyrangYang_blog/typescript-trick/</guid><description><![CDATA[generic types optional To make a generic type optional, you have to assign the void as the default value.
const fetchData = &lt;T = void&gt;(url: string): T =&gt; { const res: T = fetch(url); return res; }; https://garbagevalue.com/blog/optional-generic-typescript#quick-solutions-make-generic-type-optional
string[ ] &amp; [ string, &hellip;string[ ] ] The main difference is that type [string, ...string[]] at least have one element. [] will alert error. string[] could be empty. [] is ok.]]></description></item><item><title>HTML Effect with vanilla html js css</title><link>https://tyrangyang.github.io/TyrangYang_blog/html-effect/</link><pubDate>Mon, 14 Dec 2020 15:52:02 -0800</pubDate><author>xxxx</author><guid>https://tyrangyang.github.io/TyrangYang_blog/html-effect/</guid><description>Modal box Demo
Cursor &amp;amp; hover effect Demo
Pure Css hamburger button This is a hamburger button using pure css to style it.
Demo
Loading Demo
Sidebar Demo
Profile Demo</description></item><item><title>Js Trick</title><link>https://tyrangyang.github.io/TyrangYang_blog/js-trick/</link><pubDate>Sun, 03 May 2020 23:12:40 -0400</pubDate><author>xxxx</author><guid>https://tyrangyang.github.io/TyrangYang_blog/js-trick/</guid><description><![CDATA[warning Many of JavaScript cool feature or syntactic sugar included since ES6(ES2015). You can read this Article to know What new feature brings in since ES6
Conversion Any =&gt; Boolean !!false; // false !!undefined; // false !!null; // false !!NaN; // false !!0; // false !!&#39;&#39;; // false !!variable == Boolean(variable); String =&gt; Integer Number(&#39;100&#39;); //100 +&#39;100&#39;; // 100 +&#39;abc&#39;; // NAN Object &lt;=&gt; Array Array =&gt; Object let arr = [1, 2, 3, 4, 5]; let objFromArr1 = Object.]]></description></item><item><title>Traverse a tree</title><link>https://tyrangyang.github.io/TyrangYang_blog/traverse-a-tree/</link><pubDate>Mon, 10 Feb 2020 00:00:00 +0000</pubDate><author>Haolin Yang</author><guid>https://tyrangyang.github.io/TyrangYang_blog/traverse-a-tree/</guid><description><![CDATA[Idea to traverse a tree
Tree structure The tree structure:
struct TreeNode { int val; TreeNode *left; TreeNode *right; TreeNode(int x) : val(x), left(NULL), right(NULL) {} }; BFS DFS Pre-order In-order Post-order Relationship:
Iterative Loop for BFS:
void BFS(TreeNode *root){ stack&lt;TreeNode *&gt; q; q.push(root); while(!q.empty()){ TreeNode *temp = q.front(); q.pop(); // do something if(temp-&gt;left != NULL) q.push(temp -&gt; left); if(temp-&gt;right != NULL) q.push(temp -&gt; right); } } Loop for DFS:]]></description></item><item><title>SASS (SCSS) features</title><link>https://tyrangyang.github.io/TyrangYang_blog/sass/</link><pubDate>Wed, 18 Sep 2019 00:00:00 +0000</pubDate><author>Haolin Yang</author><guid>https://tyrangyang.github.io/TyrangYang_blog/sass/</guid><description><![CDATA[SCSS features Variables $font-stack: Helvetica, sans-serif; $primary-color: #333; body { font: 100% $font-stack; color: $primary-color; } Operator .container { width: 100%; } article[role=&#39;main&#39;] { float: left; width: 600px / 960px * 100%; } article[role=&#39;complementary&#39;] { float: right; width: 300px / 960px * 100%; } String interpolation $name: foo; $attr: border; p.#{$name} { #{$attr}-color: blue; } This is compile to:
p.foo { border-color: blue; } Nesting #main p { color: #00ff00; width: 90%; .]]></description></item><item><title>Web development review</title><link>https://tyrangyang.github.io/TyrangYang_blog/web-develop-review/</link><pubDate>Thu, 29 Aug 2019 00:00:00 +0000</pubDate><author>Haolin Yang</author><guid>https://tyrangyang.github.io/TyrangYang_blog/web-develop-review/</guid><description>Document constructor $$f(x) = sin(x)$$</description></item></channel></rss>