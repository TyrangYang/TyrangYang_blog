<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Overview - Category - TyrangYang_Blog</title>
        <link>https://tyrangyang.github.io/TyrangYang_blog/categories/overview/</link>
        <description>Overview - Category - TyrangYang_Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 22 Jul 2021 16:35:53 -0700</lastBuildDate><atom:link href="https://tyrangyang.github.io/TyrangYang_blog/categories/overview/" rel="self" type="application/rss+xml" /><item>
    <title>Design Pattern</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/design-pattern/</link>
    <pubDate>Thu, 22 Jul 2021 16:35:53 -0700</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/design-pattern/</guid>
    <description><![CDATA[Design pattern Factory pattern 1 2 3 4 5 6 7 8 9 10 11 12 13 const createDataBaseClass = (dbName: DBOption) =&gt; { switch (dbName) { case &#39;InMemo&#39;: return InMemoryDataBase; case &#39;SQL&#39;: return SQL_DB; // ... // you can add anything else default: break; } }; Singleton pattern 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 export const createDataBase = &lt;T extends BaseRecord&gt;() =&gt; { const db = new InMemoryDataBase&lt;T&gt;(); return db; }; const pokemonDB = createDataBase&lt;Pokemon&gt;(); pokemonDB.]]></description>
</item><item>
    <title>Typescript overview</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/typescript/</link>
    <pubDate>Thu, 08 Apr 2021 23:37:35 -0700</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/typescript/</guid>
    <description><![CDATA[type Union type &amp; Literal type 1 2 3 4 5 6 7 8 9 10 11 const add = ( a: number | string, b: number | string, type?: &#39;number&#39; | &#39;string&#39; ): number | string =&gt; { if (type === &#39;string&#39;) { return a.toString() + b.toString(); } else return +a + +b; }; console.log(add(1, 2)); Array 1 2 3 4 5 6 type Book = { id: string; name: string; }; let books: Book[] = []; unknown 1 2 3 4 5 6 7 8 9 10 11 12 let test1: unknown; let test2: string; test1 = &#39;xyz&#39;; // ok // test2 = test1; // error function f1(a: any) { a.]]></description>
</item><item>
    <title>React Logic Reuse Example</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/react-logic-reuse/</link>
    <pubDate>Fri, 12 Mar 2021 04:04:08 -0800</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/react-logic-reuse/</guid>
    <description><![CDATA[React logic extraction Check this post
Example code This example demonstrate one single feature using four different feature to archive code split
Code running there: &ndash;&gt;Link&lt;&ndash;
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 import { useState, useEffect } from React; const Styles = { redBorder: { border: &#39;1px solid #f00&#39;, }, }; const MouseDisplay = ({ x, y }) =&gt; { return ( &lt;div&gt; Mouse at x: {x} ; y: {y} &lt;/div&gt; ); }; const MouseDisplay2 = ({ x, y }) =&gt; { return ( &lt;div style={{ color: &#39;teal&#39; }}&gt; Mouse at x: {x} ; y: {y} &lt;/div&gt; ); }; // Normal export const MouseInfoAndDisplay = () =&gt; { const [x, setX] = useState(0); const [y, setY] = useState(0); const handleMove = (e) =&gt; { setX(e.]]></description>
</item><item>
    <title>Webpack Overview</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/webpack-overview/</link>
    <pubDate>Wed, 09 Dec 2020 19:12:38 -0700</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/webpack-overview/</guid>
    <description><![CDATA[webpack is a static module bundler for modern JavaScript applications.
Document: https://webpack.js.org/concepts/
Installation 1 npm i -D webpack webpack-cli webpack core concept Entry An entry point indicates which module webpack should use to begin building out its internal dependency graph. webpack will figure out which other modules and libraries that entry point depends on (directly and indirectly).
Output The output property tells webpack where to emit the bundles it creates and how to name these files.]]></description>
</item><item>
    <title>Jest Overview</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/jest-overview/</link>
    <pubDate>Mon, 14 Sep 2020 18:36:51 -0700</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/jest-overview/</guid>
    <description><![CDATA[Jest is a JavaScript Testing Framework
Document: https://jestjs.io/docs/en/getting-started
How to use Jest function.js
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 const axios = require(&#39;axios&#39;); const functions = { add: (num1, num2) =&gt; num1 + num2, isNull: () =&gt; null, checkValue: (x) =&gt; x, createUser: () =&gt; { const user = { firstName: &#39;Brad&#39; }; user[&#39;lastName&#39;] = &#39;Traversy&#39;; return user; }, fetchUser: () =&gt; axios .]]></description>
</item><item>
    <title>Redux Overview</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/redux-overview/</link>
    <pubDate>Mon, 07 Sep 2020 14:30:17 -0700</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/redux-overview/</guid>
    <description><![CDATA[Redux Document: English ‰∏≠Êñá
What is Redux Redux is a predictable state container for JavaScript apps.
Redux also created by Facebook and it is a improvement from Flux. Redux is state management for any view library (mostly react)
When use Redux Redux is design for complex UI, multiple view source or many interaction with server. If a simple UI, Redux is not necessary
Workflow Redux Workflow Example for Redux core In index.]]></description>
</item><item>
    <title>Http Status Code Overview</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/http-status-code/</link>
    <pubDate>Thu, 13 Aug 2020 14:11:38 -0700</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/http-status-code/</guid>
    <description><![CDATA[Reference: https://www.restapitutorial.com/httpstatuscodes.html
‚≠êÔ∏é -&gt; &ldquo;Top 10&rdquo; HTTP Status Code. More REST service-specific information is contained in the entry.
1XX Information 100 continue &ndash; Client should continue 101 switching protocols 102 processing (webDAV) 2XX Success ‚≠êÔ∏é200 OK &ndash; The request has succeeded. General status code. Most common code used to indicate success.
‚≠êÔ∏é201 Created &ndash; A new resource has been created and should return a URI. Successful creation occurred (via either POST or PUT).]]></description>
</item><item>
    <title>Html5 Overview üèó</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/html5-overview/</link>
    <pubDate>Thu, 13 Aug 2020 14:02:26 -0700</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/html5-overview/</guid>
    <description><![CDATA[table 1 2 3 4 5 6 7 8 9 10 table ‚îú‚îÄ‚îÄ thead ‚îÇ ‚îî‚îÄ‚îÄ tr ‚îÇ ‚îî‚îÄ‚îÄ th ‚îú‚îÄ‚îÄ tbody ‚îÇ ‚îî‚îÄ‚îÄ tr ‚îÇ ‚îî‚îÄ‚îÄ td ‚îî‚îÄ‚îÄ tfoot ‚îî‚îÄ‚îÄ tr ‚îî‚îÄ‚îÄ td Intersection Observer API 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 const option = { root: null, rootMargin: &#39;0px&#39;, threshold: 0.]]></description>
</item><item>
    <title>Go overview üèó</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/go/</link>
    <pubDate>Sun, 21 Jun 2020 00:25:10 -0400</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/go/</guid>
    <description><![CDATA[Download Go to this link
workspace Run go env in terminal. The variable GOPATH is the default workspace path. Project should under this folder.
In this workspace, file should structured as how you route your project:
1 2 3 4 5 6 7 . ‚îú‚îÄ‚îÄ bin ‚îú‚îÄ‚îÄ pkg ‚îî‚îÄ‚îÄ src ‚îî‚îÄ‚îÄ &lt;The home web page of version control&gt; ‚îî‚îÄ‚îÄ &lt;User name&gt; ‚îî‚îÄ‚îÄ &lt;Project name&gt; Example:
1 2 3 4 5 6 7 8 .]]></description>
</item><item>
    <title>Git overview</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/</link>
    <pubDate>Wed, 17 Jun 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/</guid>
    <description><![CDATA[Here have some good pictures that is helpful for understanding git and contain the record for git commend
Concept Map Here is a concept map given by Udacity.com. This picture shows the relationship between these basic git concept.
Git Data Transport Map Git have four working zones. This map shows that using which commend to shift your code from one zone to another.
This photo is provide by osteele
Git commend and usage Initialize the git repository git init]]></description>
</item></channel>
</rss>
