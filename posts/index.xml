<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on TyrangYang_Blog</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/posts/</link>
    <description>Recent content in Posts on TyrangYang_Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 18 Apr 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://tyrangyang.github.io/TyrangYang_blog/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>chmod Overview</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/chmod/</link>
      <pubDate>Sat, 18 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/chmod/</guid>
      <description>chmod is linux command to control file permission
usage chmod [u|g|o|a][=|+|-] [r|w|x] 
u =&amp;gt; user
g =&amp;gt; group
o =&amp;gt; other
a =&amp;gt; all
r =&amp;gt; read
w =&amp;gt; write
x =&amp;gt; execute
example chmod +wr test.txt give write and read permission for user
chmod -r test.txt remove read permission for user
chmod g=wrx test.txt give write, read and execute permission for group
use number specific the bits 011101110111 =&amp;gt; -rwx-rwx-rwx</description>
    </item>
    
    <item>
      <title>SocketIo Overview</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/socketio/</link>
      <pubDate>Sat, 18 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/socketio/</guid>
      <description>socket.io enable realtime, bidirectional communication for Nodejs
backend We use Express as backend framework.
1 2 3 4 5 6 7 8 9 10 11 12  const express = require(&amp;#39;express&amp;#39;); const path = require(&amp;#39;path&amp;#39;); const http = require(&amp;#39;http&amp;#39;); const socket_io = require(&amp;#39;socket.io&amp;#39;); const app = express(); const server = http.createServer(app); const io = socket_io(server); io.on(&amp;#39;connection&amp;#39;, (server_socket) =&amp;gt; { // ... }   frontend  bring client side socket.io in your html file  1  &amp;lt;script src=&amp;#34;/socket.</description>
    </item>
    
    <item>
      <title>SSH Overview</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/ssh/</link>
      <pubDate>Sat, 18 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/ssh/</guid>
      <description>ssh-keygen ssh-keygen
-b specific the number of bits(1024 2048 4069)
-m specific type
-y get public key
-f specific file name
public key public key should give to server. Usually put in file ~/.ssh/authorized_key
access via SSH ssh &amp;lt;username&amp;gt;@&amp;lt;hostname | ip address&amp;gt;</description>
    </item>
    
    <item>
      <title>Heroku overview</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/heroku/</link>
      <pubDate>Wed, 15 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/heroku/</guid>
      <description>Heroku can help us deploy our application(back end) rapidly and easy
deploy The only we need to take care is the PORT of your app. You have to use the PORT in environment.
In Node.js
1  PORT = process.env.PORT || 3000; // 3000 can be anything else   heroku cli Home page heroku login
heroku create
git push heroku master</description>
    </item>
    
    <item>
      <title>Canvas in html5</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/canvas/</link>
      <pubDate>Wed, 08 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/canvas/</guid>
      <description>Canvas is a new feature since html5 that allows you draw something on your web page
Reference from MDN Draw on canvas Get start Jquery to get canvas. ctx mean canvas content which used to draw on canvas
1 2  const canvas = document.getElementById(&amp;#39;canvas&amp;#39;); const ctx = canvas.getContext(&amp;#39;2d&amp;#39;);   fill &amp;amp; stroke rectangle 1 2 3 4 5 6 7 8  // fillRect() ctx.fillStyle = &amp;#39;red&amp;#39;; ctx.fillRect(20, 20, 150, 100); // up left point and weight and height  // strokeRect() ctx.</description>
    </item>
    
    <item>
      <title>All array method in Nodejs</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-nodejs/</link>
      <pubDate>Mon, 06 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-nodejs/</guid>
      <description>All methods  foreach  map  filter  reduce  slice  splice  sort  concat  fill  include  join  reverse  push  pop  unshift  shift  indexOf &amp;amp; lastIndexOf  every  some  find  findIndex  from  isArray  flat     All methods foreach 1 2 3 4 5 6 7 8 9 10  let numbers = [1, 2, 3, 4, 5]; // each element in a func numbers.</description>
    </item>
    
    <item>
      <title>Express Overview</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/express/</link>
      <pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/express/</guid>
      <description>Express.js is a web framework for Node.js
Example 1 2 3 4 5 6 7 8 9 10 11 12 13 14  const express = require(&amp;#39;express&amp;#39;); const app = express(); app.use(...); // get and post or middle ware  app.get(&amp;#39;/&amp;#39;, (req, res) =&amp;gt; { return res.send({hello:&amp;#34;world&amp;#34;}); }) const PORT = 4000; app.listen(PORT, ()=&amp;gt; { console.log(`Server is ready on http://localhost:${PORT}`); })   </description>
    </item>
    
    <item>
      <title>How to demonstrate your front end application on Github by gh-page</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/gh-pages/</link>
      <pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/gh-pages/</guid>
      <description>Github provide a tech called github pages that can hosted your project directly from repository. Basely push you project into gh-pages branch and the index.html will show on the page which is {&amp;lt;github username&amp;gt;.github.io}/{&amp;lt;repository name&amp;gt;}
gh-pages gh-pages provide by Tim Schaub is a npm package that can help you push something directly into gh-page branch
Read more detail in repository command line usage This package also provide a command line tool:</description>
    </item>
    
    <item>
      <title>CSS Overview</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/css/</link>
      <pubDate>Tue, 17 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/css/</guid>
      <description>Font font-size size
font-family: &amp;lt;FAMILY_NAME&amp;gt;, &amp;lt;GENERIC_NAME&amp;gt;; font-family: Lobster monospace;
GENERIC_NAME: sans-serif serif monospace;
sans-serif force on connected and serif force on single alphabet.
line-height: 25px;
Import font Could use google font and add link into index.html
Control space There are three important properties to control the space: padding, margin and border
Border border-size
border-color
border-width
border-style
padding Padding control the amount of space between the element&amp;rsquo;s content and its border;</description>
    </item>
    
    <item>
      <title>Basic Terminal command</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/basic-terminal-command/</link>
      <pubDate>Mon, 16 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/basic-terminal-command/</guid>
      <description>Basic cd route
ls list
pwd show current path
cat concatenate and print file (usually as read file)
touch change file access and modification time; (usually as create file)
Routing cd &amp;lt;directory&amp;gt;
cd . current
cd .. last
cd ~ home
cd / root
List ls
ls -a list all included hiding file
ls -l list detail
Move &amp;amp; Copy cp &amp;lt;name1&amp;gt; &amp;lt;name2&amp;gt; copy
mv &amp;lt;name1&amp;gt; &amp;lt;name2&amp;gt; rename
 move one file within this directory to another name.</description>
    </item>
    
    <item>
      <title>How to check the Chinese ID is correct</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/check-digit-id/</link>
      <pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/check-digit-id/</guid>
      <description>This check method will help you find out whether one digit is wrong or 2 adjacent digit are in reverse order.
Sample code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62  checkChineseId = (id) =&amp;gt; { const ID_LENGTH = 18; // check type  if (typeof id !</description>
    </item>
    
    <item>
      <title>Structured binding</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/structured-binding/</link>
      <pubDate>Sun, 01 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/structured-binding/</guid>
      <description>Structured binding is a new feature since c++17
cppreference.com auto [ identifier-list ] = expression
Bind array 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  int main(int argc, char const *argv[]) { int test[3] = {1, 2, 3}; auto [a, b, c] = test; // an new array e copy from test and a = e[0]; b = e[1]; c = e[2]; 	auto &amp;amp;[x, y, z] = test; // x = test[0]; x = test[1]; x = test[2]  cout &amp;lt;&amp;lt; ++a &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; ++b &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; ++c &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; endl; for (int &amp;amp;i : test) cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#34; &amp;#34;; cout &amp;lt;&amp;lt; endl; cout &amp;lt;&amp;lt; ++x &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; ++y &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; ++z &amp;lt;&amp;lt; &amp;#34; &amp;#34; &amp;lt;&amp;lt; endl; for (int &amp;amp;i : test) cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;#34; &amp;#34;; cout &amp;lt;&amp;lt; endl; return 0; }   tuple 1 2 3 4 5 6 7 8 9 10 11 12  int main(int argc, char const *argv[]) { tuple&amp;lt;int, int, int&amp;gt; test(1, 2, 3); auto &amp;amp;[a, b, c] = test; // 1 2 3  pair&amp;lt;int, char&amp;gt; test2(1, &amp;#39;c&amp;#39;); auto &amp;amp;[a2, b2] = test2; // 1 c  return 0; }   struct 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  struct test { int a; int b; }; int main(int argc, char const *argv[]) { test one; one.</description>
    </item>
    
    <item>
      <title>Traverse a tree</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/traverse-a-tree/</link>
      <pubDate>Mon, 10 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/traverse-a-tree/</guid>
      <description>Idea to traverse a tree
Tree structure The tree structure:
1 2 3 4 5 6  struct TreeNode { int val; TreeNode *left; TreeNode *right; TreeNode(int x) : val(x), left(NULL), right(NULL) {} };   BFS DFS Pre-order In-order Post-order Relationship:
Iterative Loop for BFS:
1 2 3 4 5 6 7 8 9 10 11  void BFS(TreeNode *root){ stack&amp;lt;TreeNode *&amp;gt; q; q.push(root); while(!q.empty()){ TreeNode *temp = q.front(); q.</description>
    </item>
    
    <item>
      <title>How to find next permutation</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/next-permutation/</link>
      <pubDate>Wed, 05 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/next-permutation/</guid>
      <description>This is introduce how to find the next lexicographically permutation.
Suppose the permutation is 1 2 3. The next one is 1 3 2.
Algorithm in C++ C++ provide an algorithm called next_permutation to support that. Reference Example:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  #include &amp;lt;iostream&amp;gt; // std::cout#include &amp;lt;algorithm&amp;gt; // std::next_permutation, std::sort int main () { int myints[] = {1,2,3}; std::sort (myints,myints+3); std::cout &amp;lt;&amp;lt; &amp;#34;The 3!</description>
    </item>
    
    <item>
      <title>Learn from leetCode</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/leetcode-idea/</link>
      <pubDate>Fri, 31 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/leetcode-idea/</guid>
      <description>Some strategy learning from leetCode
C++ 2d array Better use a vector(don&amp;rsquo;t need to consider allocator)
1 2 3 4  int row = 10; int col = 10; int init = 1; vector&amp;lt;vector &amp;lt;int&amp;gt;&amp;gt; memos(row, vector&amp;lt;int&amp;gt;(col, init)) // init can ignore   1 2 3 4 5  int** a = new int*[rowCount]; for(int i = 0; i &amp;lt; rowCount; ++i) a[i] = new int[colCount]; delete ...   Traverse a tree The tree structure:</description>
    </item>
    
    <item>
      <title>Lambda in C&#43;&#43;</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/lambda-cpp/</link>
      <pubDate>Sun, 26 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/lambda-cpp/</guid>
      <description>Introduction of Lambda expression in C++ and how to use it.
What is Lambda in C++ Lambda expression is a new feature since c++11. It is used to create anonymous function object to simplify programming process.
How Lambda expressions are composed [capture](parameters) mutable -&amp;gt; return type {statement}
1 2 3 4  // ... #include &amp;lt;functional&amp;gt;// ... std:function&amp;lt;int(int, int)&amp;gt; add = [](int a, int b) -&amp;gt; int {return a+b;};   capture Capture variables from context.</description>
    </item>
    
    <item>
      <title>Crontab overview</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/crontab/</link>
      <pubDate>Thu, 23 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/crontab/</guid>
      <description>What is crontab Crontab is a toll to schedule commands. You can run your terminal command on a specific schedule like run a command every day or every weekends.
Basic command crontab [-u user] {-l | -e | -r}
   command utility     -l list your cron job   -r remove your cron job   -e edit your cron job   -u specific a user    How to schedule a command Cron job looks like:</description>
    </item>
    
    <item>
      <title>DFS &amp; BFS</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/dfs-bfs/</link>
      <pubDate>Tue, 14 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/dfs-bfs/</guid>
      <description>DFS &amp;amp; BFS are two basic algorithms to traverse a graph(or a tree). DFS is Deep-first search and BFS is Breath-first search.
Basic idea The idea behind two algorithms are identical but use different auxiliary data structure. DFS use stack and BFS use Queue.
First, Every node have a mark to identify is already be visited or not(it could be a list or an attribute in node).
Second, Push the start point into the auxiliary data structure and loop until structure is empty.</description>
    </item>
    
    <item>
      <title>Miller Rabin Algorithm</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/miller-rabin/</link>
      <pubDate>Mon, 13 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/miller-rabin/</guid>
      <description>What is millerRabin algorithm The Miller–Rabin primality test or Rabin–Miller primality test is a primality test: an algorithm which determines whether a given number is prime, similar to the Fermat primality test and the Solovay–Strassen primality test. It was first discovered by Russian mathematician M. M. Artjuhov in 1967.[1] Gary L. Miller rediscovered it in 1976; Miller&amp;rsquo;s version of the test is deterministic, but its correctness relies on the unproven extended Riemann hypothesis.</description>
    </item>
    
    <item>
      <title>Makefile overview</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/makefile-overview/</link>
      <pubDate>Sun, 12 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/makefile-overview/</guid>
      <description>What is makefile. How to write a makefile.
Ref: https://opensource.com/article/18/8/what-how-makefile What is makefile A makefile is a file containing a set of directives used by a make build automation tool to generate a target/goal.
You may have used make to compile a program from source code.
How to write makefile To summarize, below is the syntax of a typical rule:
1 2  target: prerequisites &amp;lt;TAB&amp;gt; recipe   As an example, a target might be a binary file that depends on prerequisites (source files).</description>
    </item>
    
    <item>
      <title>Safari Shortcut</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/safari-shotcut/</link>
      <pubDate>Fri, 10 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/safari-shotcut/</guid>
      <description>Some keyboards shortcuts when using safari
Navigating Webpages Use arrow keys to go up and down.
Use Option+up/down or Shift+Space / Space to scroll quickly.
Use Command+up/down goto the top &amp;amp; button.
Open Pages in Tabs Use Command+T to open a new Tab.
Use Shift+Command+Left/right arrow or Control+Tab / Control+Shift+Tab to move from tab to tab.
Use Command+W to close current tab.
Use Command+Z to reopen a closed tab.
Use Command+Option+W to close all tabs expect current tab.</description>
    </item>
    
    <item>
      <title>My Zsh setting</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/my-zsh-setting/</link>
      <pubDate>Wed, 08 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/my-zsh-setting/</guid>
      <description>Zsh &amp;amp; Bash Since MacOs 10.15(Catalina). The default shell switch from bash to zsh. It is hard to say which one is better however Zsh has been used more widely than bash especially from Linux user.
Zsh The Z shell (also known as zsh) is a Unix shell that is built on top of bash (the default shell for macOS (Before MacOs Catalina)) with additional features. It&amp;rsquo;s recommended to use zsh over bash.</description>
    </item>
    
    <item>
      <title>Erlang overview</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/erlang/</link>
      <pubDate>Sat, 14 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/erlang/</guid>
      <description>Basic Documentation: https://erlang.org/doc/search/ Functional language Erlang is a functional language. Code need compile and running line by line.
Every line need finish by a .. like: A = 1..
Module Every erlang file will consider as a module. You console will compile all module you want.
You have to add -module(&amp;lt;filename&amp;gt;). into first line. Module should be same with filename without suffix.
In erl console, run c(&amp;lt;filename&amp;gt;). to compile it. Run a function is like: &amp;lt;moduleName&amp;gt;: &amp;lt;functionName&amp;gt;(.</description>
    </item>
    
    <item>
      <title>SSH in Vscode</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/ssh-vscode/</link>
      <pubDate>Fri, 13 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/ssh-vscode/</guid>
      <description>Extension Reference https://letswp.io/remote-development-visual-studio-code-amazon-ec2/</description>
    </item>
    
    <item>
      <title>Z-shell overview</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/zshell-overview/</link>
      <pubDate>Thu, 12 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/zshell-overview/</guid>
      <description>Reference Very useful blog:
http://stevelosh.com/blog/2010/02/my-extravagant-zsh-prompt/#username-and-hostname http://zsh.sourceforge.net/Intro/intro_12.html#SEC12 Variable    name usage     %m Hostname   %n Username   %d Directory from /   %~ Directory from ~   %t time (12)   %T time (24)    %d and %~ can add a number to specify how many previous path will show. Like %1~
Guide to zsh Here is the link to A User&amp;rsquo;s Guide to the Z-Shell single quotes &amp;amp; double quotes 1 2  RPROMPT=&amp;#34;$(command)&amp;#34; # this will run command, then set RPROMPT to the result RPROMPT=&amp;#39;$(command)&amp;#39; # this will set RPROMPT to run command each time it is printed   Date man Date</description>
    </item>
    
    <item>
      <title>Callback, Promise and Async/await in js</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/callback-promise-async/</link>
      <pubDate>Sun, 17 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/callback-promise-async/</guid>
      <description>Synchronous &amp;amp; asynchronous Function run synchronously means code is running as same as your writing.
But in real situation, some code may need time to running but you don&amp;rsquo;t want all code is block. Therefore, you may need some technique to let this part running asynchronously which means this part of code is block and the rest of code is not.
But things going ridiculous. Sometimes, the all code need to be async so that make sure is running synchronously.</description>
    </item>
    
    <item>
      <title>What is &#34;this&#34; in javascript</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/what-is-this-in-js/</link>
      <pubDate>Sun, 17 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/what-is-this-in-js/</guid>
      <description>author: Dmitri Pavlutin
reference: https://dmitripavlutin.com/gentle-explanation-of-this-in-javascript/ Concept  Invocation of a function is executing the code that makes the body of a function, or simply calling the function. For example parseInt function invocation is parseInt(&#39;15&#39;). Context of an invocation is the value of this within function body. For example the invocation of map.set(&#39;key&#39;, &#39;value&#39;) has the context map. Scope of a function is the set of variables, objects, functions accessible within a function body.</description>
    </item>
    
    <item>
      <title>How to have a dynamic class name</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/how-to-have-dynamic-classname/</link>
      <pubDate>Fri, 15 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/how-to-have-dynamic-classname/</guid>
      <description>In same case, you may want to have a different style depend on your state or a variable. Now we can have two ways to achieve that.
classNames This is a javascript for conditionally joining classNames.
Here is: Github Basically, you can combine any number of classNames.
1 2  const classNames = require(&amp;#39;classNames&amp;#39;); classNames(&amp;#39;foo&amp;#39;, { bar: true, duck: false }, &amp;#39;baz&amp;#39;, { quux: true }); // =&amp;gt; &amp;#39;foo bar baz quux&amp;#39;   ES6 template literals You can just use template literals.</description>
    </item>
    
    <item>
      <title>A simple application apollo server and react</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/spacex/</link>
      <pubDate>Thu, 14 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/spacex/</guid>
      <description>graphql Design Graphql is base on what your want
github https://github.com/TyrangYang/SpaceX_graphql_react </description>
    </item>
    
    <item>
      <title>VSCode shortCut</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/vscode-shortcut/</link>
      <pubDate>Fri, 01 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/vscode-shortcut/</guid>
      <description>Vscode page for shortcut Short cut Source from Traversy Media
YouTube Channel YouTube Github  </description>
    </item>
    
    <item>
      <title>Concurrent Programming Course note 5</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-5/</link>
      <pubDate>Thu, 31 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-5/</guid>
      <description>Message passing 1 2 3 4 5 6 7  echo() -&amp;gt; receive {From, Msg} -&amp;gt; From ! {Msg}, echo(); %^pattern^ %^response^ %^keep loop  stop -&amp;gt; true %^pattern^ ^a return value and stop receiving  end.   </description>
    </item>
    
    <item>
      <title>Why Can’t I Open My React App By Clicking Index.html?</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/open-react-app-by-index/</link>
      <pubDate>Mon, 28 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/open-react-app-by-index/</guid>
      <description>The app should Run when you open up your index.html file The conclusion is add &amp;quot;homepage&amp;quot;:&amp;quot;.&amp;quot;, in package.json.
medium.com/@louis.raymond Still not work when you have client side router If you are routing client side, index.html may still not work. In this case, you may using BrowserRouter. Change it to HashRouter.
Click: Different between them </description>
    </item>
    
    <item>
      <title>Redis overview</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/redis/</link>
      <pubDate>Tue, 15 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/redis/</guid>
      <description>Installation For mac
1  sudo brew install redis-server   open redis server
1  redis-server   test is work or not
1  redis-cli ping   basic command 1 2 3  ECHO &amp;#39;hello word QUIT   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144  SET foo 100 GET foo // 100 SET bar &amp;#39;hello world&amp;#39; GET bar // hello world INCR foo // 101 DECR foo // 100 EXISTS foo // 1 EXISTS foo1 // 0 DEL bar EXISTS bar // 0 GET bar //(nir) FLUSHALL // all empty SET server:name someserver GET server:name // &amp;#34;someserver&amp;#34; SET server:port 8000 GET server:port SET greeting &amp;#34;Hello world&amp;#34; GET greeting EXPIRE greeting 50 // set expirations to 50 second TTL greeting SETEX greeting 30 &amp;#34;hello world&amp;#34; // set value and expiration PERSIST greeting // key will not expire TTL greeting // -1 MSET key1 &amp;#34;hello&amp;#34; key2 &amp;#34;world&amp;#34; APPEND key1 &amp;#34; world&amp;#34; RENAME key1 greeting LPUSH people &amp;#34;Brad&amp;#34; // 1 LPUSH people &amp;#34;Jen&amp;#34; // 2 LPUSH people &amp;#34;Tom&amp;#34; // 3 LRANGE people 0 -1 // return all // Tom Jen Brad LRANGE people 1 2 // Jen Brad RPUSH people &amp;#34;Harry&amp;#34; LRANGE people 0 -1 // Tom Jen Brad Harry LLEN people // 4 RPOP people // Harry LPOP people LINSERT people BEFORE &amp;#34;Brad&amp;#34; &amp;#34;TOM&amp;#34; LRANGE people 0 -1 // Jen Tom Brad SADD cars &amp;#34;Ford&amp;#34; SADD cars &amp;#34;Honda&amp;#34; SADD cars &amp;#34;BMW&amp;#34; SISMEMBER cars &amp;#34;Ford&amp;#34; // 1 SISMEMBER cars &amp;#34;Chevy&amp;#34; // 0 SMEMBER cars // Honda BMW Ford SCARD cars // 3 SMOVE cars mycars &amp;#34;Ford&amp;#34; SMEMBER cars // Honda BMW SMEMBER mycars // Ford SRAM cars &amp;#34;BMW&amp;#34; SMEMBER cars // Honda ZADD users 1980 &amp;#34;Brad&amp;#34; ZADD users 1975 &amp;#34;Jen&amp;#34; ZADD users 1990 &amp;#34;Mike&amp;#34; ZADD users 1990 &amp;#34;Kate&amp;#34; ZRANK users &amp;#34;Mike&amp;#34; // 3 ZRANK users &amp;#34;Jen&amp;#34; // 0 ZRANK users &amp;#34;Brad&amp;#34; // 1 ZRANGE users 0 -1 // Jen Brad Kate Mike ZINCRBY users 1 &amp;#34;Jen&amp;#34; // 1976 HSET user:brad name &amp;#34;Brad&amp;#34; HSET user:brad email &amp;#34;brad@gmail.</description>
    </item>
    
    <item>
      <title>Some cool websites</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/cool-website/</link>
      <pubDate>Sat, 12 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/cool-website/</guid>
      <description>Development setting up for Mac This guide covers the basics of setting up a development environment on a new Mac.
https://sourabhbajaj.com/mac-setup/ shapeCatcher Draw a character and find the ASCII code
http://shapecatcher.com/index.html draw.io Draw diagram online
https://www.draw.io regular expression Good online tool to test and learn regular expression
https://regexr.com 100 front end component design 100 react component design challenge
https://www.florin-pop.com/blog/2019/09/100-days-100-projects/ bootswatch Several bootstrap scheme.
https://bootswatch.com shields.io Get or create Readme badge</description>
    </item>
    
    <item>
      <title>React overview</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/react/</link>
      <pubDate>Thu, 03 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/react/</guid>
      <description>init react Commend
1  npx create-react-app .   npx means you use this package but don&amp;rsquo;t download it.
Structure package.json react &amp;amp; react-dom is necessary for web app. For mobile app need react-native instead of react-dom.
public/index.html signal page application which is index.html
Everything your do will inside &amp;lt;div id=&amp;quot;root&amp;rdquo;&amp;gt;&amp;lt;/div&amp;gt;
src/index.js Entry point for react
src/App.js All the component.
Inside the class, the render() method is called life cycle method and to render the page.</description>
    </item>
    
    <item>
      <title>Concurrent Programming Course note 4</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-4/</link>
      <pubDate>Wed, 25 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-4/</guid>
      <description>Monitor signal condition &amp;ndash;&amp;gt; waiting monitor &amp;ndash;&amp;gt; signaling
producer and consumer with a buffer whose size is one 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  monitor PC { Object buffer; void produce(Object o){ if(buffer != null){ // while  empty.wait(); } buffer = o; full.signal(); } Object consume() { if(buffer == null) // while  full.</description>
    </item>
    
    <item>
      <title>All algorithm in C&#43;&#43;</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/</link>
      <pubDate>Fri, 20 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/all-algorithm/</guid>
      <description>Content  Content  Algorithm Overview  Copy  For each  Generation  Heap  Merge  Move  Number  Partition  Permutation  Remove  Replace  Reverse  rotate  Search  Set  Shuffle  Sort  Swap  Test range  Unique   Algorithm Overview * &amp;ndash;&amp;gt; new feature from C++11
   Algorithm Name Usage Mutating? Head File Complexity     accumulate  Accumulate values in range N numeric O(n)   adjacent_difference  Compute adjacent difference of range and return to another place N numeric O(n)   adjacent_find  Find first equal adjacent elements in range N algorithm O(n)   all_of*  Test condition on all elements in range N algorithm O(n)   any_of*  Test if any element in range fulfills condition N algorithm O(n)   binary_search  Test if value exists in sorted sequence N algorithm On average O(logn + 2).</description>
    </item>
    
    <item>
      <title>SASS (SCSS) features</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/sass/</link>
      <pubDate>Wed, 18 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/sass/</guid>
      <description>SCSS features  Variables  Operator  String interpolation  Nesting  The parent selector  Imports  Nested Media Queries  General control  Mixins  Functions  Extending  Placeholders     SCSS features Variables 1 2 3 4 5 6 7  $font-stack: Helvetica, sans-serif; $primary-color: #333; body { font: 100% $font-stack; color: $primary-color; }   Operator 1 2 3 4 5 6 7 8 9 10 11 12 13  .</description>
    </item>
    
    <item>
      <title>Concurrent Programming Course note 3</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-3/</link>
      <pubDate>Mon, 16 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-3/</guid>
      <description>Semaphore Initialize how many permissions you will use.
acquire() will add one permission.
release() will remove one permission.
Permission must ≥ 0.
Semaphore solution for the MEP  #criticalSection + permissions = 1 #criticalSection = #acquires − #releases  Mutual exclusion: #criticalSection ≤ 1 since #permission ≥ 0. Absence of deadlock: It never happens that #permission = 0 and #criticalSection = 0
Java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  public class Turnstile extends Thread { static volatile int counter = 0; // keyword is recommended for variables that are shared  static Semaphore mutex = new Semaphore (1); public void run() { for(int i = 0; i &amp;lt; 50; i++){ mutex.</description>
    </item>
    
    <item>
      <title>Concurrent Programming Course note 2</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-2/</link>
      <pubDate>Wed, 04 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-2/</guid>
      <description>Race condition Multiple thread access one same variables of object concurrently and at least one does update.
Bad situation.
Atomic operation An operation is atomic if it execute until it completion without interruption
Critical section A part of program that accesses shared memory and which we which to execute automatically.
mutual exclusion problem (MEP)  Mutex: at and point in time, there is at most one thread in the critical section Absence of livelock: If various of threads try to entry the critical section, at lease one of them will succeed.</description>
    </item>
    
    <item>
      <title>Software Development Course note</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/software-development-1/</link>
      <pubDate>Tue, 03 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/software-development-1/</guid>
      <description>Agile Vs Traditional SDLC Models Agile is based on the adaptive software development methods, whereas the traditional SDLC models like the waterfall model is based on a predictive approach. Predictive teams in the traditional SDLC models usually work with detailed planning and have a complete forecast of the exact tasks and features to be delivered in the next few months or during the product life cycle.
Predictive methods entirely depend on the requirement analysis and planning done in the beginning of cycle.</description>
    </item>
    
    <item>
      <title>Web development review</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/web-develop-review/</link>
      <pubDate>Thu, 29 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/web-develop-review/</guid>
      <description>MathJax.Hub.Config({ jax: [&#34;input/TeX&#34;, &#34;output/HTML-CSS&#34;], tex2jax: { inlineMath: [ [&#39;$&#39;, &#39;$&#39;] ], displayMath: [ [&#39;$$&#39;, &#39;$$&#39;]], processEscapes: true, skipTags: [&#39;script&#39;, &#39;noscript&#39;, &#39;style&#39;, &#39;textarea&#39;, &#39;pre&#39;, &#39;code&#39;] }, messageStyle: &#34;none&#34;, &#34;HTML-CSS&#34;: { preferredFont: &#34;TeX&#34;, availableFonts: [&#34;STIX&#34;,&#34;TeX&#34;] } });   Document constructor $$f(x) = sin(x)$$</description>
    </item>
    
    <item>
      <title>Concurrent Programming Course note 1</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-1/</link>
      <pubDate>Wed, 28 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/concurrent-programming-1/</guid>
      <description>What is concurrency Systems of interacting computer programs which share resource and run concurrently.
parallelism and concurrency Parallelism: Occurring physically at the same time.
Concurrency: Occurring logically at the same time.
synchronization Process synchronization: Ensure the instructions are executed in certain order.
Synchronization is irrelevant if processes do not interact with each other.
Concurrency, and hence process synchronized, is useful only when processes interact with each other.
interaction Share memory is kind of interact.</description>
    </item>
    
    <item>
      <title>Algorithm feature in c&#43;&#43; STL</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/algorithm-feature/</link>
      <pubDate>Sun, 25 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/algorithm-feature/</guid>
      <description>See all algorithm click here  Mutating and Non-mutating algorithms Mutating algorithms Mutating algorithms means this algorithm will change the content that iterator pointed to. Like copy, swap, replace, fill, remove, permutation, partition, random shuffling and sort.
If your give these algorithms a const iterator, only error will be returned.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  #include &amp;lt;iostream&amp;gt;#include &amp;lt;vector&amp;gt;using namespace std; int main(int argc, char const *argv[]) { std::vector&amp;lt;int&amp;gt; iv = {22,30,30,17,33,40,17,23,22,12,20}; vector&amp;lt;int&amp;gt;::iterator ib = iv.</description>
    </item>
    
    <item>
      <title>Bit operation in C&#43;&#43;</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/c-bit-operation/</link>
      <pubDate>Sun, 18 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/c-bit-operation/</guid>
      <description>Bit operator    operator function example     &amp;laquo; left shift 0001 &amp;ndash;&amp;gt; 0010   &amp;raquo; right shift 0010 &amp;ndash;&amp;gt; 0001   &amp;amp; and (bit by bit) 1100 &amp;amp; 1010 = 1000   | or (bit by bit) 1010 | 0101 = 1111   ~ reverse ~0000 = 1111   ^ XOR 0110 ^ 1100 = 1010    Operator: &amp;amp; x is a bit</description>
    </item>
    
    <item>
      <title>RB tree</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/rb-tree/</link>
      <pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/rb-tree/</guid>
      <description>2-3 tree &amp;amp; 2-4 tree 2-node: 1 key and 2 children 3-node: 2 keys and 3 children 4-node: 3 keys and 4 children
A (2,4) tree (also called 2-4 tree or 2-3-4 tree) is a multi-way search with the following properties:
 Node-Size Property: every internal node has at most four children Depth Property: all the external nodes have the same depth  insertion deletion 2-4 tree ==&amp;gt; RB tree If break down 3-node and 4-node, 2-4 tree will become RB tree.</description>
    </item>
    
    <item>
      <title>Operator overwrite in c&#43;&#43;</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/operator-overwrite/</link>
      <pubDate>Tue, 13 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/operator-overwrite/</guid>
      <description>Example increment and decrement operator
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72  #include &amp;lt;iostream&amp;gt;using namespace std; class INT { private: int m_i; public: INT(int i):m_i(i){}; friend bool operator==(INT&amp;amp; test1, INT&amp;amp; test2){ return test1.</description>
    </item>
    
    <item>
      <title>Container in c&#43;&#43;</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/containers/</link>
      <pubDate>Wed, 31 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/containers/</guid>
      <description>Classification  Sequence container  array (build in) vector  heap  priority queue  list  slist (not standard) deque  stack (adopter) queue (adopter)   Associative container  RB-tree (not public) set  map  multiset multemap hashtable (not standard) hash_set (not standard) hash_map (not standard) hash_multimap (not standard) hash_multiset (not standard)    Associative container have a key-value pair. It do not have back and front so they never have push_back, pop_back.</description>
    </item>
    
    <item>
      <title>explicit and implicit in c&#43;&#43;</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/explicit-and-implicit/</link>
      <pubDate>Thu, 25 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/explicit-and-implicit/</guid>
      <description>explicit and implicit In C++, constructor can be explicit and implicit.
The reserve word explicit affect constructor with only one parameter or only one parameter without given initial value.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56  #include &amp;lt;iostream&amp;gt;using namespace std; class test1 { int data; public: test1(int t = 0):data(t){}; ~test1(){}; test1 operator + (const test1 &amp;amp;a) const{ return test1(data + a.</description>
    </item>
    
    <item>
      <title>Iterator in c&#43;&#43;</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/iterators/</link>
      <pubDate>Wed, 24 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/iterators/</guid>
      <description>Iterator 设计思维 STL 中 container 和 algorithm 是相对独立的，本身设计也是泛型化的。Iterator 就是用来将这两者联系在一起的。
Iterator 是一种 smart pointer 可以不用 delete
Iterator 属性 iterator_traits 是用来抽取 iterator 中的类型(特指 value type)的。
这是 iterator 中常见的五种属性。
1 2 3 4 5 6 7 8 9  template &amp;lt;class I&amp;gt; struct iterator_traits { typedef typename I::iterator_category iterator_category; //category  typedef typename I::value_type value_type; // type  typedef typename I::difference_type difference_type; //  typedef typename I::pointer pointer; // T*  typedef typename I::reference reference; // T&amp;amp; };   1 2 3 4 5 6 7 8 9 10 11 12 13 14  #include &amp;lt;iostream&amp;gt; // std::cout#include &amp;lt;iterator&amp;gt; // std::iterator_traits#include &amp;lt;typeinfo&amp;gt; // typeidusing namespace std; int main() { typedef std::iterator_traits&amp;lt;double*&amp;gt; traits; cout &amp;lt;&amp;lt; typeid(traits::iterator_category).</description>
    </item>
    
    <item>
      <title>Allocator in c&#43;&#43;</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/allocator/</link>
      <pubDate>Sun, 21 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/allocator/</guid>
      <description>Allocator is for memory 配置内存空间 -&amp;gt; 构建(constructor) -&amp;gt; 解构(destructor) -&amp;gt; 释放内存空间
construct() and destroy() 用于建构和解构
Memory allocate and release 双层配置器。第一级是区块大于 128 bytes 的，使用 malloc()和 free()。第二级是区块小于 128 bytes 的，使用 memory pool 和 freelist。
第一級配置器 第一級配置器以 malloc(), free(), realloc() 等 C 函式執行實際的記憶體配置、釋放、重配置動作，並實作出類似 C++ new-handler7 機制。是的，它不能直接運用 C++ new-handler 機制，因為它並非使用 ::operator new 來配置記 憶體。
所謂 C++ new handler 機制是，你可以要求系統在記憶體配置需求無法被滿足時， 喚起一個你所指定的函式。換句話說一旦 ::operator new 無法達成任務，在丟出 std::bad_alloc 異常狀態之前，會先呼叫由客端指定的處理常式。此處理常式 通常即被稱為 new-handler。new-handler 解決記憶體不足的作法有特定的模式。
注意，SGI 以 malloc 而非 ::operator new 來配置記憶體(我所能夠想像的一 個原因是歷史因素，另一個原因是 C++ 並未提供相應於 realloc() 的記憶體配 置動作)，因此 SGI 不能直接使用 C++ 的 set_new_handler()，必須模擬一個 類似的 set_malloc_handler()。</description>
    </item>
    
    <item>
      <title>Functor in C&#43;&#43;</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/functor/</link>
      <pubDate>Sat, 20 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/functor/</guid>
      <description>Basically, Functor have same functionality with interface in java.
Think about this code. You want count all string whose length is less than 5.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  #include &amp;lt;iostream&amp;gt;#include &amp;lt;algorithm&amp;gt;#include &amp;lt;vector&amp;gt;#include &amp;lt;string&amp;gt;using namespace std; bool lenLessThanFive(const string&amp;amp; str){ return str.size() &amp;lt; 5; } int main(int argc, char const *argv[]) { string ia[5] = {&amp;#34;a&amp;#34;, &amp;#34;aa&amp;#34;, &amp;#34;aaa&amp;#34;, &amp;#34;aaaa&amp;#34;, &amp;#34;aaaaa&amp;#34;}; vector&amp;lt;string&amp;gt; iv(ia, ia+5); int res = count_if(iv.</description>
    </item>
    
    <item>
      <title>Common method comparison - c&#43;&#43; &amp; java</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/language-comparison-common-method/</link>
      <pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/language-comparison-common-method/</guid>
      <description>Sort C++ For c++, here is official document sort() This method sorts elements in the range [first, last).
Result is in ascending order by deflaut.
Introsort.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  // sort algorithm example #include &amp;lt;iostream&amp;gt; // std::cout#include &amp;lt;algorithm&amp;gt; // std::sort#include &amp;lt;vector&amp;gt; // std::vector bool myfunction (int i,int j) { return (i&amp;gt;j); } int main () { int myints[] = {32,71,12,45,26,80,53,33}; std::vector&amp;lt;int&amp;gt; myvector (myints, myints+8); // 32 71 12 45 26 80 53 33  // using default comparison (operator &amp;lt;):  std::sort (myvector.</description>
    </item>
    
    <item>
      <title>Container comparison - c&#43;&#43; &amp; java</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/language-comparison-containor/</link>
      <pubDate>Thu, 11 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/language-comparison-containor/</guid>
      <description>Container comparison C++ version is c++11. Java version is java se8.
   C++ JAVA Description     array / [ ] [ ] 固定大小的数组   vector ArrayList 可变长度的数组    Vector 可变长度的数组，支持同步操作，效率比 ArrayList 略差   list LinkedList 双链表，便于增删   forward_list  单链表，c++没有给他提供 size()的方法   deque ArrayDeque 双向队列   stack Stack 栈，先进后出   queue Queue 队，先进先出   priority_queue PriorityQueue 支持优先级的队列   set TreeSet 集合，数据有序，红黑树   unordered_set HashSet 集合，数据无序，hash   map TreeMap key-value 映射，key 有序，红黑树   unordered_map HashMap map, 无序，hash   multiset  集合，允许重复元素   multimap  map，允许重复的 key   unordered_multiset  无序允许重复元素集合   unordered_multimap  无序允许重复 key 的 map    LinkedHashSet 按照插入顺序，支持 hash 查找    LinkedHashMap 按照插入顺序，支持 hash 查找    HashTable 类似 HashMap，效率略低   bitset BitSet 位操作    HashTable &amp;amp; HashMap The HashMap class is roughly equivalent to Hashtable, except that it is asynchronized and permits nulls.</description>
    </item>
    
    <item>
      <title>Review java - Array</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/java-review-array/</link>
      <pubDate>Wed, 10 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/java-review-array/</guid>
      <description>Declaring an array Both are allow
1 2  string argc[]; string[] argc;   Int array 1 2  int[] nums = new int[7]; nums[0] = 10;   1 2  Rabbit[] racers = new Rabbit[10];//10 empty rabbit array; racers[0] = new Rabbit(&amp;#34;B&amp;#34;,&amp;#34;F&amp;#34;);   arraycopy() 1  System.arraycopy(nums, 0, nums, 0, nums.length);   Array vs ArrayList  An array needs to know its size at the time of creation, arrayList does not.</description>
    </item>
    
    <item>
      <title>Review java - javadoc</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/java-review-javadoc/</link>
      <pubDate>Tue, 09 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/java-review-javadoc/</guid>
      <description>JavaDocs JavaDocs is able to easily generate a code &amp;ldquo;maintenance manual&amp;rdquo;
A doc comment is made up of two parts &amp;ndash; a description and two or more tag.
1 2 3 4 5  /** * Here is description * * @tag Comment for tag */   Tags  @author (classes and interfaces only, required) @version (classes and interfaces only, required) @param (methods and constructors only) @return (methods only) @exception @see @since @serial (or @serialField or @serialData) @deprecated  JDK Docs External documentation can be created with javadoc</description>
    </item>
    
    <item>
      <title>Review java - OO</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/java-review-oo/</link>
      <pubDate>Fri, 05 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/java-review-oo/</guid>
      <description>Class &amp;amp; Object A class only exists at compile time;
An object only exists at runtime.
Data Encapsulation Data Encapsulation/information hiding: where the internal state and operation are hidden from others.
The more information Class A knows about Class B, the greater the possibility that changing Class A will adversely affect Class B. In an ideal world, making internal changes to Class A should have no, or very little, effect on other classes.</description>
    </item>
    
    <item>
      <title>Review java - Variable</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/java-review-variable/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/java-review-variable/</guid>
      <description>Basic types Every type have a default value:
   Type Representation Initial value Storage Max. value     byte singed integer 0 8 bits 127   short singed integer 0 16 bits 32767   int singed integer 0 32 bits 2147483647   long singed integer 0 64 bits over 10^18   float floating point 0.0 32 bits over 10^38   double floating point 0.</description>
    </item>
    
    <item>
      <title>Git overview</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/</link>
      <pubDate>Mon, 17 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/gitlearningnote/</guid>
      <description>Here have some good pictures that is helpful for understanding git and contain the record for git commend
Concept Map Here is a concept map given by Udcity.com. This picture shows the relationship between these basic git concept.
Git Data Transport Map Git have four working zones. This map shows that using which commend to shift your code from one zone to another.
This photo is provide by osteele</description>
    </item>
    
    <item>
      <title>MarkDown overview</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/markdowntutorial/</link>
      <pubDate>Sun, 16 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/markdowntutorial/</guid>
      <description>This is learning note for MarkDown
Heading 1 or
Heading 1 Heading 2 or
Heading 2 Italic and bold italic or italic bold or bold italic and bold or italic and bold
Unordered list  line 1 line 2 line 3  sub 1 sub 2    or
 line 1 line 2 line 3  sub 1 sub 2    Ordered list  line 1 line 2  sub 1 sub 2   line 3  BlockQuotes Use &amp;lsquo;&amp;gt;&amp;rsquo; for a quotes</description>
    </item>
    
    <item>
      <title>Welcome to Jekyll!</title>
      <link>https://tyrangyang.github.io/TyrangYang_blog/welcome-to-jekyll/</link>
      <pubDate>Tue, 11 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://tyrangyang.github.io/TyrangYang_blog/welcome-to-jekyll/</guid>
      <description>You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.
To add new posts, simply add a file in the _posts directory that follows the convention YYYY-MM-DD-name-of-post.</description>
    </item>
    
  </channel>
</rss>