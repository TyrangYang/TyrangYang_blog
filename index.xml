<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>TyrangYang_Blog</title>
        <link>https://tyrangyang.github.io/TyrangYang_blog/</link>
        <description>TyrangYang_Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 10 Jul 2020 18:49:03 -0400</lastBuildDate>
            <atom:link href="https://tyrangyang.github.io/TyrangYang_blog/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>Dynamic Programming Example</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/dp-example/</link>
    <pubDate>Fri, 10 Jul 2020 18:49:03 -0400</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/dp-example/</guid>
    <description><![CDATA[Longest common subsequence This is a typical recursive problem. The pseudocode is:
1 2  If S1[i] == S2[j], lcs(S1[i:],S2[j:]) = 1 + lcs(S1[i+1:],S2[j+1:]) else lcs(S1[i:],S2[j:]) = max(lcs(S1[i:],S2[j+1:]), lcs(S1[i+1s:],S2[j:]))   Recursive solution: 1 2 3 4 5 6 7 8 9 10 11 12  int longestCommonSubsequence(string text1, string text2) { if(text1.size() == 0 || text2.size() == 0 ){ return 0; } if(text1[0] == text2[0]){ return 1 + longestCommonSubsequence(text1.substr(1, text1.]]></description>
</item><item>
    <title>Dynamic Programming</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/dp/</link>
    <pubDate>Fri, 10 Jul 2020 18:41:10 -0400</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/dp/</guid>
    <description><![CDATA[What is dp problem DP problem is a programming strategy which use extra space to save time.
fibonacci&hellip;
DP table State transaction equation DP problem Example I have another post to classify dp problem See this Post]]></description>
</item><item>
    <title>Programing language comparison - basic</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/language-comparison-basic/</link>
    <pubDate>Sun, 21 Jun 2020 01:26:30 -0400</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/language-comparison-basic/</guid>
    <description><![CDATA[]]></description>
</item><item>
    <title>Data structure comparison</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/language-comparison-data-structure/</link>
    <pubDate>Sun, 21 Jun 2020 00:26:30 -0400</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/language-comparison-data-structure/</guid>
    <description><![CDATA[]]></description>
</item><item>
    <title>Go overview</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/go/</link>
    <pubDate>Sun, 21 Jun 2020 00:25:10 -0400</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/go/</guid>
    <description><![CDATA[Download Go to this link
workspace Run go env in terminal. The variable GOPATH is the default workspace path. Project should under this folder.
In this workspace, file should structured as how you route your project:
1 2 3 4 5 6 7  . ├── bin ├── pkg └── src └── &lt;The home web page of version control&gt; └── &lt;User name&gt; └── &lt;Project name&gt;   Example:
1 2 3 4 5 6 7 8  .]]></description>
</item><item>
    <title>Vuex Overview</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/vuex-overview/</link>
    <pubDate>Fri, 29 May 2020 16:54:43 -0400</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/vuex-overview/</guid>
    <description><![CDATA[Vuex Document: English 中文
Concept  State - App-level state/data Getters - Get pieces of state or computed values from state Actions - Called from components to commit mutation (async) Mutations - Mutate the state (sync) Modules - Each module can have its own state, getters, actions and mutations  Work flow Vuex work flow is similar with Redux:
Basic structure In store/index.js
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  // import vue and vuex import Vuex from &#39;vuex&#39;; import Vue from &#39;vue&#39;; // import module import users from &#39;.]]></description>
</item><item>
    <title>Vue Overview</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/vue-overview/</link>
    <pubDate>Sun, 17 May 2020 16:51:23 -0400</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/vue-overview/</guid>
    <description><![CDATA[Vue Document: English 中文
life cycle Basic structure 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  &lt;template&gt; &lt;div&gt;&lt;/div&gt; &lt;/template&gt; &lt;script&gt; export default { name: &#39;&#39;, props: [...], data() { return {}; }, computed:{ ... } methods: { ... } }; &lt;/script&gt; &lt;style lang=&#34;css&#34;&gt;&lt;/style&gt;   Basic vue function v-bind 1 2 3 4 5 6 7  &lt;option v-for=&#34;(user, idx) in Users&#34; :key=&#34;idx&#34; :value=&#34;user.]]></description>
</item><item>
    <title>Js Trick</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/js-trick/</link>
    <pubDate>Sun, 03 May 2020 23:12:40 -0400</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/js-trick/</guid>
    <description><![CDATA[Convert to integer 1 2  Number(&#39;100&#39;); +&#39;100&#39;;   Shallow copy &amp; Deep copy Shallow copy 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  // array let nums1 = [1, 2, 3, 4, 5]; let nums2 = [...nums1]; let num3 = nums1.concat(); let num3 = nums1.slice(); // Object let obj1 = { test1: 1, test2: { test3: 2, test4: 3, }, }; let obj2 = { .]]></description>
</item><item>
    <title>Python Overview</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/python-overview/</link>
    <pubDate>Tue, 28 Apr 2020 16:43:12 -0400</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/python-overview/</guid>
    <description><![CDATA[This posts only use as a remainder
Variable Multiple assignment 1  x, y, name, is_cool = (1, 2.5, &#39;a name&#39;, True)   Casting 1 2 3 4  x = str(x) # x will be string y = int(y) # y will be an integer   String 1 2 3 4 5 6  name = &#39;Brad&#39; age = 37 print(&#39;name is&#39; + name + &#39; and age is &#39; + str(age)) print(&#39;name is {name} and age is {age}&#39;.]]></description>
</item><item>
    <title>chmod Overview</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/chmod/</link>
    <pubDate>Sat, 18 Apr 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/chmod/</guid>
    <description><![CDATA[chmod is linux command to control file permission
usage chmod [u|g|o|a][=|+|-] [r|w|x] 
u =&gt; user
g =&gt; group
o =&gt; other
a =&gt; all
r =&gt; read
w =&gt; write
x =&gt; execute
example chmod +wr test.txt give write and read permission for user
chmod -r test.txt remove read permission for user
chmod g=wrx test.txt give write, read and execute permission for group
use number specific the bits 011101110111 =&gt; -rwx-rwx-rwx]]></description>
</item></channel>
</rss>
