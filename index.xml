<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>TyrangYang_Blog</title><link>https://tyrangyang.github.io/TyrangYang_blog/</link><description>This is my cool site</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 26 Feb 2024 14:29:08 -0800</lastBuildDate><atom:link href="https://tyrangyang.github.io/TyrangYang_blog/index.xml" rel="self" type="application/rss+xml"/><item><title>HTML/Document Trick</title><link>https://tyrangyang.github.io/TyrangYang_blog/html-trick/</link><pubDate>Mon, 26 Feb 2024 14:29:08 -0800</pubDate><author>xxxx</author><guid>https://tyrangyang.github.io/TyrangYang_blog/html-trick/</guid><description><![CDATA[Understanding offsetWidth, clientWidth, scrollWidth Note All these property will round the value to an integer. If you need a fractional value, use element.getBoundingClientRect(). Get Scrollbar width Reference: https://www.30secondsofcode.org/js/s/get-scrollbar-width/
Get window scroll bar width const getScrollbarWidth = () =&gt; window.innerWidth - document.documentElement.clientWidth; getScrollbarWidth(); Get a element scroll bar width const getScrollbarWidth = (el) =&gt; { const leftBorder = parseInt( getComputedStyle(el).getPropertyValue(&#39;border-left-width&#39;), 10 ); const rightBorder = parseInt( getComputedStyle(el).getPropertyValue(&#39;border-right-width&#39;), 10 ); return el.offsetWidth - el.]]></description></item><item><title>Typescript Trick</title><link>https://tyrangyang.github.io/TyrangYang_blog/typescript-trick/</link><pubDate>Mon, 26 Feb 2024 14:11:05 -0800</pubDate><author>xxxx</author><guid>https://tyrangyang.github.io/TyrangYang_blog/typescript-trick/</guid><description><![CDATA[generic types optional To make a generic type optional, you have to assign the void as the default value.
const fetchData = &lt;T = void&gt;(url: string): T =&gt; { const res: T = fetch(url); return res; }; https://garbagevalue.com/blog/optional-generic-typescript#quick-solutions-make-generic-type-optional
string[ ] &amp; [ string, &hellip;string[ ] ] The main difference is that type [string, ...string[]] at least have one element. [] will alert error. string[] could be empty. [] is ok.]]></description></item><item><title>ffmpeg</title><link>https://tyrangyang.github.io/TyrangYang_blog/ffmpeg/</link><pubDate>Sun, 12 Mar 2023 14:48:36 -0700</pubDate><author>xxxx</author><guid>https://tyrangyang.github.io/TyrangYang_blog/ffmpeg/</guid><description><![CDATA[Reference official https://ffmpeg.org
blog https://fireship.io/lessons/ffmpeg-useful-techniques/
node js https://www.npmjs.com/package/fluent-ffmpeg
example concatenate ffmpeg -f concat -i vids.txt -c copy out.mp4
vids.txt:
file &#39;name1.mov&#39; file &#39;name2.mov&#39; file &#39;name3.mov&#39; Type convention ffmpeg -i in.mp4 out.mov
ffmpeg -i in.mp4 out.gif
Scale It very common to reduce size of output file. Change scale usually the common and efficient way to do so.
ffmpeg -i in.mov -vf scale=960:-1 out.gif
Reference from ffmpeg wiki]]></description></item><item><title>Design Pattern</title><link>https://tyrangyang.github.io/TyrangYang_blog/design-pattern/</link><pubDate>Thu, 22 Jul 2021 16:35:53 -0700</pubDate><author>xxxx</author><guid>https://tyrangyang.github.io/TyrangYang_blog/design-pattern/</guid><description><![CDATA[Design pattern Factory pattern const createDataBaseClass = (dbName: DBOption) =&gt; { switch (dbName) { case &#39;InMemo&#39;: return InMemoryDataBase; case &#39;SQL&#39;: return SQL_DB; // ... // you can add anything else default: break; } }; Singleton pattern export const createDataBase = &lt;T extends BaseRecord&gt;() =&gt; { const db = new InMemoryDataBase&lt;T&gt;(); return db; }; const pokemonDB = createDataBase&lt;Pokemon&gt;(); pokemonDB.set({ id: &#39;Bulbasaur&#39;, attack: 59, defense: 10, }); console.log(pokemonDB.get(&#39;Bulbasaur&#39;)); // A CPP way to do const createDataBase2 = &lt;T extends BaseRecord&gt;() =&gt; { class InMemoryDataBase2 implements DataBase&lt;T&gt; { private db: Record&lt;string, T&gt; = {}; static instance: InMemoryDataBase2 = new InMemoryDataBase2(); private constructor() {} // private constructor is necessary public set(newValue: T): void { this.]]></description></item><item><title>Typescript overview</title><link>https://tyrangyang.github.io/TyrangYang_blog/typescript/</link><pubDate>Thu, 08 Apr 2021 23:37:35 -0700</pubDate><author>xxxx</author><guid>https://tyrangyang.github.io/TyrangYang_blog/typescript/</guid><description><![CDATA[type Union type &amp; Literal type const add = ( a: number | string, b: number | string, type?: &#39;number&#39; | &#39;string&#39; ): number | string =&gt; { if (type === &#39;string&#39;) { return a.toString() + b.toString(); } else return +a + +b; }; console.log(add(1, 2)); Array type Book = { id: string; name: string; }; let books: Book[] = []; unknown let test1: unknown; let test2: string; test1 = &#39;xyz&#39;; // ok // test2 = test1; // error function f1(a: any) { a.]]></description></item><item><title>React Logic Reuse Example</title><link>https://tyrangyang.github.io/TyrangYang_blog/react-logic-reuse/</link><pubDate>Fri, 12 Mar 2021 04:04:08 -0800</pubDate><author>Haolin Yang</author><guid>https://tyrangyang.github.io/TyrangYang_blog/react-logic-reuse/</guid><description><![CDATA[React logic extraction Check this post
Example code This example demonstrate one single feature using four different feature to archive code split
Code running there: &ndash;&gt;Link&lt;&ndash;
import { useState, useEffect } from React; const Styles = { redBorder: { border: &#39;1px solid #f00&#39;, }, }; const MouseDisplay = ({ x, y }) =&gt; { return ( &lt;div&gt; Mouse at x: {x} ; y: {y} &lt;/div&gt; ); }; const MouseDisplay2 = ({ x, y }) =&gt; { return ( &lt;div style={{ color: &#39;teal&#39; }}&gt; Mouse at x: {x} ; y: {y} &lt;/div&gt; ); }; // Normal export const MouseInfoAndDisplay = () =&gt; { const [x, setX] = useState(0); const [y, setY] = useState(0); const handleMove = (e) =&gt; { setX(e.]]></description></item><item><title>Useful Post Archive</title><link>https://tyrangyang.github.io/TyrangYang_blog/useful-post-archive/</link><pubDate>Sat, 27 Feb 2021 22:57:47 -0800</pubDate><author>xxxx</author><guid>https://tyrangyang.github.io/TyrangYang_blog/useful-post-archive/</guid><description><![CDATA[React &ndash;&gt;Look this post&lt;&ndash;
WEB basic Please Stop Using Local Storage https://www.rdegges.com/2018/please-stop-using-local-storage/
JWT authentication: When and how to use it https://blog.logrocket.com/jwt-authentication-best-practices/#:~:text=A%20JWT%20needs%20to%20be,storage%20(or%20session%20storage).
Graphql Dispatch This: Using Apollo Client 3 as a State Management Solution https://www.apollographql.com/blog/dispatch-this-using-apollo-client-3-as-a-state-management-solution/
Apollo Client update cache when delete an item from list https://github.com/apollographql/apollo-client/issues/6451#issuecomment-775242381
Several things for Graphql Security https://ithelp.ithome.com.tw/articles/10208008
should I put useQuery inside a useEffect and should I store returned data in state? https://github.com/trojanowski/react-apollo-hooks/issues/158
How to Use GraphQL DataLoader https://rahmanfadhil.]]></description></item><item><title>HTML Effect with vanilla html js css</title><link>https://tyrangyang.github.io/TyrangYang_blog/html-effect/</link><pubDate>Mon, 14 Dec 2020 15:52:02 -0800</pubDate><author>xxxx</author><guid>https://tyrangyang.github.io/TyrangYang_blog/html-effect/</guid><description>Modal box Demo
Cursor &amp;amp; hover effect Demo
Pure Css hamburger button This is a hamburger button using pure css to style it.
Demo
Loading Demo
Sidebar Demo
Profile Demo</description></item><item><title>Webpack Overview</title><link>https://tyrangyang.github.io/TyrangYang_blog/webpack-overview/</link><pubDate>Wed, 09 Dec 2020 19:12:38 -0700</pubDate><author>xxxx</author><guid>https://tyrangyang.github.io/TyrangYang_blog/webpack-overview/</guid><description>webpack is a static module bundler for modern JavaScript applications.
Document: https://webpack.js.org/concepts/
Installation npm i -D webpack webpack-cli webpack core concept Entry An entry point indicates which module webpack should use to begin building out its internal dependency graph. webpack will figure out which other modules and libraries that entry point depends on (directly and indirectly).
Output The output property tells webpack where to emit the bundles it creates and how to name these files.</description></item><item><title>Jest Overview</title><link>https://tyrangyang.github.io/TyrangYang_blog/jest-overview/</link><pubDate>Mon, 14 Sep 2020 18:36:51 -0700</pubDate><author>xxxx</author><guid>https://tyrangyang.github.io/TyrangYang_blog/jest-overview/</guid><description><![CDATA[Jest is a JavaScript Testing Framework
Document: https://jestjs.io/docs/en/getting-started
How to use Jest function.js
const axios = require(&#39;axios&#39;); const functions = { add: (num1, num2) =&gt; num1 + num2, isNull: () =&gt; null, checkValue: (x) =&gt; x, createUser: () =&gt; { const user = { firstName: &#39;Brad&#39; }; user[&#39;lastName&#39;] = &#39;Traversy&#39;; return user; }, fetchUser: () =&gt; axios .get(&#39;https://jsonplaceholder.typicode.com/users/1&#39;) .then((res) =&gt; res.data) .catch((err) =&gt; &#39;error&#39;), }; module.exports = functions; function.test.js]]></description></item></channel></rss>