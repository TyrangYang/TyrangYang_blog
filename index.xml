<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>TyrangYang_Blog</title>
        <link>https://tyrangyang.github.io/TyrangYang_blog/</link>
        <description>TyrangYang_Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 29 May 2020 16:54:43 -0400</lastBuildDate>
            <atom:link href="https://tyrangyang.github.io/TyrangYang_blog/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>Vuex Overview</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/vuex-overview/</link>
    <pubDate>Fri, 29 May 2020 16:54:43 -0400</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/vuex-overview/</guid>
    <description><![CDATA[Vuex Document: English 中文
Concept  State - App-level state/data Getters - Get pieces of state or computed values from state Actions - Called from components to commit mutation (async) Mutations - Mutate the state (sync) Modules - Each module can have its own state, getters, actions and mutations  Work flow Basic structure In store/index.js
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  // import vue and vuex import Vuex from &#39;vuex&#39;; import Vue from &#39;vue&#39;; // import module import users from &#39;.]]></description>
</item><item>
    <title>Vue Overview</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/vue-overview/</link>
    <pubDate>Sun, 17 May 2020 16:51:23 -0400</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/vue-overview/</guid>
    <description><![CDATA[Vue Document: English 中文
life cycle Basic structure 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  &lt;template&gt; &lt;div&gt;&lt;/div&gt; &lt;/template&gt; &lt;script&gt; export default { name: &#39;&#39;, props: [...], data() { return {}; }, computed:{ ... } methods: { ... } }; &lt;/script&gt; &lt;style lang=&#34;css&#34;&gt;&lt;/style&gt;   Basic vue function v-bind 1 2 3 4 5 6 7  &lt;option v-for=&#34;(user, idx) in Users&#34; :key=&#34;idx&#34; :value=&#34;user.]]></description>
</item><item>
    <title>Js Trick</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/js-trick/</link>
    <pubDate>Sun, 03 May 2020 23:12:40 -0400</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/js-trick/</guid>
    <description><![CDATA[Convert to integer 1 2  Number(&#39;100&#39;); +&#39;100&#39;;   Shallow copy &amp; Deep copy Shallow copy 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  // array let nums1 = [1, 2, 3, 4, 5]; let nums2 = [...nums1]; let num3 = nums1.concat(); let num3 = nums1.slice(); // Object let obj1 = { test1: 1, test2: { test3: 2, test4: 3, }, }; let obj2 = { .]]></description>
</item><item>
    <title>Python Overview</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/python-overview/</link>
    <pubDate>Tue, 28 Apr 2020 16:43:12 -0400</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/python-overview/</guid>
    <description><![CDATA[This posts only use as a remainder
Variable Multiple assignment 1  x, y, name, is_cool = (1, 2.5, &#39;a name&#39;, True)   Casting 1 2 3 4  x = str(x) # x will be string y = int(y) # y will be an integer   String 1 2 3 4 5 6  name = &#39;Brad&#39; age = 37 print(&#39;name is&#39; + name + &#39; and age is &#39; + str(age)) print(&#39;name is {name} and age is {age}&#39;.]]></description>
</item><item>
    <title>chmod Overview</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/chmod/</link>
    <pubDate>Sat, 18 Apr 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/chmod/</guid>
    <description><![CDATA[chmod is linux command to control file permission
usage chmod [u|g|o|a][=|+|-] [r|w|x] 
u =&gt; user
g =&gt; group
o =&gt; other
a =&gt; all
r =&gt; read
w =&gt; write
x =&gt; execute
example chmod +wr test.txt give write and read permission for user
chmod -r test.txt remove read permission for user
chmod g=wrx test.txt give write, read and execute permission for group
use number specific the bits 011101110111 =&gt; -rwx-rwx-rwx]]></description>
</item><item>
    <title>SocketIo Overview</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/socketio/</link>
    <pubDate>Sat, 18 Apr 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/socketio/</guid>
    <description><![CDATA[socket.io enable realtime, bidirectional communication for Nodejs
Backend We use Express as backend framework.
1 2 3 4 5 6 7 8 9 10 11 12  const express = require(&#39;express&#39;); const path = require(&#39;path&#39;); const http = require(&#39;http&#39;); const socket_io = require(&#39;socket.io&#39;); const app = express(); const server = http.createServer(app); const io = socket_io(server); io.on(&#39;connection&#39;, (server_socket) =&gt; { // ... }   Frontend  bring client side socket.io in your html file  1  &lt;script src=&#34;https://tyrangyang.github.io/TyrangYang_blog/socket.]]></description>
</item><item>
    <title>SSH Overview</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/ssh/</link>
    <pubDate>Sat, 18 Apr 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/ssh/</guid>
    <description><![CDATA[ssh-keygen ssh-keygen
-b specific the number of bits(1024 2048 4069)
-m specific type
-y get public key
-f specific file name
public key public key should give to server. Usually put in file ~/.ssh/authorized_key
access via SSH ssh &lt;username&gt;@&lt;hostname | ip address&gt;]]></description>
</item><item>
    <title>Heroku overview</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/heroku/</link>
    <pubDate>Wed, 15 Apr 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/heroku/</guid>
    <description><![CDATA[Heroku can help us deploy our application(back end) rapidly and easy
deploy The only we need to take care is the PORT of your app. You have to use the PORT in environment.
In Node.js
1  PORT = process.env.PORT || 3000; // 3000 can be anything else   heroku cli Home page
heroku login
heroku create
git push heroku master]]></description>
</item><item>
    <title>Canvas in html5</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/canvas/</link>
    <pubDate>Wed, 08 Apr 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/canvas/</guid>
    <description><![CDATA[Canvas is a new feature since html5 that allows you draw something on your web page
Reference from MDN
Project by using Canvas  Chaos Game: Use canvas to draw the chaos game Draw panel with socket.io: A scribble panel with Websocket. Multi user can draw panel on simultaneously  Draw on canvas Get start Jquery to get canvas. ctx mean canvas content which used to draw on canvas
1 2  const canvas = document.]]></description>
</item><item>
    <title>All array method in Nodejs</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-nodejs/</link>
    <pubDate>Mon, 06 Apr 2020 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/all-arrary-method-in-nodejs/</guid>
    <description><![CDATA[All methods  foreach map filter reduce slice splice sort concat fill include join reverse push pop unshift shift indexOf &amp; lastIndexOf every some find findIndex from isArray flat    All methods foreach 1 2 3 4 5 6 7 8 9 10  let numbers = [1, 2, 3, 4, 5]; // each element in a func numbers.forEach((element, index, arr) =&gt; { console.log(`a[${index}] = ${element}`); }); // a[0] = 1 // a[1] = 2 // a[2] = 3 // a[3] = 4 // a[4] = 5   map 1 2 3 4 5 6 7  let numbers = [1, 2, 3, 4, 5]; // [] =&gt; [] (some size) let numbers2 = numbers.]]></description>
</item></channel>
</rss>
