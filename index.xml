<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>TyrangYang_Blog</title>
        <link>https://tyrangyang.github.io/TyrangYang_blog/</link>
        <description>TyrangYang_Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 18 Aug 2020 12:04:51 -0700</lastBuildDate>
            <atom:link href="https://tyrangyang.github.io/TyrangYang_blog/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>Flex and Grid in CSS</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/flex-grid/</link>
    <pubDate>Tue, 18 Aug 2020 12:04:51 -0700</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/flex-grid/</guid>
    <description><![CDATA[Flex A Flexbox code Example
display 1 2 3  .container { display: flex; }   flex-direction 1 2 3  .container { flex-direction: row | row-reverse | column | column-reverse; }     flex-direction   flex-warp 1 2 3  .container { flex-wrap: nowrap | wrap | wrap-reverse; }     flex-wrap   flex-flow This is a shorthand for the flex-direction and flex-wrap properties.]]></description>
</item><item>
    <title>Hugo Blog CheatSheet</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/hugo-blog-cheatsheet/</link>
    <pubDate>Mon, 17 Aug 2020 16:43:42 -0700</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/hugo-blog-cheatsheet/</guid>
    <description><![CDATA[Create new post hugo new posts/new.md
Add a picture   Basic markdown ![&lt;alt name](&lt; The route start from static folder&gt;)
  hugo build-in shortcut &ndash;&gt; figure   
  Add a reference link Documentation of ref and relref
1 2  \[Neat](\{\{&lt; ref &#34;blog/neat.md&#34; &gt;}}) \[Who](\{\{&lt; relref &#34;about.md#who&#34; &gt;}})   ]]></description>
</item><item>
    <title>Http Status Code Overview</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/http-status-code/</link>
    <pubDate>Thu, 13 Aug 2020 14:11:38 -0700</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/http-status-code/</guid>
    <description><![CDATA[Reference: https://www.restapitutorial.com/httpstatuscodes.html
 ‚≠êÔ∏é -&gt; &ldquo;Top 10&rdquo; HTTP Status Code. More REST service-specific information is contained in the entry.
 1XX Information  100 continue &ndash; Client should continue 101 switching protocols 102 processing (webDAV)  2XX Success  ‚≠êÔ∏é200 OK &ndash; The request has succeeded.  General status code. Most common code used to indicate success.
  ‚≠êÔ∏é201 Created &ndash; A new resource has been created and should return a URI.]]></description>
</item><item>
    <title>Html5 Overview üèó</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/html5-overview/</link>
    <pubDate>Thu, 13 Aug 2020 14:02:26 -0700</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/html5-overview/</guid>
    <description><![CDATA[]]></description>
</item><item>
    <title>Dynamic Programming Example</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/dp-example/</link>
    <pubDate>Fri, 10 Jul 2020 18:49:03 -0400</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/dp-example/</guid>
    <description><![CDATA[Longest common subsequence This is a typical recursive problem. The pseudocode is:
1 2  If S1[i] == S2[j], lcs(S1[i:],S2[j:]) = 1 + lcs(S1[i+1:],S2[j+1:]) else lcs(S1[i:],S2[j:]) = max(lcs(S1[i:],S2[j+1:]), lcs(S1[i+1s:],S2[j:]))   Recursive solution: 1 2 3 4 5 6 7 8 9 10 11 12  int longestCommonSubsequence(string text1, string text2) { if(text1.size() == 0 || text2.size() == 0 ){ return 0; } if(text1[0] == text2[0]){ return 1 + longestCommonSubsequence(text1.substr(1, text1.]]></description>
</item><item>
    <title>Dynamic Programming üèó</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/dp/</link>
    <pubDate>Fri, 10 Jul 2020 18:41:10 -0400</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/dp/</guid>
    <description><![CDATA[What is dp problem DP problem is a programming strategy which use extra space to save time.
fibonacci&hellip;
DP table State transaction equation DP problem Example I have another post to classify dp problem See this Post]]></description>
</item><item>
    <title>Programing language comparison - basic üèó</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/language-comparison-basic/</link>
    <pubDate>Sun, 21 Jun 2020 01:26:30 -0400</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/language-comparison-basic/</guid>
    <description><![CDATA[]]></description>
</item><item>
    <title>Data structure comparison üèó</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/language-comparison-data-structure/</link>
    <pubDate>Sun, 21 Jun 2020 00:26:30 -0400</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/language-comparison-data-structure/</guid>
    <description><![CDATA[]]></description>
</item><item>
    <title>Go overview üèó</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/go/</link>
    <pubDate>Sun, 21 Jun 2020 00:25:10 -0400</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/go/</guid>
    <description><![CDATA[Download Go to this link
workspace Run go env in terminal. The variable GOPATH is the default workspace path. Project should under this folder.
In this workspace, file should structured as how you route your project:
1 2 3 4 5 6 7  . ‚îú‚îÄ‚îÄ bin ‚îú‚îÄ‚îÄ pkg ‚îî‚îÄ‚îÄ src ‚îî‚îÄ‚îÄ &lt;The home web page of version control&gt; ‚îî‚îÄ‚îÄ &lt;User name&gt; ‚îî‚îÄ‚îÄ &lt;Project name&gt;   Example:
1 2 3 4 5 6 7 8  .]]></description>
</item><item>
    <title>Vuex Overview</title>
    <link>https://tyrangyang.github.io/TyrangYang_blog/vuex-overview/</link>
    <pubDate>Fri, 29 May 2020 16:54:43 -0400</pubDate>
    <author>Author</author>
    <guid>https://tyrangyang.github.io/TyrangYang_blog/vuex-overview/</guid>
    <description><![CDATA[Vuex Document: English ‰∏≠Êñá
Concept  State - App-level state/data Getters - Get pieces of state or computed values from state Actions - Called from components to commit mutation (async) Mutations - Mutate the state (sync) Modules - Each module can have its own state, getters, actions and mutations  Work flow Vuex work flow is similar with Redux:
Basic structure In store/index.js
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  // import vue and vuex import Vuex from &#39;vuex&#39;; import Vue from &#39;vue&#39;; // import module import users from &#39;.]]></description>
</item></channel>
</rss>
